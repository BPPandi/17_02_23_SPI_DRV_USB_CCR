
17_02_23_SPI_DRV_USB_CCR_PWM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009780  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000009c  08009910  08009910  00019910  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080099ac  080099ac  00020760  2**0
                  CONTENTS
  4 .ARM          00000008  080099ac  080099ac  000199ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080099b4  080099b4  00020760  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080099b4  080099b4  000199b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080099b8  080099b8  000199b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000760  20000000  080099bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020760  2**0
                  CONTENTS
 10 .bss          00001d88  20000760  20000760  00020760  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200024e8  200024e8  00020760  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020760  2**0
                  CONTENTS, READONLY
 13 .debug_info   000164e6  00000000  00000000  00020790  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000034b6  00000000  00000000  00036c76  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000013b0  00000000  00000000  0003a130  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001228  00000000  00000000  0003b4e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023ebb  00000000  00000000  0003c708  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018102  00000000  00000000  000605c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d0d88  00000000  00000000  000786c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0014944d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005694  00000000  00000000  001494a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000760 	.word	0x20000760
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080098f8 	.word	0x080098f8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000764 	.word	0x20000764
 80001cc:	080098f8 	.word	0x080098f8

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <delay_us>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void delay_us (uint16_t us)
{
 8000584:	b480      	push	{r7}
 8000586:	b083      	sub	sp, #12
 8000588:	af00      	add	r7, sp, #0
 800058a:	4603      	mov	r3, r0
 800058c:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim2,0);  // set the counter value a 0
 800058e:	4b09      	ldr	r3, [pc, #36]	; (80005b4 <delay_us+0x30>)
 8000590:	681b      	ldr	r3, [r3, #0]
 8000592:	2200      	movs	r2, #0
 8000594:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim2) < us);  // wait for the counter to reach the us input in the parameter
 8000596:	bf00      	nop
 8000598:	4b06      	ldr	r3, [pc, #24]	; (80005b4 <delay_us+0x30>)
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800059e:	88fb      	ldrh	r3, [r7, #6]
 80005a0:	429a      	cmp	r2, r3
 80005a2:	d3f9      	bcc.n	8000598 <delay_us+0x14>
}
 80005a4:	bf00      	nop
 80005a6:	bf00      	nop
 80005a8:	370c      	adds	r7, #12
 80005aa:	46bd      	mov	sp, r7
 80005ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop
 80005b4:	2000087c 	.word	0x2000087c

080005b8 <Get_Temperature>:
void Get_Temperature()
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	af00      	add	r7, sp, #0
	HAL_ADC_Start(&hadc1);
 80005bc:	4818      	ldr	r0, [pc, #96]	; (8000620 <Get_Temperature+0x68>)
 80005be:	f000 fdf3 	bl	80011a8 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1,20);
 80005c2:	2114      	movs	r1, #20
 80005c4:	4816      	ldr	r0, [pc, #88]	; (8000620 <Get_Temperature+0x68>)
 80005c6:	f000 fef4 	bl	80013b2 <HAL_ADC_PollForConversion>
	analog_value = HAL_ADC_GetValue(&hadc1);	/* store adc value on val register */
 80005ca:	4815      	ldr	r0, [pc, #84]	; (8000620 <Get_Temperature+0x68>)
 80005cc:	f000 ff7c 	bl	80014c8 <HAL_ADC_GetValue>
 80005d0:	4603      	mov	r3, r0
 80005d2:	b29a      	uxth	r2, r3
 80005d4:	4b13      	ldr	r3, [pc, #76]	; (8000624 <Get_Temperature+0x6c>)
 80005d6:	801a      	strh	r2, [r3, #0]
	HAL_ADC_Stop(&hadc1);
 80005d8:	4811      	ldr	r0, [pc, #68]	; (8000620 <Get_Temperature+0x68>)
 80005da:	f000 feb7 	bl	800134c <HAL_ADC_Stop>
	/*NTC_Resistance = ((4095*Series_Resistance/analog_value) - Series_Resistance);
	Thermistor_temperature = log(NTC_Resistance);
	Thermistor_temperature = ((1.0/(Room_temperature + 273.15))+(1.0/B_coefficient)*log(NTC_Resistance/Series_Resistance));
	Thermistor_temperature = (1/Thermistor_temperature) - 273.15;*/
	Thermistor_temperature = 	(analog_value/30)-45;
 80005de:	4b11      	ldr	r3, [pc, #68]	; (8000624 <Get_Temperature+0x6c>)
 80005e0:	881b      	ldrh	r3, [r3, #0]
 80005e2:	4a11      	ldr	r2, [pc, #68]	; (8000628 <Get_Temperature+0x70>)
 80005e4:	fba2 2303 	umull	r2, r3, r2, r3
 80005e8:	091b      	lsrs	r3, r3, #4
 80005ea:	b29b      	uxth	r3, r3
 80005ec:	3b2d      	subs	r3, #45	; 0x2d
 80005ee:	b29a      	uxth	r2, r3
 80005f0:	4b0e      	ldr	r3, [pc, #56]	; (800062c <Get_Temperature+0x74>)
 80005f2:	801a      	strh	r2, [r3, #0]
	CDC_Transmit_FS("Temp = ",6);
 80005f4:	2106      	movs	r1, #6
 80005f6:	480e      	ldr	r0, [pc, #56]	; (8000630 <Get_Temperature+0x78>)
 80005f8:	f008 f882 	bl	8008700 <CDC_Transmit_FS>
	sprintf(strValueA,"%u\r\n",Thermistor_temperature);
 80005fc:	4b0b      	ldr	r3, [pc, #44]	; (800062c <Get_Temperature+0x74>)
 80005fe:	881b      	ldrh	r3, [r3, #0]
 8000600:	461a      	mov	r2, r3
 8000602:	490c      	ldr	r1, [pc, #48]	; (8000634 <Get_Temperature+0x7c>)
 8000604:	480c      	ldr	r0, [pc, #48]	; (8000638 <Get_Temperature+0x80>)
 8000606:	f008 fd09 	bl	800901c <siprintf>
	CDC_Transmit_FS(strValueA,strlen(strValueA));
 800060a:	480b      	ldr	r0, [pc, #44]	; (8000638 <Get_Temperature+0x80>)
 800060c:	f7ff fde0 	bl	80001d0 <strlen>
 8000610:	4603      	mov	r3, r0
 8000612:	b29b      	uxth	r3, r3
 8000614:	4619      	mov	r1, r3
 8000616:	4808      	ldr	r0, [pc, #32]	; (8000638 <Get_Temperature+0x80>)
 8000618:	f008 f872 	bl	8008700 <CDC_Transmit_FS>
}
 800061c:	bf00      	nop
 800061e:	bd80      	pop	{r7, pc}
 8000620:	20000794 	.word	0x20000794
 8000624:	2000077e 	.word	0x2000077e
 8000628:	88888889 	.word	0x88888889
 800062c:	2000077c 	.word	0x2000077c
 8000630:	08009910 	.word	0x08009910
 8000634:	08009918 	.word	0x08009918
 8000638:	20000780 	.word	0x20000780

0800063c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000640:	f000 fcd8 	bl	8000ff4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000644:	f000 f874 	bl	8000730 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000648:	f000 fa68 	bl	8000b1c <MX_GPIO_Init>
  MX_ADC1_Init();
 800064c:	f000 f8d8 	bl	8000800 <MX_ADC1_Init>
  MX_SPI3_Init();
 8000650:	f000 f928 	bl	80008a4 <MX_SPI3_Init>
  MX_TIM1_Init();
 8000654:	f000 f95e 	bl	8000914 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000658:	f000 fa14 	bl	8000a84 <MX_TIM2_Init>
  MX_USB_DEVICE_Init();
 800065c:	f007 ff92 	bl	8008584 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim2);
 8000660:	482b      	ldr	r0, [pc, #172]	; (8000710 <main+0xd4>)
 8000662:	f003 fba9 	bl	8003db8 <HAL_TIM_Base_Start>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  Get_Temperature();
 8000666:	f7ff ffa7 	bl	80005b8 <Get_Temperature>
	  for(k=0;k<73;k++)
 800066a:	4b2a      	ldr	r3, [pc, #168]	; (8000714 <main+0xd8>)
 800066c:	2200      	movs	r2, #0
 800066e:	801a      	strh	r2, [r3, #0]
 8000670:	e03f      	b.n	80006f2 <main+0xb6>
	{
		PhaseA = PhaseA +1;
 8000672:	4b29      	ldr	r3, [pc, #164]	; (8000718 <main+0xdc>)
 8000674:	881b      	ldrh	r3, [r3, #0]
 8000676:	3301      	adds	r3, #1
 8000678:	b29a      	uxth	r2, r3
 800067a:	4b27      	ldr	r3, [pc, #156]	; (8000718 <main+0xdc>)
 800067c:	801a      	strh	r2, [r3, #0]

		 TIM1->CCR1 = PhaseA_wave[PhaseA];
 800067e:	4b26      	ldr	r3, [pc, #152]	; (8000718 <main+0xdc>)
 8000680:	881b      	ldrh	r3, [r3, #0]
 8000682:	4619      	mov	r1, r3
 8000684:	4a25      	ldr	r2, [pc, #148]	; (800071c <main+0xe0>)
 8000686:	4b26      	ldr	r3, [pc, #152]	; (8000720 <main+0xe4>)
 8000688:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800068c:	6353      	str	r3, [r2, #52]	; 0x34
		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800068e:	2100      	movs	r1, #0
 8000690:	4824      	ldr	r0, [pc, #144]	; (8000724 <main+0xe8>)
 8000692:	f003 fc53 	bl	8003f3c <HAL_TIM_PWM_Start>
		HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 8000696:	2100      	movs	r1, #0
 8000698:	4822      	ldr	r0, [pc, #136]	; (8000724 <main+0xe8>)
 800069a:	f004 f9b1 	bl	8004a00 <HAL_TIMEx_PWMN_Start>
		//delay_us(30);
		TIM1->CCR2 = PhaseB_wave[PhaseA];
 800069e:	4b1e      	ldr	r3, [pc, #120]	; (8000718 <main+0xdc>)
 80006a0:	881b      	ldrh	r3, [r3, #0]
 80006a2:	4619      	mov	r1, r3
 80006a4:	4a1d      	ldr	r2, [pc, #116]	; (800071c <main+0xe0>)
 80006a6:	4b20      	ldr	r3, [pc, #128]	; (8000728 <main+0xec>)
 80006a8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80006ac:	6393      	str	r3, [r2, #56]	; 0x38
		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80006ae:	2104      	movs	r1, #4
 80006b0:	481c      	ldr	r0, [pc, #112]	; (8000724 <main+0xe8>)
 80006b2:	f003 fc43 	bl	8003f3c <HAL_TIM_PWM_Start>
		HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 80006b6:	2104      	movs	r1, #4
 80006b8:	481a      	ldr	r0, [pc, #104]	; (8000724 <main+0xe8>)
 80006ba:	f004 f9a1 	bl	8004a00 <HAL_TIMEx_PWMN_Start>
		//delay_us(30);
		TIM1->CCR3 = PhaseC_wave[PhaseA];
 80006be:	4b16      	ldr	r3, [pc, #88]	; (8000718 <main+0xdc>)
 80006c0:	881b      	ldrh	r3, [r3, #0]
 80006c2:	4619      	mov	r1, r3
 80006c4:	4a15      	ldr	r2, [pc, #84]	; (800071c <main+0xe0>)
 80006c6:	4b19      	ldr	r3, [pc, #100]	; (800072c <main+0xf0>)
 80006c8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80006cc:	63d3      	str	r3, [r2, #60]	; 0x3c
		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 80006ce:	2108      	movs	r1, #8
 80006d0:	4814      	ldr	r0, [pc, #80]	; (8000724 <main+0xe8>)
 80006d2:	f003 fc33 	bl	8003f3c <HAL_TIM_PWM_Start>
		HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);
 80006d6:	2108      	movs	r1, #8
 80006d8:	4812      	ldr	r0, [pc, #72]	; (8000724 <main+0xe8>)
 80006da:	f004 f991 	bl	8004a00 <HAL_TIMEx_PWMN_Start>
		delay_us(330);
 80006de:	f44f 70a5 	mov.w	r0, #330	; 0x14a
 80006e2:	f7ff ff4f 	bl	8000584 <delay_us>
	  for(k=0;k<73;k++)
 80006e6:	4b0b      	ldr	r3, [pc, #44]	; (8000714 <main+0xd8>)
 80006e8:	881b      	ldrh	r3, [r3, #0]
 80006ea:	3301      	adds	r3, #1
 80006ec:	b29a      	uxth	r2, r3
 80006ee:	4b09      	ldr	r3, [pc, #36]	; (8000714 <main+0xd8>)
 80006f0:	801a      	strh	r2, [r3, #0]
 80006f2:	4b08      	ldr	r3, [pc, #32]	; (8000714 <main+0xd8>)
 80006f4:	881b      	ldrh	r3, [r3, #0]
 80006f6:	2b48      	cmp	r3, #72	; 0x48
 80006f8:	d9bb      	bls.n	8000672 <main+0x36>
	}
	if(k>=73)
 80006fa:	4b06      	ldr	r3, [pc, #24]	; (8000714 <main+0xd8>)
 80006fc:	881b      	ldrh	r3, [r3, #0]
 80006fe:	2b48      	cmp	r3, #72	; 0x48
 8000700:	d9b1      	bls.n	8000666 <main+0x2a>
	{
		PhaseA=0;
 8000702:	4b05      	ldr	r3, [pc, #20]	; (8000718 <main+0xdc>)
 8000704:	2200      	movs	r2, #0
 8000706:	801a      	strh	r2, [r3, #0]
		k=0;
 8000708:	4b02      	ldr	r3, [pc, #8]	; (8000714 <main+0xd8>)
 800070a:	2200      	movs	r2, #0
 800070c:	801a      	strh	r2, [r3, #0]
	  Get_Temperature();
 800070e:	e7aa      	b.n	8000666 <main+0x2a>
 8000710:	2000087c 	.word	0x2000087c
 8000714:	20000792 	.word	0x20000792
 8000718:	20000790 	.word	0x20000790
 800071c:	40010000 	.word	0x40010000
 8000720:	20000000 	.word	0x20000000
 8000724:	20000834 	.word	0x20000834
 8000728:	20000200 	.word	0x20000200
 800072c:	20000400 	.word	0x20000400

08000730 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b094      	sub	sp, #80	; 0x50
 8000734:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000736:	f107 0320 	add.w	r3, r7, #32
 800073a:	2230      	movs	r2, #48	; 0x30
 800073c:	2100      	movs	r1, #0
 800073e:	4618      	mov	r0, r3
 8000740:	f008 fc64 	bl	800900c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000744:	f107 030c 	add.w	r3, r7, #12
 8000748:	2200      	movs	r2, #0
 800074a:	601a      	str	r2, [r3, #0]
 800074c:	605a      	str	r2, [r3, #4]
 800074e:	609a      	str	r2, [r3, #8]
 8000750:	60da      	str	r2, [r3, #12]
 8000752:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000754:	2300      	movs	r3, #0
 8000756:	60bb      	str	r3, [r7, #8]
 8000758:	4b27      	ldr	r3, [pc, #156]	; (80007f8 <SystemClock_Config+0xc8>)
 800075a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800075c:	4a26      	ldr	r2, [pc, #152]	; (80007f8 <SystemClock_Config+0xc8>)
 800075e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000762:	6413      	str	r3, [r2, #64]	; 0x40
 8000764:	4b24      	ldr	r3, [pc, #144]	; (80007f8 <SystemClock_Config+0xc8>)
 8000766:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000768:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800076c:	60bb      	str	r3, [r7, #8]
 800076e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000770:	2300      	movs	r3, #0
 8000772:	607b      	str	r3, [r7, #4]
 8000774:	4b21      	ldr	r3, [pc, #132]	; (80007fc <SystemClock_Config+0xcc>)
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	4a20      	ldr	r2, [pc, #128]	; (80007fc <SystemClock_Config+0xcc>)
 800077a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800077e:	6013      	str	r3, [r2, #0]
 8000780:	4b1e      	ldr	r3, [pc, #120]	; (80007fc <SystemClock_Config+0xcc>)
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000788:	607b      	str	r3, [r7, #4]
 800078a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800078c:	2302      	movs	r3, #2
 800078e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000790:	2301      	movs	r3, #1
 8000792:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000794:	2310      	movs	r3, #16
 8000796:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000798:	2302      	movs	r3, #2
 800079a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800079c:	2300      	movs	r3, #0
 800079e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80007a0:	2310      	movs	r3, #16
 80007a2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 80007a4:	23c0      	movs	r3, #192	; 0xc0
 80007a6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007a8:	2302      	movs	r3, #2
 80007aa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80007ac:	2304      	movs	r3, #4
 80007ae:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007b0:	f107 0320 	add.w	r3, r7, #32
 80007b4:	4618      	mov	r0, r3
 80007b6:	f002 fdf7 	bl	80033a8 <HAL_RCC_OscConfig>
 80007ba:	4603      	mov	r3, r0
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d001      	beq.n	80007c4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80007c0:	f000 fa26 	bl	8000c10 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007c4:	230f      	movs	r3, #15
 80007c6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80007c8:	2300      	movs	r3, #0
 80007ca:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007cc:	2300      	movs	r3, #0
 80007ce:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007d0:	2300      	movs	r3, #0
 80007d2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007d4:	2300      	movs	r3, #0
 80007d6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80007d8:	f107 030c 	add.w	r3, r7, #12
 80007dc:	2100      	movs	r1, #0
 80007de:	4618      	mov	r0, r3
 80007e0:	f003 f85a 	bl	8003898 <HAL_RCC_ClockConfig>
 80007e4:	4603      	mov	r3, r0
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d001      	beq.n	80007ee <SystemClock_Config+0xbe>
  {
    Error_Handler();
 80007ea:	f000 fa11 	bl	8000c10 <Error_Handler>
  }
}
 80007ee:	bf00      	nop
 80007f0:	3750      	adds	r7, #80	; 0x50
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	bf00      	nop
 80007f8:	40023800 	.word	0x40023800
 80007fc:	40007000 	.word	0x40007000

08000800 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b084      	sub	sp, #16
 8000804:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000806:	463b      	mov	r3, r7
 8000808:	2200      	movs	r2, #0
 800080a:	601a      	str	r2, [r3, #0]
 800080c:	605a      	str	r2, [r3, #4]
 800080e:	609a      	str	r2, [r3, #8]
 8000810:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000812:	4b21      	ldr	r3, [pc, #132]	; (8000898 <MX_ADC1_Init+0x98>)
 8000814:	4a21      	ldr	r2, [pc, #132]	; (800089c <MX_ADC1_Init+0x9c>)
 8000816:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000818:	4b1f      	ldr	r3, [pc, #124]	; (8000898 <MX_ADC1_Init+0x98>)
 800081a:	2200      	movs	r2, #0
 800081c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800081e:	4b1e      	ldr	r3, [pc, #120]	; (8000898 <MX_ADC1_Init+0x98>)
 8000820:	2200      	movs	r2, #0
 8000822:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000824:	4b1c      	ldr	r3, [pc, #112]	; (8000898 <MX_ADC1_Init+0x98>)
 8000826:	2201      	movs	r2, #1
 8000828:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800082a:	4b1b      	ldr	r3, [pc, #108]	; (8000898 <MX_ADC1_Init+0x98>)
 800082c:	2201      	movs	r2, #1
 800082e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000830:	4b19      	ldr	r3, [pc, #100]	; (8000898 <MX_ADC1_Init+0x98>)
 8000832:	2200      	movs	r2, #0
 8000834:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000838:	4b17      	ldr	r3, [pc, #92]	; (8000898 <MX_ADC1_Init+0x98>)
 800083a:	2200      	movs	r2, #0
 800083c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800083e:	4b16      	ldr	r3, [pc, #88]	; (8000898 <MX_ADC1_Init+0x98>)
 8000840:	4a17      	ldr	r2, [pc, #92]	; (80008a0 <MX_ADC1_Init+0xa0>)
 8000842:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000844:	4b14      	ldr	r3, [pc, #80]	; (8000898 <MX_ADC1_Init+0x98>)
 8000846:	2200      	movs	r2, #0
 8000848:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800084a:	4b13      	ldr	r3, [pc, #76]	; (8000898 <MX_ADC1_Init+0x98>)
 800084c:	2201      	movs	r2, #1
 800084e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000850:	4b11      	ldr	r3, [pc, #68]	; (8000898 <MX_ADC1_Init+0x98>)
 8000852:	2200      	movs	r2, #0
 8000854:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000858:	4b0f      	ldr	r3, [pc, #60]	; (8000898 <MX_ADC1_Init+0x98>)
 800085a:	2201      	movs	r2, #1
 800085c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800085e:	480e      	ldr	r0, [pc, #56]	; (8000898 <MX_ADC1_Init+0x98>)
 8000860:	f000 fc5e 	bl	8001120 <HAL_ADC_Init>
 8000864:	4603      	mov	r3, r0
 8000866:	2b00      	cmp	r3, #0
 8000868:	d001      	beq.n	800086e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800086a:	f000 f9d1 	bl	8000c10 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800086e:	2303      	movs	r3, #3
 8000870:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000872:	2301      	movs	r3, #1
 8000874:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000876:	2300      	movs	r3, #0
 8000878:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800087a:	463b      	mov	r3, r7
 800087c:	4619      	mov	r1, r3
 800087e:	4806      	ldr	r0, [pc, #24]	; (8000898 <MX_ADC1_Init+0x98>)
 8000880:	f000 fe30 	bl	80014e4 <HAL_ADC_ConfigChannel>
 8000884:	4603      	mov	r3, r0
 8000886:	2b00      	cmp	r3, #0
 8000888:	d001      	beq.n	800088e <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800088a:	f000 f9c1 	bl	8000c10 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800088e:	bf00      	nop
 8000890:	3710      	adds	r7, #16
 8000892:	46bd      	mov	sp, r7
 8000894:	bd80      	pop	{r7, pc}
 8000896:	bf00      	nop
 8000898:	20000794 	.word	0x20000794
 800089c:	40012000 	.word	0x40012000
 80008a0:	0f000001 	.word	0x0f000001

080008a4 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80008a8:	4b18      	ldr	r3, [pc, #96]	; (800090c <MX_SPI3_Init+0x68>)
 80008aa:	4a19      	ldr	r2, [pc, #100]	; (8000910 <MX_SPI3_Init+0x6c>)
 80008ac:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80008ae:	4b17      	ldr	r3, [pc, #92]	; (800090c <MX_SPI3_Init+0x68>)
 80008b0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80008b4:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80008b6:	4b15      	ldr	r3, [pc, #84]	; (800090c <MX_SPI3_Init+0x68>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_16BIT;
 80008bc:	4b13      	ldr	r3, [pc, #76]	; (800090c <MX_SPI3_Init+0x68>)
 80008be:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80008c2:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008c4:	4b11      	ldr	r3, [pc, #68]	; (800090c <MX_SPI3_Init+0x68>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 80008ca:	4b10      	ldr	r3, [pc, #64]	; (800090c <MX_SPI3_Init+0x68>)
 80008cc:	2201      	movs	r2, #1
 80008ce:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80008d0:	4b0e      	ldr	r3, [pc, #56]	; (800090c <MX_SPI3_Init+0x68>)
 80008d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008d6:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80008d8:	4b0c      	ldr	r3, [pc, #48]	; (800090c <MX_SPI3_Init+0x68>)
 80008da:	2218      	movs	r2, #24
 80008dc:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008de:	4b0b      	ldr	r3, [pc, #44]	; (800090c <MX_SPI3_Init+0x68>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80008e4:	4b09      	ldr	r3, [pc, #36]	; (800090c <MX_SPI3_Init+0x68>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008ea:	4b08      	ldr	r3, [pc, #32]	; (800090c <MX_SPI3_Init+0x68>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 80008f0:	4b06      	ldr	r3, [pc, #24]	; (800090c <MX_SPI3_Init+0x68>)
 80008f2:	220a      	movs	r2, #10
 80008f4:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80008f6:	4805      	ldr	r0, [pc, #20]	; (800090c <MX_SPI3_Init+0x68>)
 80008f8:	f003 f986 	bl	8003c08 <HAL_SPI_Init>
 80008fc:	4603      	mov	r3, r0
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d001      	beq.n	8000906 <MX_SPI3_Init+0x62>
  {
    Error_Handler();
 8000902:	f000 f985 	bl	8000c10 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000906:	bf00      	nop
 8000908:	bd80      	pop	{r7, pc}
 800090a:	bf00      	nop
 800090c:	200007dc 	.word	0x200007dc
 8000910:	40003c00 	.word	0x40003c00

08000914 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b096      	sub	sp, #88	; 0x58
 8000918:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800091a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800091e:	2200      	movs	r2, #0
 8000920:	601a      	str	r2, [r3, #0]
 8000922:	605a      	str	r2, [r3, #4]
 8000924:	609a      	str	r2, [r3, #8]
 8000926:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000928:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800092c:	2200      	movs	r2, #0
 800092e:	601a      	str	r2, [r3, #0]
 8000930:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000932:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000936:	2200      	movs	r2, #0
 8000938:	601a      	str	r2, [r3, #0]
 800093a:	605a      	str	r2, [r3, #4]
 800093c:	609a      	str	r2, [r3, #8]
 800093e:	60da      	str	r2, [r3, #12]
 8000940:	611a      	str	r2, [r3, #16]
 8000942:	615a      	str	r2, [r3, #20]
 8000944:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000946:	1d3b      	adds	r3, r7, #4
 8000948:	2220      	movs	r2, #32
 800094a:	2100      	movs	r1, #0
 800094c:	4618      	mov	r0, r3
 800094e:	f008 fb5d 	bl	800900c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000952:	4b4a      	ldr	r3, [pc, #296]	; (8000a7c <MX_TIM1_Init+0x168>)
 8000954:	4a4a      	ldr	r2, [pc, #296]	; (8000a80 <MX_TIM1_Init+0x16c>)
 8000956:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 13;
 8000958:	4b48      	ldr	r3, [pc, #288]	; (8000a7c <MX_TIM1_Init+0x168>)
 800095a:	220d      	movs	r2, #13
 800095c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800095e:	4b47      	ldr	r3, [pc, #284]	; (8000a7c <MX_TIM1_Init+0x168>)
 8000960:	2200      	movs	r2, #0
 8000962:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 102;
 8000964:	4b45      	ldr	r3, [pc, #276]	; (8000a7c <MX_TIM1_Init+0x168>)
 8000966:	2266      	movs	r2, #102	; 0x66
 8000968:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800096a:	4b44      	ldr	r3, [pc, #272]	; (8000a7c <MX_TIM1_Init+0x168>)
 800096c:	2200      	movs	r2, #0
 800096e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000970:	4b42      	ldr	r3, [pc, #264]	; (8000a7c <MX_TIM1_Init+0x168>)
 8000972:	2200      	movs	r2, #0
 8000974:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000976:	4b41      	ldr	r3, [pc, #260]	; (8000a7c <MX_TIM1_Init+0x168>)
 8000978:	2280      	movs	r2, #128	; 0x80
 800097a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800097c:	483f      	ldr	r0, [pc, #252]	; (8000a7c <MX_TIM1_Init+0x168>)
 800097e:	f003 f9cc 	bl	8003d1a <HAL_TIM_Base_Init>
 8000982:	4603      	mov	r3, r0
 8000984:	2b00      	cmp	r3, #0
 8000986:	d001      	beq.n	800098c <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8000988:	f000 f942 	bl	8000c10 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800098c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000990:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000992:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000996:	4619      	mov	r1, r3
 8000998:	4838      	ldr	r0, [pc, #224]	; (8000a7c <MX_TIM1_Init+0x168>)
 800099a:	f003 fc59 	bl	8004250 <HAL_TIM_ConfigClockSource>
 800099e:	4603      	mov	r3, r0
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d001      	beq.n	80009a8 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 80009a4:	f000 f934 	bl	8000c10 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80009a8:	4834      	ldr	r0, [pc, #208]	; (8000a7c <MX_TIM1_Init+0x168>)
 80009aa:	f003 fa6d 	bl	8003e88 <HAL_TIM_PWM_Init>
 80009ae:	4603      	mov	r3, r0
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d001      	beq.n	80009b8 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 80009b4:	f000 f92c 	bl	8000c10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009b8:	2300      	movs	r3, #0
 80009ba:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009bc:	2300      	movs	r3, #0
 80009be:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80009c0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80009c4:	4619      	mov	r1, r3
 80009c6:	482d      	ldr	r0, [pc, #180]	; (8000a7c <MX_TIM1_Init+0x168>)
 80009c8:	f004 f8d4 	bl	8004b74 <HAL_TIMEx_MasterConfigSynchronization>
 80009cc:	4603      	mov	r3, r0
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d001      	beq.n	80009d6 <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 80009d2:	f000 f91d 	bl	8000c10 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80009d6:	2360      	movs	r3, #96	; 0x60
 80009d8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80009da:	2300      	movs	r3, #0
 80009dc:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009de:	2300      	movs	r3, #0
 80009e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80009e2:	2300      	movs	r3, #0
 80009e4:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009e6:	2300      	movs	r3, #0
 80009e8:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80009ea:	2300      	movs	r3, #0
 80009ec:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_SET;
 80009ee:	f44f 7300 	mov.w	r3, #512	; 0x200
 80009f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80009f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009f8:	2200      	movs	r2, #0
 80009fa:	4619      	mov	r1, r3
 80009fc:	481f      	ldr	r0, [pc, #124]	; (8000a7c <MX_TIM1_Init+0x168>)
 80009fe:	f003 fb65 	bl	80040cc <HAL_TIM_PWM_ConfigChannel>
 8000a02:	4603      	mov	r3, r0
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d001      	beq.n	8000a0c <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8000a08:	f000 f902 	bl	8000c10 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000a0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a10:	2204      	movs	r2, #4
 8000a12:	4619      	mov	r1, r3
 8000a14:	4819      	ldr	r0, [pc, #100]	; (8000a7c <MX_TIM1_Init+0x168>)
 8000a16:	f003 fb59 	bl	80040cc <HAL_TIM_PWM_ConfigChannel>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d001      	beq.n	8000a24 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8000a20:	f000 f8f6 	bl	8000c10 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000a24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a28:	2208      	movs	r2, #8
 8000a2a:	4619      	mov	r1, r3
 8000a2c:	4813      	ldr	r0, [pc, #76]	; (8000a7c <MX_TIM1_Init+0x168>)
 8000a2e:	f003 fb4d 	bl	80040cc <HAL_TIM_PWM_ConfigChannel>
 8000a32:	4603      	mov	r3, r0
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d001      	beq.n	8000a3c <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8000a38:	f000 f8ea 	bl	8000c10 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000a40:	2300      	movs	r3, #0
 8000a42:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000a44:	2300      	movs	r3, #0
 8000a46:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 20;
 8000a48:	2314      	movs	r3, #20
 8000a4a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000a50:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a54:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000a56:	2300      	movs	r3, #0
 8000a58:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000a5a:	1d3b      	adds	r3, r7, #4
 8000a5c:	4619      	mov	r1, r3
 8000a5e:	4807      	ldr	r0, [pc, #28]	; (8000a7c <MX_TIM1_Init+0x168>)
 8000a60:	f004 f904 	bl	8004c6c <HAL_TIMEx_ConfigBreakDeadTime>
 8000a64:	4603      	mov	r3, r0
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d001      	beq.n	8000a6e <MX_TIM1_Init+0x15a>
  {
    Error_Handler();
 8000a6a:	f000 f8d1 	bl	8000c10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000a6e:	4803      	ldr	r0, [pc, #12]	; (8000a7c <MX_TIM1_Init+0x168>)
 8000a70:	f000 f9be 	bl	8000df0 <HAL_TIM_MspPostInit>

}
 8000a74:	bf00      	nop
 8000a76:	3758      	adds	r7, #88	; 0x58
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	bd80      	pop	{r7, pc}
 8000a7c:	20000834 	.word	0x20000834
 8000a80:	40010000 	.word	0x40010000

08000a84 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b086      	sub	sp, #24
 8000a88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a8a:	f107 0308 	add.w	r3, r7, #8
 8000a8e:	2200      	movs	r2, #0
 8000a90:	601a      	str	r2, [r3, #0]
 8000a92:	605a      	str	r2, [r3, #4]
 8000a94:	609a      	str	r2, [r3, #8]
 8000a96:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a98:	463b      	mov	r3, r7
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	601a      	str	r2, [r3, #0]
 8000a9e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000aa0:	4b1d      	ldr	r3, [pc, #116]	; (8000b18 <MX_TIM2_Init+0x94>)
 8000aa2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000aa6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 14;
 8000aa8:	4b1b      	ldr	r3, [pc, #108]	; (8000b18 <MX_TIM2_Init+0x94>)
 8000aaa:	220e      	movs	r2, #14
 8000aac:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000aae:	4b1a      	ldr	r3, [pc, #104]	; (8000b18 <MX_TIM2_Init+0x94>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2000;
 8000ab4:	4b18      	ldr	r3, [pc, #96]	; (8000b18 <MX_TIM2_Init+0x94>)
 8000ab6:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000aba:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000abc:	4b16      	ldr	r3, [pc, #88]	; (8000b18 <MX_TIM2_Init+0x94>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000ac2:	4b15      	ldr	r3, [pc, #84]	; (8000b18 <MX_TIM2_Init+0x94>)
 8000ac4:	2280      	movs	r2, #128	; 0x80
 8000ac6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000ac8:	4813      	ldr	r0, [pc, #76]	; (8000b18 <MX_TIM2_Init+0x94>)
 8000aca:	f003 f926 	bl	8003d1a <HAL_TIM_Base_Init>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d001      	beq.n	8000ad8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000ad4:	f000 f89c 	bl	8000c10 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ad8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000adc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000ade:	f107 0308 	add.w	r3, r7, #8
 8000ae2:	4619      	mov	r1, r3
 8000ae4:	480c      	ldr	r0, [pc, #48]	; (8000b18 <MX_TIM2_Init+0x94>)
 8000ae6:	f003 fbb3 	bl	8004250 <HAL_TIM_ConfigClockSource>
 8000aea:	4603      	mov	r3, r0
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d001      	beq.n	8000af4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000af0:	f000 f88e 	bl	8000c10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000af4:	2300      	movs	r3, #0
 8000af6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000af8:	2300      	movs	r3, #0
 8000afa:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000afc:	463b      	mov	r3, r7
 8000afe:	4619      	mov	r1, r3
 8000b00:	4805      	ldr	r0, [pc, #20]	; (8000b18 <MX_TIM2_Init+0x94>)
 8000b02:	f004 f837 	bl	8004b74 <HAL_TIMEx_MasterConfigSynchronization>
 8000b06:	4603      	mov	r3, r0
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d001      	beq.n	8000b10 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000b0c:	f000 f880 	bl	8000c10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000b10:	bf00      	nop
 8000b12:	3718      	adds	r7, #24
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bd80      	pop	{r7, pc}
 8000b18:	2000087c 	.word	0x2000087c

08000b1c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b08a      	sub	sp, #40	; 0x28
 8000b20:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b22:	f107 0314 	add.w	r3, r7, #20
 8000b26:	2200      	movs	r2, #0
 8000b28:	601a      	str	r2, [r3, #0]
 8000b2a:	605a      	str	r2, [r3, #4]
 8000b2c:	609a      	str	r2, [r3, #8]
 8000b2e:	60da      	str	r2, [r3, #12]
 8000b30:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b32:	2300      	movs	r3, #0
 8000b34:	613b      	str	r3, [r7, #16]
 8000b36:	4b33      	ldr	r3, [pc, #204]	; (8000c04 <MX_GPIO_Init+0xe8>)
 8000b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3a:	4a32      	ldr	r2, [pc, #200]	; (8000c04 <MX_GPIO_Init+0xe8>)
 8000b3c:	f043 0304 	orr.w	r3, r3, #4
 8000b40:	6313      	str	r3, [r2, #48]	; 0x30
 8000b42:	4b30      	ldr	r3, [pc, #192]	; (8000c04 <MX_GPIO_Init+0xe8>)
 8000b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b46:	f003 0304 	and.w	r3, r3, #4
 8000b4a:	613b      	str	r3, [r7, #16]
 8000b4c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b4e:	2300      	movs	r3, #0
 8000b50:	60fb      	str	r3, [r7, #12]
 8000b52:	4b2c      	ldr	r3, [pc, #176]	; (8000c04 <MX_GPIO_Init+0xe8>)
 8000b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b56:	4a2b      	ldr	r2, [pc, #172]	; (8000c04 <MX_GPIO_Init+0xe8>)
 8000b58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b5e:	4b29      	ldr	r3, [pc, #164]	; (8000c04 <MX_GPIO_Init+0xe8>)
 8000b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b66:	60fb      	str	r3, [r7, #12]
 8000b68:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	60bb      	str	r3, [r7, #8]
 8000b6e:	4b25      	ldr	r3, [pc, #148]	; (8000c04 <MX_GPIO_Init+0xe8>)
 8000b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b72:	4a24      	ldr	r2, [pc, #144]	; (8000c04 <MX_GPIO_Init+0xe8>)
 8000b74:	f043 0301 	orr.w	r3, r3, #1
 8000b78:	6313      	str	r3, [r2, #48]	; 0x30
 8000b7a:	4b22      	ldr	r3, [pc, #136]	; (8000c04 <MX_GPIO_Init+0xe8>)
 8000b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7e:	f003 0301 	and.w	r3, r3, #1
 8000b82:	60bb      	str	r3, [r7, #8]
 8000b84:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b86:	2300      	movs	r3, #0
 8000b88:	607b      	str	r3, [r7, #4]
 8000b8a:	4b1e      	ldr	r3, [pc, #120]	; (8000c04 <MX_GPIO_Init+0xe8>)
 8000b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8e:	4a1d      	ldr	r2, [pc, #116]	; (8000c04 <MX_GPIO_Init+0xe8>)
 8000b90:	f043 0302 	orr.w	r3, r3, #2
 8000b94:	6313      	str	r3, [r2, #48]	; 0x30
 8000b96:	4b1b      	ldr	r3, [pc, #108]	; (8000c04 <MX_GPIO_Init+0xe8>)
 8000b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9a:	f003 0302 	and.w	r3, r3, #2
 8000b9e:	607b      	str	r3, [r7, #4]
 8000ba0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GREEN_Pin|RED_Pin, GPIO_PIN_RESET);
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	2103      	movs	r1, #3
 8000ba6:	4818      	ldr	r0, [pc, #96]	; (8000c08 <MX_GPIO_Init+0xec>)
 8000ba8:	f001 f968 	bl	8001e7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 8000bac:	2201      	movs	r2, #1
 8000bae:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000bb2:	4816      	ldr	r0, [pc, #88]	; (8000c0c <MX_GPIO_Init+0xf0>)
 8000bb4:	f001 f962 	bl	8001e7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, GPIO_PIN_SET);
 8000bb8:	2201      	movs	r2, #1
 8000bba:	2120      	movs	r1, #32
 8000bbc:	4812      	ldr	r0, [pc, #72]	; (8000c08 <MX_GPIO_Init+0xec>)
 8000bbe:	f001 f95d 	bl	8001e7c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : GREEN_Pin RED_Pin EN_Pin */
  GPIO_InitStruct.Pin = GREEN_Pin|RED_Pin|EN_Pin;
 8000bc2:	2323      	movs	r3, #35	; 0x23
 8000bc4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bc6:	2301      	movs	r3, #1
 8000bc8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bd2:	f107 0314 	add.w	r3, r7, #20
 8000bd6:	4619      	mov	r1, r3
 8000bd8:	480b      	ldr	r0, [pc, #44]	; (8000c08 <MX_GPIO_Init+0xec>)
 8000bda:	f000 ffb3 	bl	8001b44 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_Pin */
  GPIO_InitStruct.Pin = CS_Pin;
 8000bde:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000be2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000be4:	2301      	movs	r3, #1
 8000be6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be8:	2300      	movs	r3, #0
 8000bea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bec:	2300      	movs	r3, #0
 8000bee:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CS_GPIO_Port, &GPIO_InitStruct);
 8000bf0:	f107 0314 	add.w	r3, r7, #20
 8000bf4:	4619      	mov	r1, r3
 8000bf6:	4805      	ldr	r0, [pc, #20]	; (8000c0c <MX_GPIO_Init+0xf0>)
 8000bf8:	f000 ffa4 	bl	8001b44 <HAL_GPIO_Init>

}
 8000bfc:	bf00      	nop
 8000bfe:	3728      	adds	r7, #40	; 0x28
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bd80      	pop	{r7, pc}
 8000c04:	40023800 	.word	0x40023800
 8000c08:	40020400 	.word	0x40020400
 8000c0c:	40020800 	.word	0x40020800

08000c10 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c10:	b480      	push	{r7}
 8000c12:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c14:	b672      	cpsid	i
}
 8000c16:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c18:	e7fe      	b.n	8000c18 <Error_Handler+0x8>
	...

08000c1c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	b083      	sub	sp, #12
 8000c20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c22:	2300      	movs	r3, #0
 8000c24:	607b      	str	r3, [r7, #4]
 8000c26:	4b10      	ldr	r3, [pc, #64]	; (8000c68 <HAL_MspInit+0x4c>)
 8000c28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c2a:	4a0f      	ldr	r2, [pc, #60]	; (8000c68 <HAL_MspInit+0x4c>)
 8000c2c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c30:	6453      	str	r3, [r2, #68]	; 0x44
 8000c32:	4b0d      	ldr	r3, [pc, #52]	; (8000c68 <HAL_MspInit+0x4c>)
 8000c34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c3a:	607b      	str	r3, [r7, #4]
 8000c3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c3e:	2300      	movs	r3, #0
 8000c40:	603b      	str	r3, [r7, #0]
 8000c42:	4b09      	ldr	r3, [pc, #36]	; (8000c68 <HAL_MspInit+0x4c>)
 8000c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c46:	4a08      	ldr	r2, [pc, #32]	; (8000c68 <HAL_MspInit+0x4c>)
 8000c48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c4c:	6413      	str	r3, [r2, #64]	; 0x40
 8000c4e:	4b06      	ldr	r3, [pc, #24]	; (8000c68 <HAL_MspInit+0x4c>)
 8000c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c56:	603b      	str	r3, [r7, #0]
 8000c58:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c5a:	bf00      	nop
 8000c5c:	370c      	adds	r7, #12
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop
 8000c68:	40023800 	.word	0x40023800

08000c6c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b08a      	sub	sp, #40	; 0x28
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c74:	f107 0314 	add.w	r3, r7, #20
 8000c78:	2200      	movs	r2, #0
 8000c7a:	601a      	str	r2, [r3, #0]
 8000c7c:	605a      	str	r2, [r3, #4]
 8000c7e:	609a      	str	r2, [r3, #8]
 8000c80:	60da      	str	r2, [r3, #12]
 8000c82:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	4a17      	ldr	r2, [pc, #92]	; (8000ce8 <HAL_ADC_MspInit+0x7c>)
 8000c8a:	4293      	cmp	r3, r2
 8000c8c:	d127      	bne.n	8000cde <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000c8e:	2300      	movs	r3, #0
 8000c90:	613b      	str	r3, [r7, #16]
 8000c92:	4b16      	ldr	r3, [pc, #88]	; (8000cec <HAL_ADC_MspInit+0x80>)
 8000c94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c96:	4a15      	ldr	r2, [pc, #84]	; (8000cec <HAL_ADC_MspInit+0x80>)
 8000c98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c9c:	6453      	str	r3, [r2, #68]	; 0x44
 8000c9e:	4b13      	ldr	r3, [pc, #76]	; (8000cec <HAL_ADC_MspInit+0x80>)
 8000ca0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ca2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ca6:	613b      	str	r3, [r7, #16]
 8000ca8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000caa:	2300      	movs	r3, #0
 8000cac:	60fb      	str	r3, [r7, #12]
 8000cae:	4b0f      	ldr	r3, [pc, #60]	; (8000cec <HAL_ADC_MspInit+0x80>)
 8000cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb2:	4a0e      	ldr	r2, [pc, #56]	; (8000cec <HAL_ADC_MspInit+0x80>)
 8000cb4:	f043 0301 	orr.w	r3, r3, #1
 8000cb8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cba:	4b0c      	ldr	r3, [pc, #48]	; (8000cec <HAL_ADC_MspInit+0x80>)
 8000cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cbe:	f003 0301 	and.w	r3, r3, #1
 8000cc2:	60fb      	str	r3, [r7, #12]
 8000cc4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = Temp_Pin;
 8000cc6:	2308      	movs	r3, #8
 8000cc8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000cca:	2303      	movs	r3, #3
 8000ccc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Temp_GPIO_Port, &GPIO_InitStruct);
 8000cd2:	f107 0314 	add.w	r3, r7, #20
 8000cd6:	4619      	mov	r1, r3
 8000cd8:	4805      	ldr	r0, [pc, #20]	; (8000cf0 <HAL_ADC_MspInit+0x84>)
 8000cda:	f000 ff33 	bl	8001b44 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000cde:	bf00      	nop
 8000ce0:	3728      	adds	r7, #40	; 0x28
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	40012000 	.word	0x40012000
 8000cec:	40023800 	.word	0x40023800
 8000cf0:	40020000 	.word	0x40020000

08000cf4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b08a      	sub	sp, #40	; 0x28
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cfc:	f107 0314 	add.w	r3, r7, #20
 8000d00:	2200      	movs	r2, #0
 8000d02:	601a      	str	r2, [r3, #0]
 8000d04:	605a      	str	r2, [r3, #4]
 8000d06:	609a      	str	r2, [r3, #8]
 8000d08:	60da      	str	r2, [r3, #12]
 8000d0a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	4a19      	ldr	r2, [pc, #100]	; (8000d78 <HAL_SPI_MspInit+0x84>)
 8000d12:	4293      	cmp	r3, r2
 8000d14:	d12c      	bne.n	8000d70 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000d16:	2300      	movs	r3, #0
 8000d18:	613b      	str	r3, [r7, #16]
 8000d1a:	4b18      	ldr	r3, [pc, #96]	; (8000d7c <HAL_SPI_MspInit+0x88>)
 8000d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d1e:	4a17      	ldr	r2, [pc, #92]	; (8000d7c <HAL_SPI_MspInit+0x88>)
 8000d20:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000d24:	6413      	str	r3, [r2, #64]	; 0x40
 8000d26:	4b15      	ldr	r3, [pc, #84]	; (8000d7c <HAL_SPI_MspInit+0x88>)
 8000d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d2a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000d2e:	613b      	str	r3, [r7, #16]
 8000d30:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d32:	2300      	movs	r3, #0
 8000d34:	60fb      	str	r3, [r7, #12]
 8000d36:	4b11      	ldr	r3, [pc, #68]	; (8000d7c <HAL_SPI_MspInit+0x88>)
 8000d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d3a:	4a10      	ldr	r2, [pc, #64]	; (8000d7c <HAL_SPI_MspInit+0x88>)
 8000d3c:	f043 0304 	orr.w	r3, r3, #4
 8000d40:	6313      	str	r3, [r2, #48]	; 0x30
 8000d42:	4b0e      	ldr	r3, [pc, #56]	; (8000d7c <HAL_SPI_MspInit+0x88>)
 8000d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d46:	f003 0304 	and.w	r3, r3, #4
 8000d4a:	60fb      	str	r3, [r7, #12]
 8000d4c:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8000d4e:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000d52:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d54:	2302      	movs	r3, #2
 8000d56:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d5c:	2303      	movs	r3, #3
 8000d5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000d60:	2306      	movs	r3, #6
 8000d62:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d64:	f107 0314 	add.w	r3, r7, #20
 8000d68:	4619      	mov	r1, r3
 8000d6a:	4805      	ldr	r0, [pc, #20]	; (8000d80 <HAL_SPI_MspInit+0x8c>)
 8000d6c:	f000 feea 	bl	8001b44 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000d70:	bf00      	nop
 8000d72:	3728      	adds	r7, #40	; 0x28
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bd80      	pop	{r7, pc}
 8000d78:	40003c00 	.word	0x40003c00
 8000d7c:	40023800 	.word	0x40023800
 8000d80:	40020800 	.word	0x40020800

08000d84 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d84:	b480      	push	{r7}
 8000d86:	b085      	sub	sp, #20
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	4a15      	ldr	r2, [pc, #84]	; (8000de8 <HAL_TIM_Base_MspInit+0x64>)
 8000d92:	4293      	cmp	r3, r2
 8000d94:	d10e      	bne.n	8000db4 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000d96:	2300      	movs	r3, #0
 8000d98:	60fb      	str	r3, [r7, #12]
 8000d9a:	4b14      	ldr	r3, [pc, #80]	; (8000dec <HAL_TIM_Base_MspInit+0x68>)
 8000d9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d9e:	4a13      	ldr	r2, [pc, #76]	; (8000dec <HAL_TIM_Base_MspInit+0x68>)
 8000da0:	f043 0301 	orr.w	r3, r3, #1
 8000da4:	6453      	str	r3, [r2, #68]	; 0x44
 8000da6:	4b11      	ldr	r3, [pc, #68]	; (8000dec <HAL_TIM_Base_MspInit+0x68>)
 8000da8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000daa:	f003 0301 	and.w	r3, r3, #1
 8000dae:	60fb      	str	r3, [r7, #12]
 8000db0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000db2:	e012      	b.n	8000dda <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM2)
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000dbc:	d10d      	bne.n	8000dda <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	60bb      	str	r3, [r7, #8]
 8000dc2:	4b0a      	ldr	r3, [pc, #40]	; (8000dec <HAL_TIM_Base_MspInit+0x68>)
 8000dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dc6:	4a09      	ldr	r2, [pc, #36]	; (8000dec <HAL_TIM_Base_MspInit+0x68>)
 8000dc8:	f043 0301 	orr.w	r3, r3, #1
 8000dcc:	6413      	str	r3, [r2, #64]	; 0x40
 8000dce:	4b07      	ldr	r3, [pc, #28]	; (8000dec <HAL_TIM_Base_MspInit+0x68>)
 8000dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dd2:	f003 0301 	and.w	r3, r3, #1
 8000dd6:	60bb      	str	r3, [r7, #8]
 8000dd8:	68bb      	ldr	r3, [r7, #8]
}
 8000dda:	bf00      	nop
 8000ddc:	3714      	adds	r7, #20
 8000dde:	46bd      	mov	sp, r7
 8000de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de4:	4770      	bx	lr
 8000de6:	bf00      	nop
 8000de8:	40010000 	.word	0x40010000
 8000dec:	40023800 	.word	0x40023800

08000df0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b08a      	sub	sp, #40	; 0x28
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000df8:	f107 0314 	add.w	r3, r7, #20
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	601a      	str	r2, [r3, #0]
 8000e00:	605a      	str	r2, [r3, #4]
 8000e02:	609a      	str	r2, [r3, #8]
 8000e04:	60da      	str	r2, [r3, #12]
 8000e06:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	4a22      	ldr	r2, [pc, #136]	; (8000e98 <HAL_TIM_MspPostInit+0xa8>)
 8000e0e:	4293      	cmp	r3, r2
 8000e10:	d13d      	bne.n	8000e8e <HAL_TIM_MspPostInit+0x9e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e12:	2300      	movs	r3, #0
 8000e14:	613b      	str	r3, [r7, #16]
 8000e16:	4b21      	ldr	r3, [pc, #132]	; (8000e9c <HAL_TIM_MspPostInit+0xac>)
 8000e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e1a:	4a20      	ldr	r2, [pc, #128]	; (8000e9c <HAL_TIM_MspPostInit+0xac>)
 8000e1c:	f043 0302 	orr.w	r3, r3, #2
 8000e20:	6313      	str	r3, [r2, #48]	; 0x30
 8000e22:	4b1e      	ldr	r3, [pc, #120]	; (8000e9c <HAL_TIM_MspPostInit+0xac>)
 8000e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e26:	f003 0302 	and.w	r3, r3, #2
 8000e2a:	613b      	str	r3, [r7, #16]
 8000e2c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e2e:	2300      	movs	r3, #0
 8000e30:	60fb      	str	r3, [r7, #12]
 8000e32:	4b1a      	ldr	r3, [pc, #104]	; (8000e9c <HAL_TIM_MspPostInit+0xac>)
 8000e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e36:	4a19      	ldr	r2, [pc, #100]	; (8000e9c <HAL_TIM_MspPostInit+0xac>)
 8000e38:	f043 0301 	orr.w	r3, r3, #1
 8000e3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e3e:	4b17      	ldr	r3, [pc, #92]	; (8000e9c <HAL_TIM_MspPostInit+0xac>)
 8000e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e42:	f003 0301 	and.w	r3, r3, #1
 8000e46:	60fb      	str	r3, [r7, #12]
 8000e48:	68fb      	ldr	r3, [r7, #12]
    PB15     ------> TIM1_CH3N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000e4a:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000e4e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e50:	2302      	movs	r3, #2
 8000e52:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e54:	2300      	movs	r3, #0
 8000e56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000e5c:	2301      	movs	r3, #1
 8000e5e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e60:	f107 0314 	add.w	r3, r7, #20
 8000e64:	4619      	mov	r1, r3
 8000e66:	480e      	ldr	r0, [pc, #56]	; (8000ea0 <HAL_TIM_MspPostInit+0xb0>)
 8000e68:	f000 fe6c 	bl	8001b44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8000e6c:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8000e70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e72:	2302      	movs	r3, #2
 8000e74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e76:	2300      	movs	r3, #0
 8000e78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000e7e:	2301      	movs	r3, #1
 8000e80:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e82:	f107 0314 	add.w	r3, r7, #20
 8000e86:	4619      	mov	r1, r3
 8000e88:	4806      	ldr	r0, [pc, #24]	; (8000ea4 <HAL_TIM_MspPostInit+0xb4>)
 8000e8a:	f000 fe5b 	bl	8001b44 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000e8e:	bf00      	nop
 8000e90:	3728      	adds	r7, #40	; 0x28
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	bf00      	nop
 8000e98:	40010000 	.word	0x40010000
 8000e9c:	40023800 	.word	0x40023800
 8000ea0:	40020400 	.word	0x40020400
 8000ea4:	40020000 	.word	0x40020000

08000ea8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000eac:	e7fe      	b.n	8000eac <NMI_Handler+0x4>

08000eae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000eae:	b480      	push	{r7}
 8000eb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000eb2:	e7fe      	b.n	8000eb2 <HardFault_Handler+0x4>

08000eb4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000eb8:	e7fe      	b.n	8000eb8 <MemManage_Handler+0x4>

08000eba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000eba:	b480      	push	{r7}
 8000ebc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ebe:	e7fe      	b.n	8000ebe <BusFault_Handler+0x4>

08000ec0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ec4:	e7fe      	b.n	8000ec4 <UsageFault_Handler+0x4>

08000ec6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ec6:	b480      	push	{r7}
 8000ec8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000eca:	bf00      	nop
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed2:	4770      	bx	lr

08000ed4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ed8:	bf00      	nop
 8000eda:	46bd      	mov	sp, r7
 8000edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee0:	4770      	bx	lr

08000ee2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ee2:	b480      	push	{r7}
 8000ee4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ee6:	bf00      	nop
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eee:	4770      	bx	lr

08000ef0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ef4:	f000 f8d0 	bl	8001098 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ef8:	bf00      	nop
 8000efa:	bd80      	pop	{r7, pc}

08000efc <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000f00:	4802      	ldr	r0, [pc, #8]	; (8000f0c <OTG_FS_IRQHandler+0x10>)
 8000f02:	f001 f924 	bl	800214e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000f06:	bf00      	nop
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	bf00      	nop
 8000f0c:	20001dac 	.word	0x20001dac

08000f10 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b086      	sub	sp, #24
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f18:	4a14      	ldr	r2, [pc, #80]	; (8000f6c <_sbrk+0x5c>)
 8000f1a:	4b15      	ldr	r3, [pc, #84]	; (8000f70 <_sbrk+0x60>)
 8000f1c:	1ad3      	subs	r3, r2, r3
 8000f1e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f20:	697b      	ldr	r3, [r7, #20]
 8000f22:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f24:	4b13      	ldr	r3, [pc, #76]	; (8000f74 <_sbrk+0x64>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d102      	bne.n	8000f32 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f2c:	4b11      	ldr	r3, [pc, #68]	; (8000f74 <_sbrk+0x64>)
 8000f2e:	4a12      	ldr	r2, [pc, #72]	; (8000f78 <_sbrk+0x68>)
 8000f30:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f32:	4b10      	ldr	r3, [pc, #64]	; (8000f74 <_sbrk+0x64>)
 8000f34:	681a      	ldr	r2, [r3, #0]
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	4413      	add	r3, r2
 8000f3a:	693a      	ldr	r2, [r7, #16]
 8000f3c:	429a      	cmp	r2, r3
 8000f3e:	d207      	bcs.n	8000f50 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f40:	f008 f83a 	bl	8008fb8 <__errno>
 8000f44:	4603      	mov	r3, r0
 8000f46:	220c      	movs	r2, #12
 8000f48:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f4a:	f04f 33ff 	mov.w	r3, #4294967295
 8000f4e:	e009      	b.n	8000f64 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f50:	4b08      	ldr	r3, [pc, #32]	; (8000f74 <_sbrk+0x64>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f56:	4b07      	ldr	r3, [pc, #28]	; (8000f74 <_sbrk+0x64>)
 8000f58:	681a      	ldr	r2, [r3, #0]
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	4413      	add	r3, r2
 8000f5e:	4a05      	ldr	r2, [pc, #20]	; (8000f74 <_sbrk+0x64>)
 8000f60:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f62:	68fb      	ldr	r3, [r7, #12]
}
 8000f64:	4618      	mov	r0, r3
 8000f66:	3718      	adds	r7, #24
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd80      	pop	{r7, pc}
 8000f6c:	20020000 	.word	0x20020000
 8000f70:	00000400 	.word	0x00000400
 8000f74:	200008c4 	.word	0x200008c4
 8000f78:	200024e8 	.word	0x200024e8

08000f7c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f80:	4b06      	ldr	r3, [pc, #24]	; (8000f9c <SystemInit+0x20>)
 8000f82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f86:	4a05      	ldr	r2, [pc, #20]	; (8000f9c <SystemInit+0x20>)
 8000f88:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f8c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f90:	bf00      	nop
 8000f92:	46bd      	mov	sp, r7
 8000f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop
 8000f9c:	e000ed00 	.word	0xe000ed00

08000fa0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000fa0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000fd8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000fa4:	480d      	ldr	r0, [pc, #52]	; (8000fdc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000fa6:	490e      	ldr	r1, [pc, #56]	; (8000fe0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000fa8:	4a0e      	ldr	r2, [pc, #56]	; (8000fe4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000faa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fac:	e002      	b.n	8000fb4 <LoopCopyDataInit>

08000fae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fb0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fb2:	3304      	adds	r3, #4

08000fb4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fb4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fb6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fb8:	d3f9      	bcc.n	8000fae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fba:	4a0b      	ldr	r2, [pc, #44]	; (8000fe8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000fbc:	4c0b      	ldr	r4, [pc, #44]	; (8000fec <LoopFillZerobss+0x26>)
  movs r3, #0
 8000fbe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fc0:	e001      	b.n	8000fc6 <LoopFillZerobss>

08000fc2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fc2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fc4:	3204      	adds	r2, #4

08000fc6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fc6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fc8:	d3fb      	bcc.n	8000fc2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000fca:	f7ff ffd7 	bl	8000f7c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000fce:	f007 fff9 	bl	8008fc4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000fd2:	f7ff fb33 	bl	800063c <main>
  bx  lr    
 8000fd6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000fd8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000fdc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fe0:	20000760 	.word	0x20000760
  ldr r2, =_sidata
 8000fe4:	080099bc 	.word	0x080099bc
  ldr r2, =_sbss
 8000fe8:	20000760 	.word	0x20000760
  ldr r4, =_ebss
 8000fec:	200024e8 	.word	0x200024e8

08000ff0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ff0:	e7fe      	b.n	8000ff0 <ADC_IRQHandler>
	...

08000ff4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ff8:	4b0e      	ldr	r3, [pc, #56]	; (8001034 <HAL_Init+0x40>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	4a0d      	ldr	r2, [pc, #52]	; (8001034 <HAL_Init+0x40>)
 8000ffe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001002:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001004:	4b0b      	ldr	r3, [pc, #44]	; (8001034 <HAL_Init+0x40>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	4a0a      	ldr	r2, [pc, #40]	; (8001034 <HAL_Init+0x40>)
 800100a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800100e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001010:	4b08      	ldr	r3, [pc, #32]	; (8001034 <HAL_Init+0x40>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	4a07      	ldr	r2, [pc, #28]	; (8001034 <HAL_Init+0x40>)
 8001016:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800101a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800101c:	2003      	movs	r0, #3
 800101e:	f000 fd4f 	bl	8001ac0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001022:	200f      	movs	r0, #15
 8001024:	f000 f808 	bl	8001038 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001028:	f7ff fdf8 	bl	8000c1c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800102c:	2300      	movs	r3, #0
}
 800102e:	4618      	mov	r0, r3
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	40023c00 	.word	0x40023c00

08001038 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b082      	sub	sp, #8
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001040:	4b12      	ldr	r3, [pc, #72]	; (800108c <HAL_InitTick+0x54>)
 8001042:	681a      	ldr	r2, [r3, #0]
 8001044:	4b12      	ldr	r3, [pc, #72]	; (8001090 <HAL_InitTick+0x58>)
 8001046:	781b      	ldrb	r3, [r3, #0]
 8001048:	4619      	mov	r1, r3
 800104a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800104e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001052:	fbb2 f3f3 	udiv	r3, r2, r3
 8001056:	4618      	mov	r0, r3
 8001058:	f000 fd67 	bl	8001b2a <HAL_SYSTICK_Config>
 800105c:	4603      	mov	r3, r0
 800105e:	2b00      	cmp	r3, #0
 8001060:	d001      	beq.n	8001066 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001062:	2301      	movs	r3, #1
 8001064:	e00e      	b.n	8001084 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	2b0f      	cmp	r3, #15
 800106a:	d80a      	bhi.n	8001082 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800106c:	2200      	movs	r2, #0
 800106e:	6879      	ldr	r1, [r7, #4]
 8001070:	f04f 30ff 	mov.w	r0, #4294967295
 8001074:	f000 fd2f 	bl	8001ad6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001078:	4a06      	ldr	r2, [pc, #24]	; (8001094 <HAL_InitTick+0x5c>)
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800107e:	2300      	movs	r3, #0
 8001080:	e000      	b.n	8001084 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001082:	2301      	movs	r3, #1
}
 8001084:	4618      	mov	r0, r3
 8001086:	3708      	adds	r7, #8
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}
 800108c:	20000600 	.word	0x20000600
 8001090:	20000608 	.word	0x20000608
 8001094:	20000604 	.word	0x20000604

08001098 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001098:	b480      	push	{r7}
 800109a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800109c:	4b06      	ldr	r3, [pc, #24]	; (80010b8 <HAL_IncTick+0x20>)
 800109e:	781b      	ldrb	r3, [r3, #0]
 80010a0:	461a      	mov	r2, r3
 80010a2:	4b06      	ldr	r3, [pc, #24]	; (80010bc <HAL_IncTick+0x24>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	4413      	add	r3, r2
 80010a8:	4a04      	ldr	r2, [pc, #16]	; (80010bc <HAL_IncTick+0x24>)
 80010aa:	6013      	str	r3, [r2, #0]
}
 80010ac:	bf00      	nop
 80010ae:	46bd      	mov	sp, r7
 80010b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b4:	4770      	bx	lr
 80010b6:	bf00      	nop
 80010b8:	20000608 	.word	0x20000608
 80010bc:	200008c8 	.word	0x200008c8

080010c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010c0:	b480      	push	{r7}
 80010c2:	af00      	add	r7, sp, #0
  return uwTick;
 80010c4:	4b03      	ldr	r3, [pc, #12]	; (80010d4 <HAL_GetTick+0x14>)
 80010c6:	681b      	ldr	r3, [r3, #0]
}
 80010c8:	4618      	mov	r0, r3
 80010ca:	46bd      	mov	sp, r7
 80010cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d0:	4770      	bx	lr
 80010d2:	bf00      	nop
 80010d4:	200008c8 	.word	0x200008c8

080010d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b084      	sub	sp, #16
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010e0:	f7ff ffee 	bl	80010c0 <HAL_GetTick>
 80010e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010f0:	d005      	beq.n	80010fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010f2:	4b0a      	ldr	r3, [pc, #40]	; (800111c <HAL_Delay+0x44>)
 80010f4:	781b      	ldrb	r3, [r3, #0]
 80010f6:	461a      	mov	r2, r3
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	4413      	add	r3, r2
 80010fc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80010fe:	bf00      	nop
 8001100:	f7ff ffde 	bl	80010c0 <HAL_GetTick>
 8001104:	4602      	mov	r2, r0
 8001106:	68bb      	ldr	r3, [r7, #8]
 8001108:	1ad3      	subs	r3, r2, r3
 800110a:	68fa      	ldr	r2, [r7, #12]
 800110c:	429a      	cmp	r2, r3
 800110e:	d8f7      	bhi.n	8001100 <HAL_Delay+0x28>
  {
  }
}
 8001110:	bf00      	nop
 8001112:	bf00      	nop
 8001114:	3710      	adds	r7, #16
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	20000608 	.word	0x20000608

08001120 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b084      	sub	sp, #16
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001128:	2300      	movs	r3, #0
 800112a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	2b00      	cmp	r3, #0
 8001130:	d101      	bne.n	8001136 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001132:	2301      	movs	r3, #1
 8001134:	e033      	b.n	800119e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800113a:	2b00      	cmp	r3, #0
 800113c:	d109      	bne.n	8001152 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800113e:	6878      	ldr	r0, [r7, #4]
 8001140:	f7ff fd94 	bl	8000c6c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	2200      	movs	r2, #0
 8001148:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	2200      	movs	r2, #0
 800114e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001156:	f003 0310 	and.w	r3, r3, #16
 800115a:	2b00      	cmp	r3, #0
 800115c:	d118      	bne.n	8001190 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001162:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001166:	f023 0302 	bic.w	r3, r3, #2
 800116a:	f043 0202 	orr.w	r2, r3, #2
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001172:	6878      	ldr	r0, [r7, #4]
 8001174:	f000 fad8 	bl	8001728 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	2200      	movs	r2, #0
 800117c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001182:	f023 0303 	bic.w	r3, r3, #3
 8001186:	f043 0201 	orr.w	r2, r3, #1
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	641a      	str	r2, [r3, #64]	; 0x40
 800118e:	e001      	b.n	8001194 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001190:	2301      	movs	r3, #1
 8001192:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	2200      	movs	r2, #0
 8001198:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800119c:	7bfb      	ldrb	r3, [r7, #15]
}
 800119e:	4618      	mov	r0, r3
 80011a0:	3710      	adds	r7, #16
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}
	...

080011a8 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80011a8:	b480      	push	{r7}
 80011aa:	b085      	sub	sp, #20
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80011b0:	2300      	movs	r3, #0
 80011b2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80011ba:	2b01      	cmp	r3, #1
 80011bc:	d101      	bne.n	80011c2 <HAL_ADC_Start+0x1a>
 80011be:	2302      	movs	r3, #2
 80011c0:	e0b2      	b.n	8001328 <HAL_ADC_Start+0x180>
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	2201      	movs	r2, #1
 80011c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	689b      	ldr	r3, [r3, #8]
 80011d0:	f003 0301 	and.w	r3, r3, #1
 80011d4:	2b01      	cmp	r3, #1
 80011d6:	d018      	beq.n	800120a <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	689a      	ldr	r2, [r3, #8]
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	f042 0201 	orr.w	r2, r2, #1
 80011e6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80011e8:	4b52      	ldr	r3, [pc, #328]	; (8001334 <HAL_ADC_Start+0x18c>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	4a52      	ldr	r2, [pc, #328]	; (8001338 <HAL_ADC_Start+0x190>)
 80011ee:	fba2 2303 	umull	r2, r3, r2, r3
 80011f2:	0c9a      	lsrs	r2, r3, #18
 80011f4:	4613      	mov	r3, r2
 80011f6:	005b      	lsls	r3, r3, #1
 80011f8:	4413      	add	r3, r2
 80011fa:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80011fc:	e002      	b.n	8001204 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80011fe:	68bb      	ldr	r3, [r7, #8]
 8001200:	3b01      	subs	r3, #1
 8001202:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001204:	68bb      	ldr	r3, [r7, #8]
 8001206:	2b00      	cmp	r3, #0
 8001208:	d1f9      	bne.n	80011fe <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	689b      	ldr	r3, [r3, #8]
 8001210:	f003 0301 	and.w	r3, r3, #1
 8001214:	2b01      	cmp	r3, #1
 8001216:	d17a      	bne.n	800130e <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800121c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001220:	f023 0301 	bic.w	r3, r3, #1
 8001224:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	685b      	ldr	r3, [r3, #4]
 8001232:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001236:	2b00      	cmp	r3, #0
 8001238:	d007      	beq.n	800124a <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800123e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001242:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800124e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001252:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001256:	d106      	bne.n	8001266 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800125c:	f023 0206 	bic.w	r2, r3, #6
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	645a      	str	r2, [r3, #68]	; 0x44
 8001264:	e002      	b.n	800126c <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	2200      	movs	r2, #0
 800126a:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	2200      	movs	r2, #0
 8001270:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001274:	4b31      	ldr	r3, [pc, #196]	; (800133c <HAL_ADC_Start+0x194>)
 8001276:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001280:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	685b      	ldr	r3, [r3, #4]
 8001286:	f003 031f 	and.w	r3, r3, #31
 800128a:	2b00      	cmp	r3, #0
 800128c:	d12a      	bne.n	80012e4 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	4a2b      	ldr	r2, [pc, #172]	; (8001340 <HAL_ADC_Start+0x198>)
 8001294:	4293      	cmp	r3, r2
 8001296:	d015      	beq.n	80012c4 <HAL_ADC_Start+0x11c>
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	4a29      	ldr	r2, [pc, #164]	; (8001344 <HAL_ADC_Start+0x19c>)
 800129e:	4293      	cmp	r3, r2
 80012a0:	d105      	bne.n	80012ae <HAL_ADC_Start+0x106>
 80012a2:	4b26      	ldr	r3, [pc, #152]	; (800133c <HAL_ADC_Start+0x194>)
 80012a4:	685b      	ldr	r3, [r3, #4]
 80012a6:	f003 031f 	and.w	r3, r3, #31
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d00a      	beq.n	80012c4 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	4a25      	ldr	r2, [pc, #148]	; (8001348 <HAL_ADC_Start+0x1a0>)
 80012b4:	4293      	cmp	r3, r2
 80012b6:	d136      	bne.n	8001326 <HAL_ADC_Start+0x17e>
 80012b8:	4b20      	ldr	r3, [pc, #128]	; (800133c <HAL_ADC_Start+0x194>)
 80012ba:	685b      	ldr	r3, [r3, #4]
 80012bc:	f003 0310 	and.w	r3, r3, #16
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d130      	bne.n	8001326 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	689b      	ldr	r3, [r3, #8]
 80012ca:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d129      	bne.n	8001326 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	689a      	ldr	r2, [r3, #8]
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80012e0:	609a      	str	r2, [r3, #8]
 80012e2:	e020      	b.n	8001326 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	4a15      	ldr	r2, [pc, #84]	; (8001340 <HAL_ADC_Start+0x198>)
 80012ea:	4293      	cmp	r3, r2
 80012ec:	d11b      	bne.n	8001326 <HAL_ADC_Start+0x17e>
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	689b      	ldr	r3, [r3, #8]
 80012f4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d114      	bne.n	8001326 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	689a      	ldr	r2, [r3, #8]
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800130a:	609a      	str	r2, [r3, #8]
 800130c:	e00b      	b.n	8001326 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001312:	f043 0210 	orr.w	r2, r3, #16
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800131e:	f043 0201 	orr.w	r2, r3, #1
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001326:	2300      	movs	r3, #0
}
 8001328:	4618      	mov	r0, r3
 800132a:	3714      	adds	r7, #20
 800132c:	46bd      	mov	sp, r7
 800132e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001332:	4770      	bx	lr
 8001334:	20000600 	.word	0x20000600
 8001338:	431bde83 	.word	0x431bde83
 800133c:	40012300 	.word	0x40012300
 8001340:	40012000 	.word	0x40012000
 8001344:	40012100 	.word	0x40012100
 8001348:	40012200 	.word	0x40012200

0800134c <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 800134c:	b480      	push	{r7}
 800134e:	b083      	sub	sp, #12
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800135a:	2b01      	cmp	r3, #1
 800135c:	d101      	bne.n	8001362 <HAL_ADC_Stop+0x16>
 800135e:	2302      	movs	r3, #2
 8001360:	e021      	b.n	80013a6 <HAL_ADC_Stop+0x5a>
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	2201      	movs	r2, #1
 8001366:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	689a      	ldr	r2, [r3, #8]
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	f022 0201 	bic.w	r2, r2, #1
 8001378:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	689b      	ldr	r3, [r3, #8]
 8001380:	f003 0301 	and.w	r3, r3, #1
 8001384:	2b00      	cmp	r3, #0
 8001386:	d109      	bne.n	800139c <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800138c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001390:	f023 0301 	bic.w	r3, r3, #1
 8001394:	f043 0201 	orr.w	r2, r3, #1
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	2200      	movs	r2, #0
 80013a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80013a4:	2300      	movs	r3, #0
}
 80013a6:	4618      	mov	r0, r3
 80013a8:	370c      	adds	r7, #12
 80013aa:	46bd      	mov	sp, r7
 80013ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b0:	4770      	bx	lr

080013b2 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80013b2:	b580      	push	{r7, lr}
 80013b4:	b084      	sub	sp, #16
 80013b6:	af00      	add	r7, sp, #0
 80013b8:	6078      	str	r0, [r7, #4]
 80013ba:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80013bc:	2300      	movs	r3, #0
 80013be:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	689b      	ldr	r3, [r3, #8]
 80013c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80013ce:	d113      	bne.n	80013f8 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	689b      	ldr	r3, [r3, #8]
 80013d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80013da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80013de:	d10b      	bne.n	80013f8 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013e4:	f043 0220 	orr.w	r2, r3, #32
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	2200      	movs	r2, #0
 80013f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80013f4:	2301      	movs	r3, #1
 80013f6:	e063      	b.n	80014c0 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80013f8:	f7ff fe62 	bl	80010c0 <HAL_GetTick>
 80013fc:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80013fe:	e021      	b.n	8001444 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001406:	d01d      	beq.n	8001444 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	2b00      	cmp	r3, #0
 800140c:	d007      	beq.n	800141e <HAL_ADC_PollForConversion+0x6c>
 800140e:	f7ff fe57 	bl	80010c0 <HAL_GetTick>
 8001412:	4602      	mov	r2, r0
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	1ad3      	subs	r3, r2, r3
 8001418:	683a      	ldr	r2, [r7, #0]
 800141a:	429a      	cmp	r2, r3
 800141c:	d212      	bcs.n	8001444 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	f003 0302 	and.w	r3, r3, #2
 8001428:	2b02      	cmp	r3, #2
 800142a:	d00b      	beq.n	8001444 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001430:	f043 0204 	orr.w	r2, r3, #4
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	2200      	movs	r2, #0
 800143c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8001440:	2303      	movs	r3, #3
 8001442:	e03d      	b.n	80014c0 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f003 0302 	and.w	r3, r3, #2
 800144e:	2b02      	cmp	r3, #2
 8001450:	d1d6      	bne.n	8001400 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f06f 0212 	mvn.w	r2, #18
 800145a:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001460:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	689b      	ldr	r3, [r3, #8]
 800146e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001472:	2b00      	cmp	r3, #0
 8001474:	d123      	bne.n	80014be <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800147a:	2b00      	cmp	r3, #0
 800147c:	d11f      	bne.n	80014be <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001484:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001488:	2b00      	cmp	r3, #0
 800148a:	d006      	beq.n	800149a <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	689b      	ldr	r3, [r3, #8]
 8001492:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001496:	2b00      	cmp	r3, #0
 8001498:	d111      	bne.n	80014be <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800149e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014aa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d105      	bne.n	80014be <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014b6:	f043 0201 	orr.w	r2, r3, #1
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80014be:	2300      	movs	r3, #0
}
 80014c0:	4618      	mov	r0, r3
 80014c2:	3710      	adds	r7, #16
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bd80      	pop	{r7, pc}

080014c8 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80014c8:	b480      	push	{r7}
 80014ca:	b083      	sub	sp, #12
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80014d6:	4618      	mov	r0, r3
 80014d8:	370c      	adds	r7, #12
 80014da:	46bd      	mov	sp, r7
 80014dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e0:	4770      	bx	lr
	...

080014e4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80014e4:	b480      	push	{r7}
 80014e6:	b085      	sub	sp, #20
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
 80014ec:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80014ee:	2300      	movs	r3, #0
 80014f0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80014f8:	2b01      	cmp	r3, #1
 80014fa:	d101      	bne.n	8001500 <HAL_ADC_ConfigChannel+0x1c>
 80014fc:	2302      	movs	r3, #2
 80014fe:	e105      	b.n	800170c <HAL_ADC_ConfigChannel+0x228>
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	2201      	movs	r2, #1
 8001504:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	2b09      	cmp	r3, #9
 800150e:	d925      	bls.n	800155c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	68d9      	ldr	r1, [r3, #12]
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	b29b      	uxth	r3, r3
 800151c:	461a      	mov	r2, r3
 800151e:	4613      	mov	r3, r2
 8001520:	005b      	lsls	r3, r3, #1
 8001522:	4413      	add	r3, r2
 8001524:	3b1e      	subs	r3, #30
 8001526:	2207      	movs	r2, #7
 8001528:	fa02 f303 	lsl.w	r3, r2, r3
 800152c:	43da      	mvns	r2, r3
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	400a      	ands	r2, r1
 8001534:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	68d9      	ldr	r1, [r3, #12]
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	689a      	ldr	r2, [r3, #8]
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	b29b      	uxth	r3, r3
 8001546:	4618      	mov	r0, r3
 8001548:	4603      	mov	r3, r0
 800154a:	005b      	lsls	r3, r3, #1
 800154c:	4403      	add	r3, r0
 800154e:	3b1e      	subs	r3, #30
 8001550:	409a      	lsls	r2, r3
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	430a      	orrs	r2, r1
 8001558:	60da      	str	r2, [r3, #12]
 800155a:	e022      	b.n	80015a2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	6919      	ldr	r1, [r3, #16]
 8001562:	683b      	ldr	r3, [r7, #0]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	b29b      	uxth	r3, r3
 8001568:	461a      	mov	r2, r3
 800156a:	4613      	mov	r3, r2
 800156c:	005b      	lsls	r3, r3, #1
 800156e:	4413      	add	r3, r2
 8001570:	2207      	movs	r2, #7
 8001572:	fa02 f303 	lsl.w	r3, r2, r3
 8001576:	43da      	mvns	r2, r3
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	400a      	ands	r2, r1
 800157e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	6919      	ldr	r1, [r3, #16]
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	689a      	ldr	r2, [r3, #8]
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	b29b      	uxth	r3, r3
 8001590:	4618      	mov	r0, r3
 8001592:	4603      	mov	r3, r0
 8001594:	005b      	lsls	r3, r3, #1
 8001596:	4403      	add	r3, r0
 8001598:	409a      	lsls	r2, r3
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	430a      	orrs	r2, r1
 80015a0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	685b      	ldr	r3, [r3, #4]
 80015a6:	2b06      	cmp	r3, #6
 80015a8:	d824      	bhi.n	80015f4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	685a      	ldr	r2, [r3, #4]
 80015b4:	4613      	mov	r3, r2
 80015b6:	009b      	lsls	r3, r3, #2
 80015b8:	4413      	add	r3, r2
 80015ba:	3b05      	subs	r3, #5
 80015bc:	221f      	movs	r2, #31
 80015be:	fa02 f303 	lsl.w	r3, r2, r3
 80015c2:	43da      	mvns	r2, r3
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	400a      	ands	r2, r1
 80015ca:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80015d2:	683b      	ldr	r3, [r7, #0]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	b29b      	uxth	r3, r3
 80015d8:	4618      	mov	r0, r3
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	685a      	ldr	r2, [r3, #4]
 80015de:	4613      	mov	r3, r2
 80015e0:	009b      	lsls	r3, r3, #2
 80015e2:	4413      	add	r3, r2
 80015e4:	3b05      	subs	r3, #5
 80015e6:	fa00 f203 	lsl.w	r2, r0, r3
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	430a      	orrs	r2, r1
 80015f0:	635a      	str	r2, [r3, #52]	; 0x34
 80015f2:	e04c      	b.n	800168e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	685b      	ldr	r3, [r3, #4]
 80015f8:	2b0c      	cmp	r3, #12
 80015fa:	d824      	bhi.n	8001646 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001602:	683b      	ldr	r3, [r7, #0]
 8001604:	685a      	ldr	r2, [r3, #4]
 8001606:	4613      	mov	r3, r2
 8001608:	009b      	lsls	r3, r3, #2
 800160a:	4413      	add	r3, r2
 800160c:	3b23      	subs	r3, #35	; 0x23
 800160e:	221f      	movs	r2, #31
 8001610:	fa02 f303 	lsl.w	r3, r2, r3
 8001614:	43da      	mvns	r2, r3
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	400a      	ands	r2, r1
 800161c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	b29b      	uxth	r3, r3
 800162a:	4618      	mov	r0, r3
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	685a      	ldr	r2, [r3, #4]
 8001630:	4613      	mov	r3, r2
 8001632:	009b      	lsls	r3, r3, #2
 8001634:	4413      	add	r3, r2
 8001636:	3b23      	subs	r3, #35	; 0x23
 8001638:	fa00 f203 	lsl.w	r2, r0, r3
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	430a      	orrs	r2, r1
 8001642:	631a      	str	r2, [r3, #48]	; 0x30
 8001644:	e023      	b.n	800168e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	685a      	ldr	r2, [r3, #4]
 8001650:	4613      	mov	r3, r2
 8001652:	009b      	lsls	r3, r3, #2
 8001654:	4413      	add	r3, r2
 8001656:	3b41      	subs	r3, #65	; 0x41
 8001658:	221f      	movs	r2, #31
 800165a:	fa02 f303 	lsl.w	r3, r2, r3
 800165e:	43da      	mvns	r2, r3
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	400a      	ands	r2, r1
 8001666:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	b29b      	uxth	r3, r3
 8001674:	4618      	mov	r0, r3
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	685a      	ldr	r2, [r3, #4]
 800167a:	4613      	mov	r3, r2
 800167c:	009b      	lsls	r3, r3, #2
 800167e:	4413      	add	r3, r2
 8001680:	3b41      	subs	r3, #65	; 0x41
 8001682:	fa00 f203 	lsl.w	r2, r0, r3
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	430a      	orrs	r2, r1
 800168c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800168e:	4b22      	ldr	r3, [pc, #136]	; (8001718 <HAL_ADC_ConfigChannel+0x234>)
 8001690:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	4a21      	ldr	r2, [pc, #132]	; (800171c <HAL_ADC_ConfigChannel+0x238>)
 8001698:	4293      	cmp	r3, r2
 800169a:	d109      	bne.n	80016b0 <HAL_ADC_ConfigChannel+0x1cc>
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	2b12      	cmp	r3, #18
 80016a2:	d105      	bne.n	80016b0 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	685b      	ldr	r3, [r3, #4]
 80016a8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	4a19      	ldr	r2, [pc, #100]	; (800171c <HAL_ADC_ConfigChannel+0x238>)
 80016b6:	4293      	cmp	r3, r2
 80016b8:	d123      	bne.n	8001702 <HAL_ADC_ConfigChannel+0x21e>
 80016ba:	683b      	ldr	r3, [r7, #0]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	2b10      	cmp	r3, #16
 80016c0:	d003      	beq.n	80016ca <HAL_ADC_ConfigChannel+0x1e6>
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	2b11      	cmp	r3, #17
 80016c8:	d11b      	bne.n	8001702 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	685b      	ldr	r3, [r3, #4]
 80016ce:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80016d6:	683b      	ldr	r3, [r7, #0]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	2b10      	cmp	r3, #16
 80016dc:	d111      	bne.n	8001702 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80016de:	4b10      	ldr	r3, [pc, #64]	; (8001720 <HAL_ADC_ConfigChannel+0x23c>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	4a10      	ldr	r2, [pc, #64]	; (8001724 <HAL_ADC_ConfigChannel+0x240>)
 80016e4:	fba2 2303 	umull	r2, r3, r2, r3
 80016e8:	0c9a      	lsrs	r2, r3, #18
 80016ea:	4613      	mov	r3, r2
 80016ec:	009b      	lsls	r3, r3, #2
 80016ee:	4413      	add	r3, r2
 80016f0:	005b      	lsls	r3, r3, #1
 80016f2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80016f4:	e002      	b.n	80016fc <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80016f6:	68bb      	ldr	r3, [r7, #8]
 80016f8:	3b01      	subs	r3, #1
 80016fa:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80016fc:	68bb      	ldr	r3, [r7, #8]
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d1f9      	bne.n	80016f6 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	2200      	movs	r2, #0
 8001706:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800170a:	2300      	movs	r3, #0
}
 800170c:	4618      	mov	r0, r3
 800170e:	3714      	adds	r7, #20
 8001710:	46bd      	mov	sp, r7
 8001712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001716:	4770      	bx	lr
 8001718:	40012300 	.word	0x40012300
 800171c:	40012000 	.word	0x40012000
 8001720:	20000600 	.word	0x20000600
 8001724:	431bde83 	.word	0x431bde83

08001728 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001728:	b480      	push	{r7}
 800172a:	b085      	sub	sp, #20
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001730:	4b79      	ldr	r3, [pc, #484]	; (8001918 <ADC_Init+0x1f0>)
 8001732:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	685a      	ldr	r2, [r3, #4]
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	431a      	orrs	r2, r3
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	685a      	ldr	r2, [r3, #4]
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800175c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	6859      	ldr	r1, [r3, #4]
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	691b      	ldr	r3, [r3, #16]
 8001768:	021a      	lsls	r2, r3, #8
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	430a      	orrs	r2, r1
 8001770:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	685a      	ldr	r2, [r3, #4]
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001780:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	6859      	ldr	r1, [r3, #4]
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	689a      	ldr	r2, [r3, #8]
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	430a      	orrs	r2, r1
 8001792:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	689a      	ldr	r2, [r3, #8]
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80017a2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	6899      	ldr	r1, [r3, #8]
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	68da      	ldr	r2, [r3, #12]
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	430a      	orrs	r2, r1
 80017b4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017ba:	4a58      	ldr	r2, [pc, #352]	; (800191c <ADC_Init+0x1f4>)
 80017bc:	4293      	cmp	r3, r2
 80017be:	d022      	beq.n	8001806 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	689a      	ldr	r2, [r3, #8]
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80017ce:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	6899      	ldr	r1, [r3, #8]
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	430a      	orrs	r2, r1
 80017e0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	689a      	ldr	r2, [r3, #8]
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80017f0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	6899      	ldr	r1, [r3, #8]
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	430a      	orrs	r2, r1
 8001802:	609a      	str	r2, [r3, #8]
 8001804:	e00f      	b.n	8001826 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	689a      	ldr	r2, [r3, #8]
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001814:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	689a      	ldr	r2, [r3, #8]
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001824:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	689a      	ldr	r2, [r3, #8]
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f022 0202 	bic.w	r2, r2, #2
 8001834:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	6899      	ldr	r1, [r3, #8]
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	7e1b      	ldrb	r3, [r3, #24]
 8001840:	005a      	lsls	r2, r3, #1
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	430a      	orrs	r2, r1
 8001848:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001850:	2b00      	cmp	r3, #0
 8001852:	d01b      	beq.n	800188c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	685a      	ldr	r2, [r3, #4]
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001862:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	685a      	ldr	r2, [r3, #4]
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001872:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	6859      	ldr	r1, [r3, #4]
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800187e:	3b01      	subs	r3, #1
 8001880:	035a      	lsls	r2, r3, #13
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	430a      	orrs	r2, r1
 8001888:	605a      	str	r2, [r3, #4]
 800188a:	e007      	b.n	800189c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	685a      	ldr	r2, [r3, #4]
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800189a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80018aa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	69db      	ldr	r3, [r3, #28]
 80018b6:	3b01      	subs	r3, #1
 80018b8:	051a      	lsls	r2, r3, #20
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	430a      	orrs	r2, r1
 80018c0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	689a      	ldr	r2, [r3, #8]
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80018d0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	6899      	ldr	r1, [r3, #8]
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80018de:	025a      	lsls	r2, r3, #9
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	430a      	orrs	r2, r1
 80018e6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	689a      	ldr	r2, [r3, #8]
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80018f6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	6899      	ldr	r1, [r3, #8]
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	695b      	ldr	r3, [r3, #20]
 8001902:	029a      	lsls	r2, r3, #10
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	430a      	orrs	r2, r1
 800190a:	609a      	str	r2, [r3, #8]
}
 800190c:	bf00      	nop
 800190e:	3714      	adds	r7, #20
 8001910:	46bd      	mov	sp, r7
 8001912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001916:	4770      	bx	lr
 8001918:	40012300 	.word	0x40012300
 800191c:	0f000001 	.word	0x0f000001

08001920 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001920:	b480      	push	{r7}
 8001922:	b085      	sub	sp, #20
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	f003 0307 	and.w	r3, r3, #7
 800192e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001930:	4b0c      	ldr	r3, [pc, #48]	; (8001964 <__NVIC_SetPriorityGrouping+0x44>)
 8001932:	68db      	ldr	r3, [r3, #12]
 8001934:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001936:	68ba      	ldr	r2, [r7, #8]
 8001938:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800193c:	4013      	ands	r3, r2
 800193e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001944:	68bb      	ldr	r3, [r7, #8]
 8001946:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001948:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800194c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001950:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001952:	4a04      	ldr	r2, [pc, #16]	; (8001964 <__NVIC_SetPriorityGrouping+0x44>)
 8001954:	68bb      	ldr	r3, [r7, #8]
 8001956:	60d3      	str	r3, [r2, #12]
}
 8001958:	bf00      	nop
 800195a:	3714      	adds	r7, #20
 800195c:	46bd      	mov	sp, r7
 800195e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001962:	4770      	bx	lr
 8001964:	e000ed00 	.word	0xe000ed00

08001968 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001968:	b480      	push	{r7}
 800196a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800196c:	4b04      	ldr	r3, [pc, #16]	; (8001980 <__NVIC_GetPriorityGrouping+0x18>)
 800196e:	68db      	ldr	r3, [r3, #12]
 8001970:	0a1b      	lsrs	r3, r3, #8
 8001972:	f003 0307 	and.w	r3, r3, #7
}
 8001976:	4618      	mov	r0, r3
 8001978:	46bd      	mov	sp, r7
 800197a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197e:	4770      	bx	lr
 8001980:	e000ed00 	.word	0xe000ed00

08001984 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001984:	b480      	push	{r7}
 8001986:	b083      	sub	sp, #12
 8001988:	af00      	add	r7, sp, #0
 800198a:	4603      	mov	r3, r0
 800198c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800198e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001992:	2b00      	cmp	r3, #0
 8001994:	db0b      	blt.n	80019ae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001996:	79fb      	ldrb	r3, [r7, #7]
 8001998:	f003 021f 	and.w	r2, r3, #31
 800199c:	4907      	ldr	r1, [pc, #28]	; (80019bc <__NVIC_EnableIRQ+0x38>)
 800199e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019a2:	095b      	lsrs	r3, r3, #5
 80019a4:	2001      	movs	r0, #1
 80019a6:	fa00 f202 	lsl.w	r2, r0, r2
 80019aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80019ae:	bf00      	nop
 80019b0:	370c      	adds	r7, #12
 80019b2:	46bd      	mov	sp, r7
 80019b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b8:	4770      	bx	lr
 80019ba:	bf00      	nop
 80019bc:	e000e100 	.word	0xe000e100

080019c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019c0:	b480      	push	{r7}
 80019c2:	b083      	sub	sp, #12
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	4603      	mov	r3, r0
 80019c8:	6039      	str	r1, [r7, #0]
 80019ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	db0a      	blt.n	80019ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	b2da      	uxtb	r2, r3
 80019d8:	490c      	ldr	r1, [pc, #48]	; (8001a0c <__NVIC_SetPriority+0x4c>)
 80019da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019de:	0112      	lsls	r2, r2, #4
 80019e0:	b2d2      	uxtb	r2, r2
 80019e2:	440b      	add	r3, r1
 80019e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019e8:	e00a      	b.n	8001a00 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	b2da      	uxtb	r2, r3
 80019ee:	4908      	ldr	r1, [pc, #32]	; (8001a10 <__NVIC_SetPriority+0x50>)
 80019f0:	79fb      	ldrb	r3, [r7, #7]
 80019f2:	f003 030f 	and.w	r3, r3, #15
 80019f6:	3b04      	subs	r3, #4
 80019f8:	0112      	lsls	r2, r2, #4
 80019fa:	b2d2      	uxtb	r2, r2
 80019fc:	440b      	add	r3, r1
 80019fe:	761a      	strb	r2, [r3, #24]
}
 8001a00:	bf00      	nop
 8001a02:	370c      	adds	r7, #12
 8001a04:	46bd      	mov	sp, r7
 8001a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0a:	4770      	bx	lr
 8001a0c:	e000e100 	.word	0xe000e100
 8001a10:	e000ed00 	.word	0xe000ed00

08001a14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a14:	b480      	push	{r7}
 8001a16:	b089      	sub	sp, #36	; 0x24
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	60f8      	str	r0, [r7, #12]
 8001a1c:	60b9      	str	r1, [r7, #8]
 8001a1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	f003 0307 	and.w	r3, r3, #7
 8001a26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a28:	69fb      	ldr	r3, [r7, #28]
 8001a2a:	f1c3 0307 	rsb	r3, r3, #7
 8001a2e:	2b04      	cmp	r3, #4
 8001a30:	bf28      	it	cs
 8001a32:	2304      	movcs	r3, #4
 8001a34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a36:	69fb      	ldr	r3, [r7, #28]
 8001a38:	3304      	adds	r3, #4
 8001a3a:	2b06      	cmp	r3, #6
 8001a3c:	d902      	bls.n	8001a44 <NVIC_EncodePriority+0x30>
 8001a3e:	69fb      	ldr	r3, [r7, #28]
 8001a40:	3b03      	subs	r3, #3
 8001a42:	e000      	b.n	8001a46 <NVIC_EncodePriority+0x32>
 8001a44:	2300      	movs	r3, #0
 8001a46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a48:	f04f 32ff 	mov.w	r2, #4294967295
 8001a4c:	69bb      	ldr	r3, [r7, #24]
 8001a4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a52:	43da      	mvns	r2, r3
 8001a54:	68bb      	ldr	r3, [r7, #8]
 8001a56:	401a      	ands	r2, r3
 8001a58:	697b      	ldr	r3, [r7, #20]
 8001a5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a5c:	f04f 31ff 	mov.w	r1, #4294967295
 8001a60:	697b      	ldr	r3, [r7, #20]
 8001a62:	fa01 f303 	lsl.w	r3, r1, r3
 8001a66:	43d9      	mvns	r1, r3
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a6c:	4313      	orrs	r3, r2
         );
}
 8001a6e:	4618      	mov	r0, r3
 8001a70:	3724      	adds	r7, #36	; 0x24
 8001a72:	46bd      	mov	sp, r7
 8001a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a78:	4770      	bx	lr
	...

08001a7c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b082      	sub	sp, #8
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	3b01      	subs	r3, #1
 8001a88:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a8c:	d301      	bcc.n	8001a92 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a8e:	2301      	movs	r3, #1
 8001a90:	e00f      	b.n	8001ab2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a92:	4a0a      	ldr	r2, [pc, #40]	; (8001abc <SysTick_Config+0x40>)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	3b01      	subs	r3, #1
 8001a98:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a9a:	210f      	movs	r1, #15
 8001a9c:	f04f 30ff 	mov.w	r0, #4294967295
 8001aa0:	f7ff ff8e 	bl	80019c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001aa4:	4b05      	ldr	r3, [pc, #20]	; (8001abc <SysTick_Config+0x40>)
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001aaa:	4b04      	ldr	r3, [pc, #16]	; (8001abc <SysTick_Config+0x40>)
 8001aac:	2207      	movs	r2, #7
 8001aae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ab0:	2300      	movs	r3, #0
}
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	3708      	adds	r7, #8
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}
 8001aba:	bf00      	nop
 8001abc:	e000e010 	.word	0xe000e010

08001ac0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b082      	sub	sp, #8
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ac8:	6878      	ldr	r0, [r7, #4]
 8001aca:	f7ff ff29 	bl	8001920 <__NVIC_SetPriorityGrouping>
}
 8001ace:	bf00      	nop
 8001ad0:	3708      	adds	r7, #8
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}

08001ad6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ad6:	b580      	push	{r7, lr}
 8001ad8:	b086      	sub	sp, #24
 8001ada:	af00      	add	r7, sp, #0
 8001adc:	4603      	mov	r3, r0
 8001ade:	60b9      	str	r1, [r7, #8]
 8001ae0:	607a      	str	r2, [r7, #4]
 8001ae2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ae8:	f7ff ff3e 	bl	8001968 <__NVIC_GetPriorityGrouping>
 8001aec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001aee:	687a      	ldr	r2, [r7, #4]
 8001af0:	68b9      	ldr	r1, [r7, #8]
 8001af2:	6978      	ldr	r0, [r7, #20]
 8001af4:	f7ff ff8e 	bl	8001a14 <NVIC_EncodePriority>
 8001af8:	4602      	mov	r2, r0
 8001afa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001afe:	4611      	mov	r1, r2
 8001b00:	4618      	mov	r0, r3
 8001b02:	f7ff ff5d 	bl	80019c0 <__NVIC_SetPriority>
}
 8001b06:	bf00      	nop
 8001b08:	3718      	adds	r7, #24
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bd80      	pop	{r7, pc}

08001b0e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b0e:	b580      	push	{r7, lr}
 8001b10:	b082      	sub	sp, #8
 8001b12:	af00      	add	r7, sp, #0
 8001b14:	4603      	mov	r3, r0
 8001b16:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	f7ff ff31 	bl	8001984 <__NVIC_EnableIRQ>
}
 8001b22:	bf00      	nop
 8001b24:	3708      	adds	r7, #8
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd80      	pop	{r7, pc}

08001b2a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b2a:	b580      	push	{r7, lr}
 8001b2c:	b082      	sub	sp, #8
 8001b2e:	af00      	add	r7, sp, #0
 8001b30:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b32:	6878      	ldr	r0, [r7, #4]
 8001b34:	f7ff ffa2 	bl	8001a7c <SysTick_Config>
 8001b38:	4603      	mov	r3, r0
}
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	3708      	adds	r7, #8
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd80      	pop	{r7, pc}
	...

08001b44 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b44:	b480      	push	{r7}
 8001b46:	b089      	sub	sp, #36	; 0x24
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
 8001b4c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001b52:	2300      	movs	r3, #0
 8001b54:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001b56:	2300      	movs	r3, #0
 8001b58:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	61fb      	str	r3, [r7, #28]
 8001b5e:	e16b      	b.n	8001e38 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001b60:	2201      	movs	r2, #1
 8001b62:	69fb      	ldr	r3, [r7, #28]
 8001b64:	fa02 f303 	lsl.w	r3, r2, r3
 8001b68:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	697a      	ldr	r2, [r7, #20]
 8001b70:	4013      	ands	r3, r2
 8001b72:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001b74:	693a      	ldr	r2, [r7, #16]
 8001b76:	697b      	ldr	r3, [r7, #20]
 8001b78:	429a      	cmp	r2, r3
 8001b7a:	f040 815a 	bne.w	8001e32 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	f003 0303 	and.w	r3, r3, #3
 8001b86:	2b01      	cmp	r3, #1
 8001b88:	d005      	beq.n	8001b96 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	685b      	ldr	r3, [r3, #4]
 8001b8e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b92:	2b02      	cmp	r3, #2
 8001b94:	d130      	bne.n	8001bf8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	689b      	ldr	r3, [r3, #8]
 8001b9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001b9c:	69fb      	ldr	r3, [r7, #28]
 8001b9e:	005b      	lsls	r3, r3, #1
 8001ba0:	2203      	movs	r2, #3
 8001ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba6:	43db      	mvns	r3, r3
 8001ba8:	69ba      	ldr	r2, [r7, #24]
 8001baa:	4013      	ands	r3, r2
 8001bac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	68da      	ldr	r2, [r3, #12]
 8001bb2:	69fb      	ldr	r3, [r7, #28]
 8001bb4:	005b      	lsls	r3, r3, #1
 8001bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bba:	69ba      	ldr	r2, [r7, #24]
 8001bbc:	4313      	orrs	r3, r2
 8001bbe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	69ba      	ldr	r2, [r7, #24]
 8001bc4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001bcc:	2201      	movs	r2, #1
 8001bce:	69fb      	ldr	r3, [r7, #28]
 8001bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd4:	43db      	mvns	r3, r3
 8001bd6:	69ba      	ldr	r2, [r7, #24]
 8001bd8:	4013      	ands	r3, r2
 8001bda:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	091b      	lsrs	r3, r3, #4
 8001be2:	f003 0201 	and.w	r2, r3, #1
 8001be6:	69fb      	ldr	r3, [r7, #28]
 8001be8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bec:	69ba      	ldr	r2, [r7, #24]
 8001bee:	4313      	orrs	r3, r2
 8001bf0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	69ba      	ldr	r2, [r7, #24]
 8001bf6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	685b      	ldr	r3, [r3, #4]
 8001bfc:	f003 0303 	and.w	r3, r3, #3
 8001c00:	2b03      	cmp	r3, #3
 8001c02:	d017      	beq.n	8001c34 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	68db      	ldr	r3, [r3, #12]
 8001c08:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001c0a:	69fb      	ldr	r3, [r7, #28]
 8001c0c:	005b      	lsls	r3, r3, #1
 8001c0e:	2203      	movs	r2, #3
 8001c10:	fa02 f303 	lsl.w	r3, r2, r3
 8001c14:	43db      	mvns	r3, r3
 8001c16:	69ba      	ldr	r2, [r7, #24]
 8001c18:	4013      	ands	r3, r2
 8001c1a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	689a      	ldr	r2, [r3, #8]
 8001c20:	69fb      	ldr	r3, [r7, #28]
 8001c22:	005b      	lsls	r3, r3, #1
 8001c24:	fa02 f303 	lsl.w	r3, r2, r3
 8001c28:	69ba      	ldr	r2, [r7, #24]
 8001c2a:	4313      	orrs	r3, r2
 8001c2c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	69ba      	ldr	r2, [r7, #24]
 8001c32:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	f003 0303 	and.w	r3, r3, #3
 8001c3c:	2b02      	cmp	r3, #2
 8001c3e:	d123      	bne.n	8001c88 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c40:	69fb      	ldr	r3, [r7, #28]
 8001c42:	08da      	lsrs	r2, r3, #3
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	3208      	adds	r2, #8
 8001c48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001c4e:	69fb      	ldr	r3, [r7, #28]
 8001c50:	f003 0307 	and.w	r3, r3, #7
 8001c54:	009b      	lsls	r3, r3, #2
 8001c56:	220f      	movs	r2, #15
 8001c58:	fa02 f303 	lsl.w	r3, r2, r3
 8001c5c:	43db      	mvns	r3, r3
 8001c5e:	69ba      	ldr	r2, [r7, #24]
 8001c60:	4013      	ands	r3, r2
 8001c62:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	691a      	ldr	r2, [r3, #16]
 8001c68:	69fb      	ldr	r3, [r7, #28]
 8001c6a:	f003 0307 	and.w	r3, r3, #7
 8001c6e:	009b      	lsls	r3, r3, #2
 8001c70:	fa02 f303 	lsl.w	r3, r2, r3
 8001c74:	69ba      	ldr	r2, [r7, #24]
 8001c76:	4313      	orrs	r3, r2
 8001c78:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001c7a:	69fb      	ldr	r3, [r7, #28]
 8001c7c:	08da      	lsrs	r2, r3, #3
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	3208      	adds	r2, #8
 8001c82:	69b9      	ldr	r1, [r7, #24]
 8001c84:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001c8e:	69fb      	ldr	r3, [r7, #28]
 8001c90:	005b      	lsls	r3, r3, #1
 8001c92:	2203      	movs	r2, #3
 8001c94:	fa02 f303 	lsl.w	r3, r2, r3
 8001c98:	43db      	mvns	r3, r3
 8001c9a:	69ba      	ldr	r2, [r7, #24]
 8001c9c:	4013      	ands	r3, r2
 8001c9e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	f003 0203 	and.w	r2, r3, #3
 8001ca8:	69fb      	ldr	r3, [r7, #28]
 8001caa:	005b      	lsls	r3, r3, #1
 8001cac:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb0:	69ba      	ldr	r2, [r7, #24]
 8001cb2:	4313      	orrs	r3, r2
 8001cb4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	69ba      	ldr	r2, [r7, #24]
 8001cba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	f000 80b4 	beq.w	8001e32 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cca:	2300      	movs	r3, #0
 8001ccc:	60fb      	str	r3, [r7, #12]
 8001cce:	4b60      	ldr	r3, [pc, #384]	; (8001e50 <HAL_GPIO_Init+0x30c>)
 8001cd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cd2:	4a5f      	ldr	r2, [pc, #380]	; (8001e50 <HAL_GPIO_Init+0x30c>)
 8001cd4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001cd8:	6453      	str	r3, [r2, #68]	; 0x44
 8001cda:	4b5d      	ldr	r3, [pc, #372]	; (8001e50 <HAL_GPIO_Init+0x30c>)
 8001cdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cde:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ce2:	60fb      	str	r3, [r7, #12]
 8001ce4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001ce6:	4a5b      	ldr	r2, [pc, #364]	; (8001e54 <HAL_GPIO_Init+0x310>)
 8001ce8:	69fb      	ldr	r3, [r7, #28]
 8001cea:	089b      	lsrs	r3, r3, #2
 8001cec:	3302      	adds	r3, #2
 8001cee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cf2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001cf4:	69fb      	ldr	r3, [r7, #28]
 8001cf6:	f003 0303 	and.w	r3, r3, #3
 8001cfa:	009b      	lsls	r3, r3, #2
 8001cfc:	220f      	movs	r2, #15
 8001cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8001d02:	43db      	mvns	r3, r3
 8001d04:	69ba      	ldr	r2, [r7, #24]
 8001d06:	4013      	ands	r3, r2
 8001d08:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	4a52      	ldr	r2, [pc, #328]	; (8001e58 <HAL_GPIO_Init+0x314>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d02b      	beq.n	8001d6a <HAL_GPIO_Init+0x226>
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	4a51      	ldr	r2, [pc, #324]	; (8001e5c <HAL_GPIO_Init+0x318>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d025      	beq.n	8001d66 <HAL_GPIO_Init+0x222>
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	4a50      	ldr	r2, [pc, #320]	; (8001e60 <HAL_GPIO_Init+0x31c>)
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d01f      	beq.n	8001d62 <HAL_GPIO_Init+0x21e>
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	4a4f      	ldr	r2, [pc, #316]	; (8001e64 <HAL_GPIO_Init+0x320>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d019      	beq.n	8001d5e <HAL_GPIO_Init+0x21a>
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	4a4e      	ldr	r2, [pc, #312]	; (8001e68 <HAL_GPIO_Init+0x324>)
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d013      	beq.n	8001d5a <HAL_GPIO_Init+0x216>
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	4a4d      	ldr	r2, [pc, #308]	; (8001e6c <HAL_GPIO_Init+0x328>)
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d00d      	beq.n	8001d56 <HAL_GPIO_Init+0x212>
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	4a4c      	ldr	r2, [pc, #304]	; (8001e70 <HAL_GPIO_Init+0x32c>)
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d007      	beq.n	8001d52 <HAL_GPIO_Init+0x20e>
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	4a4b      	ldr	r2, [pc, #300]	; (8001e74 <HAL_GPIO_Init+0x330>)
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d101      	bne.n	8001d4e <HAL_GPIO_Init+0x20a>
 8001d4a:	2307      	movs	r3, #7
 8001d4c:	e00e      	b.n	8001d6c <HAL_GPIO_Init+0x228>
 8001d4e:	2308      	movs	r3, #8
 8001d50:	e00c      	b.n	8001d6c <HAL_GPIO_Init+0x228>
 8001d52:	2306      	movs	r3, #6
 8001d54:	e00a      	b.n	8001d6c <HAL_GPIO_Init+0x228>
 8001d56:	2305      	movs	r3, #5
 8001d58:	e008      	b.n	8001d6c <HAL_GPIO_Init+0x228>
 8001d5a:	2304      	movs	r3, #4
 8001d5c:	e006      	b.n	8001d6c <HAL_GPIO_Init+0x228>
 8001d5e:	2303      	movs	r3, #3
 8001d60:	e004      	b.n	8001d6c <HAL_GPIO_Init+0x228>
 8001d62:	2302      	movs	r3, #2
 8001d64:	e002      	b.n	8001d6c <HAL_GPIO_Init+0x228>
 8001d66:	2301      	movs	r3, #1
 8001d68:	e000      	b.n	8001d6c <HAL_GPIO_Init+0x228>
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	69fa      	ldr	r2, [r7, #28]
 8001d6e:	f002 0203 	and.w	r2, r2, #3
 8001d72:	0092      	lsls	r2, r2, #2
 8001d74:	4093      	lsls	r3, r2
 8001d76:	69ba      	ldr	r2, [r7, #24]
 8001d78:	4313      	orrs	r3, r2
 8001d7a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d7c:	4935      	ldr	r1, [pc, #212]	; (8001e54 <HAL_GPIO_Init+0x310>)
 8001d7e:	69fb      	ldr	r3, [r7, #28]
 8001d80:	089b      	lsrs	r3, r3, #2
 8001d82:	3302      	adds	r3, #2
 8001d84:	69ba      	ldr	r2, [r7, #24]
 8001d86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d8a:	4b3b      	ldr	r3, [pc, #236]	; (8001e78 <HAL_GPIO_Init+0x334>)
 8001d8c:	689b      	ldr	r3, [r3, #8]
 8001d8e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d90:	693b      	ldr	r3, [r7, #16]
 8001d92:	43db      	mvns	r3, r3
 8001d94:	69ba      	ldr	r2, [r7, #24]
 8001d96:	4013      	ands	r3, r2
 8001d98:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	685b      	ldr	r3, [r3, #4]
 8001d9e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d003      	beq.n	8001dae <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001da6:	69ba      	ldr	r2, [r7, #24]
 8001da8:	693b      	ldr	r3, [r7, #16]
 8001daa:	4313      	orrs	r3, r2
 8001dac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001dae:	4a32      	ldr	r2, [pc, #200]	; (8001e78 <HAL_GPIO_Init+0x334>)
 8001db0:	69bb      	ldr	r3, [r7, #24]
 8001db2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001db4:	4b30      	ldr	r3, [pc, #192]	; (8001e78 <HAL_GPIO_Init+0x334>)
 8001db6:	68db      	ldr	r3, [r3, #12]
 8001db8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dba:	693b      	ldr	r3, [r7, #16]
 8001dbc:	43db      	mvns	r3, r3
 8001dbe:	69ba      	ldr	r2, [r7, #24]
 8001dc0:	4013      	ands	r3, r2
 8001dc2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d003      	beq.n	8001dd8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001dd0:	69ba      	ldr	r2, [r7, #24]
 8001dd2:	693b      	ldr	r3, [r7, #16]
 8001dd4:	4313      	orrs	r3, r2
 8001dd6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001dd8:	4a27      	ldr	r2, [pc, #156]	; (8001e78 <HAL_GPIO_Init+0x334>)
 8001dda:	69bb      	ldr	r3, [r7, #24]
 8001ddc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001dde:	4b26      	ldr	r3, [pc, #152]	; (8001e78 <HAL_GPIO_Init+0x334>)
 8001de0:	685b      	ldr	r3, [r3, #4]
 8001de2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001de4:	693b      	ldr	r3, [r7, #16]
 8001de6:	43db      	mvns	r3, r3
 8001de8:	69ba      	ldr	r2, [r7, #24]
 8001dea:	4013      	ands	r3, r2
 8001dec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d003      	beq.n	8001e02 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001dfa:	69ba      	ldr	r2, [r7, #24]
 8001dfc:	693b      	ldr	r3, [r7, #16]
 8001dfe:	4313      	orrs	r3, r2
 8001e00:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001e02:	4a1d      	ldr	r2, [pc, #116]	; (8001e78 <HAL_GPIO_Init+0x334>)
 8001e04:	69bb      	ldr	r3, [r7, #24]
 8001e06:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e08:	4b1b      	ldr	r3, [pc, #108]	; (8001e78 <HAL_GPIO_Init+0x334>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e0e:	693b      	ldr	r3, [r7, #16]
 8001e10:	43db      	mvns	r3, r3
 8001e12:	69ba      	ldr	r2, [r7, #24]
 8001e14:	4013      	ands	r3, r2
 8001e16:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	685b      	ldr	r3, [r3, #4]
 8001e1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d003      	beq.n	8001e2c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001e24:	69ba      	ldr	r2, [r7, #24]
 8001e26:	693b      	ldr	r3, [r7, #16]
 8001e28:	4313      	orrs	r3, r2
 8001e2a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001e2c:	4a12      	ldr	r2, [pc, #72]	; (8001e78 <HAL_GPIO_Init+0x334>)
 8001e2e:	69bb      	ldr	r3, [r7, #24]
 8001e30:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e32:	69fb      	ldr	r3, [r7, #28]
 8001e34:	3301      	adds	r3, #1
 8001e36:	61fb      	str	r3, [r7, #28]
 8001e38:	69fb      	ldr	r3, [r7, #28]
 8001e3a:	2b0f      	cmp	r3, #15
 8001e3c:	f67f ae90 	bls.w	8001b60 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001e40:	bf00      	nop
 8001e42:	bf00      	nop
 8001e44:	3724      	adds	r7, #36	; 0x24
 8001e46:	46bd      	mov	sp, r7
 8001e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4c:	4770      	bx	lr
 8001e4e:	bf00      	nop
 8001e50:	40023800 	.word	0x40023800
 8001e54:	40013800 	.word	0x40013800
 8001e58:	40020000 	.word	0x40020000
 8001e5c:	40020400 	.word	0x40020400
 8001e60:	40020800 	.word	0x40020800
 8001e64:	40020c00 	.word	0x40020c00
 8001e68:	40021000 	.word	0x40021000
 8001e6c:	40021400 	.word	0x40021400
 8001e70:	40021800 	.word	0x40021800
 8001e74:	40021c00 	.word	0x40021c00
 8001e78:	40013c00 	.word	0x40013c00

08001e7c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	b083      	sub	sp, #12
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
 8001e84:	460b      	mov	r3, r1
 8001e86:	807b      	strh	r3, [r7, #2]
 8001e88:	4613      	mov	r3, r2
 8001e8a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e8c:	787b      	ldrb	r3, [r7, #1]
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d003      	beq.n	8001e9a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e92:	887a      	ldrh	r2, [r7, #2]
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001e98:	e003      	b.n	8001ea2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001e9a:	887b      	ldrh	r3, [r7, #2]
 8001e9c:	041a      	lsls	r2, r3, #16
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	619a      	str	r2, [r3, #24]
}
 8001ea2:	bf00      	nop
 8001ea4:	370c      	adds	r7, #12
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eac:	4770      	bx	lr

08001eae <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001eae:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001eb0:	b08f      	sub	sp, #60	; 0x3c
 8001eb2:	af0a      	add	r7, sp, #40	; 0x28
 8001eb4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d101      	bne.n	8001ec0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	e10f      	b.n	80020e0 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001ecc:	b2db      	uxtb	r3, r3
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d106      	bne.n	8001ee0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001eda:	6878      	ldr	r0, [r7, #4]
 8001edc:	f006 fd58 	bl	8008990 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2203      	movs	r2, #3
 8001ee4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001ee8:	68bb      	ldr	r3, [r7, #8]
 8001eea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001eec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d102      	bne.n	8001efa <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	4618      	mov	r0, r3
 8001f00:	f003 f83f 	bl	8004f82 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	603b      	str	r3, [r7, #0]
 8001f0a:	687e      	ldr	r6, [r7, #4]
 8001f0c:	466d      	mov	r5, sp
 8001f0e:	f106 0410 	add.w	r4, r6, #16
 8001f12:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f14:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f16:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f18:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f1a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001f1e:	e885 0003 	stmia.w	r5, {r0, r1}
 8001f22:	1d33      	adds	r3, r6, #4
 8001f24:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001f26:	6838      	ldr	r0, [r7, #0]
 8001f28:	f002 ff17 	bl	8004d5a <USB_CoreInit>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d005      	beq.n	8001f3e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2202      	movs	r2, #2
 8001f36:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	e0d0      	b.n	80020e0 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	2100      	movs	r1, #0
 8001f44:	4618      	mov	r0, r3
 8001f46:	f003 f82d 	bl	8004fa4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	73fb      	strb	r3, [r7, #15]
 8001f4e:	e04a      	b.n	8001fe6 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001f50:	7bfa      	ldrb	r2, [r7, #15]
 8001f52:	6879      	ldr	r1, [r7, #4]
 8001f54:	4613      	mov	r3, r2
 8001f56:	00db      	lsls	r3, r3, #3
 8001f58:	4413      	add	r3, r2
 8001f5a:	009b      	lsls	r3, r3, #2
 8001f5c:	440b      	add	r3, r1
 8001f5e:	333d      	adds	r3, #61	; 0x3d
 8001f60:	2201      	movs	r2, #1
 8001f62:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001f64:	7bfa      	ldrb	r2, [r7, #15]
 8001f66:	6879      	ldr	r1, [r7, #4]
 8001f68:	4613      	mov	r3, r2
 8001f6a:	00db      	lsls	r3, r3, #3
 8001f6c:	4413      	add	r3, r2
 8001f6e:	009b      	lsls	r3, r3, #2
 8001f70:	440b      	add	r3, r1
 8001f72:	333c      	adds	r3, #60	; 0x3c
 8001f74:	7bfa      	ldrb	r2, [r7, #15]
 8001f76:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001f78:	7bfa      	ldrb	r2, [r7, #15]
 8001f7a:	7bfb      	ldrb	r3, [r7, #15]
 8001f7c:	b298      	uxth	r0, r3
 8001f7e:	6879      	ldr	r1, [r7, #4]
 8001f80:	4613      	mov	r3, r2
 8001f82:	00db      	lsls	r3, r3, #3
 8001f84:	4413      	add	r3, r2
 8001f86:	009b      	lsls	r3, r3, #2
 8001f88:	440b      	add	r3, r1
 8001f8a:	3344      	adds	r3, #68	; 0x44
 8001f8c:	4602      	mov	r2, r0
 8001f8e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001f90:	7bfa      	ldrb	r2, [r7, #15]
 8001f92:	6879      	ldr	r1, [r7, #4]
 8001f94:	4613      	mov	r3, r2
 8001f96:	00db      	lsls	r3, r3, #3
 8001f98:	4413      	add	r3, r2
 8001f9a:	009b      	lsls	r3, r3, #2
 8001f9c:	440b      	add	r3, r1
 8001f9e:	3340      	adds	r3, #64	; 0x40
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001fa4:	7bfa      	ldrb	r2, [r7, #15]
 8001fa6:	6879      	ldr	r1, [r7, #4]
 8001fa8:	4613      	mov	r3, r2
 8001faa:	00db      	lsls	r3, r3, #3
 8001fac:	4413      	add	r3, r2
 8001fae:	009b      	lsls	r3, r3, #2
 8001fb0:	440b      	add	r3, r1
 8001fb2:	3348      	adds	r3, #72	; 0x48
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001fb8:	7bfa      	ldrb	r2, [r7, #15]
 8001fba:	6879      	ldr	r1, [r7, #4]
 8001fbc:	4613      	mov	r3, r2
 8001fbe:	00db      	lsls	r3, r3, #3
 8001fc0:	4413      	add	r3, r2
 8001fc2:	009b      	lsls	r3, r3, #2
 8001fc4:	440b      	add	r3, r1
 8001fc6:	334c      	adds	r3, #76	; 0x4c
 8001fc8:	2200      	movs	r2, #0
 8001fca:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001fcc:	7bfa      	ldrb	r2, [r7, #15]
 8001fce:	6879      	ldr	r1, [r7, #4]
 8001fd0:	4613      	mov	r3, r2
 8001fd2:	00db      	lsls	r3, r3, #3
 8001fd4:	4413      	add	r3, r2
 8001fd6:	009b      	lsls	r3, r3, #2
 8001fd8:	440b      	add	r3, r1
 8001fda:	3354      	adds	r3, #84	; 0x54
 8001fdc:	2200      	movs	r2, #0
 8001fde:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001fe0:	7bfb      	ldrb	r3, [r7, #15]
 8001fe2:	3301      	adds	r3, #1
 8001fe4:	73fb      	strb	r3, [r7, #15]
 8001fe6:	7bfa      	ldrb	r2, [r7, #15]
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	429a      	cmp	r2, r3
 8001fee:	d3af      	bcc.n	8001f50 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	73fb      	strb	r3, [r7, #15]
 8001ff4:	e044      	b.n	8002080 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001ff6:	7bfa      	ldrb	r2, [r7, #15]
 8001ff8:	6879      	ldr	r1, [r7, #4]
 8001ffa:	4613      	mov	r3, r2
 8001ffc:	00db      	lsls	r3, r3, #3
 8001ffe:	4413      	add	r3, r2
 8002000:	009b      	lsls	r3, r3, #2
 8002002:	440b      	add	r3, r1
 8002004:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002008:	2200      	movs	r2, #0
 800200a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800200c:	7bfa      	ldrb	r2, [r7, #15]
 800200e:	6879      	ldr	r1, [r7, #4]
 8002010:	4613      	mov	r3, r2
 8002012:	00db      	lsls	r3, r3, #3
 8002014:	4413      	add	r3, r2
 8002016:	009b      	lsls	r3, r3, #2
 8002018:	440b      	add	r3, r1
 800201a:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800201e:	7bfa      	ldrb	r2, [r7, #15]
 8002020:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002022:	7bfa      	ldrb	r2, [r7, #15]
 8002024:	6879      	ldr	r1, [r7, #4]
 8002026:	4613      	mov	r3, r2
 8002028:	00db      	lsls	r3, r3, #3
 800202a:	4413      	add	r3, r2
 800202c:	009b      	lsls	r3, r3, #2
 800202e:	440b      	add	r3, r1
 8002030:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002034:	2200      	movs	r2, #0
 8002036:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002038:	7bfa      	ldrb	r2, [r7, #15]
 800203a:	6879      	ldr	r1, [r7, #4]
 800203c:	4613      	mov	r3, r2
 800203e:	00db      	lsls	r3, r3, #3
 8002040:	4413      	add	r3, r2
 8002042:	009b      	lsls	r3, r3, #2
 8002044:	440b      	add	r3, r1
 8002046:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800204a:	2200      	movs	r2, #0
 800204c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800204e:	7bfa      	ldrb	r2, [r7, #15]
 8002050:	6879      	ldr	r1, [r7, #4]
 8002052:	4613      	mov	r3, r2
 8002054:	00db      	lsls	r3, r3, #3
 8002056:	4413      	add	r3, r2
 8002058:	009b      	lsls	r3, r3, #2
 800205a:	440b      	add	r3, r1
 800205c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002060:	2200      	movs	r2, #0
 8002062:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002064:	7bfa      	ldrb	r2, [r7, #15]
 8002066:	6879      	ldr	r1, [r7, #4]
 8002068:	4613      	mov	r3, r2
 800206a:	00db      	lsls	r3, r3, #3
 800206c:	4413      	add	r3, r2
 800206e:	009b      	lsls	r3, r3, #2
 8002070:	440b      	add	r3, r1
 8002072:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002076:	2200      	movs	r2, #0
 8002078:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800207a:	7bfb      	ldrb	r3, [r7, #15]
 800207c:	3301      	adds	r3, #1
 800207e:	73fb      	strb	r3, [r7, #15]
 8002080:	7bfa      	ldrb	r2, [r7, #15]
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	685b      	ldr	r3, [r3, #4]
 8002086:	429a      	cmp	r2, r3
 8002088:	d3b5      	bcc.n	8001ff6 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	603b      	str	r3, [r7, #0]
 8002090:	687e      	ldr	r6, [r7, #4]
 8002092:	466d      	mov	r5, sp
 8002094:	f106 0410 	add.w	r4, r6, #16
 8002098:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800209a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800209c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800209e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80020a0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80020a4:	e885 0003 	stmia.w	r5, {r0, r1}
 80020a8:	1d33      	adds	r3, r6, #4
 80020aa:	cb0e      	ldmia	r3, {r1, r2, r3}
 80020ac:	6838      	ldr	r0, [r7, #0]
 80020ae:	f002 ffc5 	bl	800503c <USB_DevInit>
 80020b2:	4603      	mov	r3, r0
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d005      	beq.n	80020c4 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2202      	movs	r2, #2
 80020bc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80020c0:	2301      	movs	r3, #1
 80020c2:	e00d      	b.n	80020e0 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2200      	movs	r2, #0
 80020c8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2201      	movs	r2, #1
 80020d0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4618      	mov	r0, r3
 80020da:	f004 f914 	bl	8006306 <USB_DevDisconnect>

  return HAL_OK;
 80020de:	2300      	movs	r3, #0
}
 80020e0:	4618      	mov	r0, r3
 80020e2:	3714      	adds	r7, #20
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080020e8 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b084      	sub	sp, #16
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80020fc:	2b01      	cmp	r3, #1
 80020fe:	d101      	bne.n	8002104 <HAL_PCD_Start+0x1c>
 8002100:	2302      	movs	r3, #2
 8002102:	e020      	b.n	8002146 <HAL_PCD_Start+0x5e>
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2201      	movs	r2, #1
 8002108:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002110:	2b01      	cmp	r3, #1
 8002112:	d109      	bne.n	8002128 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002118:	2b01      	cmp	r3, #1
 800211a:	d005      	beq.n	8002128 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002120:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4618      	mov	r0, r3
 800212e:	f002 ff17 	bl	8004f60 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	4618      	mov	r0, r3
 8002138:	f004 f8c4 	bl	80062c4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2200      	movs	r2, #0
 8002140:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002144:	2300      	movs	r3, #0
}
 8002146:	4618      	mov	r0, r3
 8002148:	3710      	adds	r7, #16
 800214a:	46bd      	mov	sp, r7
 800214c:	bd80      	pop	{r7, pc}

0800214e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800214e:	b590      	push	{r4, r7, lr}
 8002150:	b08d      	sub	sp, #52	; 0x34
 8002152:	af00      	add	r7, sp, #0
 8002154:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800215c:	6a3b      	ldr	r3, [r7, #32]
 800215e:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4618      	mov	r0, r3
 8002166:	f004 f982 	bl	800646e <USB_GetMode>
 800216a:	4603      	mov	r3, r0
 800216c:	2b00      	cmp	r3, #0
 800216e:	f040 848a 	bne.w	8002a86 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	4618      	mov	r0, r3
 8002178:	f004 f8e6 	bl	8006348 <USB_ReadInterrupts>
 800217c:	4603      	mov	r3, r0
 800217e:	2b00      	cmp	r3, #0
 8002180:	f000 8480 	beq.w	8002a84 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002184:	69fb      	ldr	r3, [r7, #28]
 8002186:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800218a:	689b      	ldr	r3, [r3, #8]
 800218c:	0a1b      	lsrs	r3, r3, #8
 800218e:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4618      	mov	r0, r3
 800219e:	f004 f8d3 	bl	8006348 <USB_ReadInterrupts>
 80021a2:	4603      	mov	r3, r0
 80021a4:	f003 0302 	and.w	r3, r3, #2
 80021a8:	2b02      	cmp	r3, #2
 80021aa:	d107      	bne.n	80021bc <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	695a      	ldr	r2, [r3, #20]
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f002 0202 	and.w	r2, r2, #2
 80021ba:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4618      	mov	r0, r3
 80021c2:	f004 f8c1 	bl	8006348 <USB_ReadInterrupts>
 80021c6:	4603      	mov	r3, r0
 80021c8:	f003 0310 	and.w	r3, r3, #16
 80021cc:	2b10      	cmp	r3, #16
 80021ce:	d161      	bne.n	8002294 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	699a      	ldr	r2, [r3, #24]
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f022 0210 	bic.w	r2, r2, #16
 80021de:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80021e0:	6a3b      	ldr	r3, [r7, #32]
 80021e2:	6a1b      	ldr	r3, [r3, #32]
 80021e4:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80021e6:	69bb      	ldr	r3, [r7, #24]
 80021e8:	f003 020f 	and.w	r2, r3, #15
 80021ec:	4613      	mov	r3, r2
 80021ee:	00db      	lsls	r3, r3, #3
 80021f0:	4413      	add	r3, r2
 80021f2:	009b      	lsls	r3, r3, #2
 80021f4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80021f8:	687a      	ldr	r2, [r7, #4]
 80021fa:	4413      	add	r3, r2
 80021fc:	3304      	adds	r3, #4
 80021fe:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002200:	69bb      	ldr	r3, [r7, #24]
 8002202:	0c5b      	lsrs	r3, r3, #17
 8002204:	f003 030f 	and.w	r3, r3, #15
 8002208:	2b02      	cmp	r3, #2
 800220a:	d124      	bne.n	8002256 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800220c:	69ba      	ldr	r2, [r7, #24]
 800220e:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002212:	4013      	ands	r3, r2
 8002214:	2b00      	cmp	r3, #0
 8002216:	d035      	beq.n	8002284 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002218:	697b      	ldr	r3, [r7, #20]
 800221a:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800221c:	69bb      	ldr	r3, [r7, #24]
 800221e:	091b      	lsrs	r3, r3, #4
 8002220:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002222:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002226:	b29b      	uxth	r3, r3
 8002228:	461a      	mov	r2, r3
 800222a:	6a38      	ldr	r0, [r7, #32]
 800222c:	f003 fef8 	bl	8006020 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002230:	697b      	ldr	r3, [r7, #20]
 8002232:	691a      	ldr	r2, [r3, #16]
 8002234:	69bb      	ldr	r3, [r7, #24]
 8002236:	091b      	lsrs	r3, r3, #4
 8002238:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800223c:	441a      	add	r2, r3
 800223e:	697b      	ldr	r3, [r7, #20]
 8002240:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002242:	697b      	ldr	r3, [r7, #20]
 8002244:	6a1a      	ldr	r2, [r3, #32]
 8002246:	69bb      	ldr	r3, [r7, #24]
 8002248:	091b      	lsrs	r3, r3, #4
 800224a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800224e:	441a      	add	r2, r3
 8002250:	697b      	ldr	r3, [r7, #20]
 8002252:	621a      	str	r2, [r3, #32]
 8002254:	e016      	b.n	8002284 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002256:	69bb      	ldr	r3, [r7, #24]
 8002258:	0c5b      	lsrs	r3, r3, #17
 800225a:	f003 030f 	and.w	r3, r3, #15
 800225e:	2b06      	cmp	r3, #6
 8002260:	d110      	bne.n	8002284 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002268:	2208      	movs	r2, #8
 800226a:	4619      	mov	r1, r3
 800226c:	6a38      	ldr	r0, [r7, #32]
 800226e:	f003 fed7 	bl	8006020 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002272:	697b      	ldr	r3, [r7, #20]
 8002274:	6a1a      	ldr	r2, [r3, #32]
 8002276:	69bb      	ldr	r3, [r7, #24]
 8002278:	091b      	lsrs	r3, r3, #4
 800227a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800227e:	441a      	add	r2, r3
 8002280:	697b      	ldr	r3, [r7, #20]
 8002282:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	699a      	ldr	r2, [r3, #24]
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f042 0210 	orr.w	r2, r2, #16
 8002292:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	4618      	mov	r0, r3
 800229a:	f004 f855 	bl	8006348 <USB_ReadInterrupts>
 800229e:	4603      	mov	r3, r0
 80022a0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80022a4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80022a8:	f040 80a7 	bne.w	80023fa <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80022ac:	2300      	movs	r3, #0
 80022ae:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	4618      	mov	r0, r3
 80022b6:	f004 f85a 	bl	800636e <USB_ReadDevAllOutEpInterrupt>
 80022ba:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80022bc:	e099      	b.n	80023f2 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80022be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022c0:	f003 0301 	and.w	r3, r3, #1
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	f000 808e 	beq.w	80023e6 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022d0:	b2d2      	uxtb	r2, r2
 80022d2:	4611      	mov	r1, r2
 80022d4:	4618      	mov	r0, r3
 80022d6:	f004 f87e 	bl	80063d6 <USB_ReadDevOutEPInterrupt>
 80022da:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80022dc:	693b      	ldr	r3, [r7, #16]
 80022de:	f003 0301 	and.w	r3, r3, #1
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d00c      	beq.n	8002300 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80022e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022e8:	015a      	lsls	r2, r3, #5
 80022ea:	69fb      	ldr	r3, [r7, #28]
 80022ec:	4413      	add	r3, r2
 80022ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80022f2:	461a      	mov	r2, r3
 80022f4:	2301      	movs	r3, #1
 80022f6:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80022f8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80022fa:	6878      	ldr	r0, [r7, #4]
 80022fc:	f000 fec2 	bl	8003084 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002300:	693b      	ldr	r3, [r7, #16]
 8002302:	f003 0308 	and.w	r3, r3, #8
 8002306:	2b00      	cmp	r3, #0
 8002308:	d00c      	beq.n	8002324 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800230a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800230c:	015a      	lsls	r2, r3, #5
 800230e:	69fb      	ldr	r3, [r7, #28]
 8002310:	4413      	add	r3, r2
 8002312:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002316:	461a      	mov	r2, r3
 8002318:	2308      	movs	r3, #8
 800231a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800231c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800231e:	6878      	ldr	r0, [r7, #4]
 8002320:	f000 ff98 	bl	8003254 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002324:	693b      	ldr	r3, [r7, #16]
 8002326:	f003 0310 	and.w	r3, r3, #16
 800232a:	2b00      	cmp	r3, #0
 800232c:	d008      	beq.n	8002340 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800232e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002330:	015a      	lsls	r2, r3, #5
 8002332:	69fb      	ldr	r3, [r7, #28]
 8002334:	4413      	add	r3, r2
 8002336:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800233a:	461a      	mov	r2, r3
 800233c:	2310      	movs	r3, #16
 800233e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002340:	693b      	ldr	r3, [r7, #16]
 8002342:	f003 0302 	and.w	r3, r3, #2
 8002346:	2b00      	cmp	r3, #0
 8002348:	d030      	beq.n	80023ac <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800234a:	6a3b      	ldr	r3, [r7, #32]
 800234c:	695b      	ldr	r3, [r3, #20]
 800234e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002352:	2b80      	cmp	r3, #128	; 0x80
 8002354:	d109      	bne.n	800236a <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002356:	69fb      	ldr	r3, [r7, #28]
 8002358:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	69fa      	ldr	r2, [r7, #28]
 8002360:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002364:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002368:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800236a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800236c:	4613      	mov	r3, r2
 800236e:	00db      	lsls	r3, r3, #3
 8002370:	4413      	add	r3, r2
 8002372:	009b      	lsls	r3, r3, #2
 8002374:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002378:	687a      	ldr	r2, [r7, #4]
 800237a:	4413      	add	r3, r2
 800237c:	3304      	adds	r3, #4
 800237e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002380:	697b      	ldr	r3, [r7, #20]
 8002382:	78db      	ldrb	r3, [r3, #3]
 8002384:	2b01      	cmp	r3, #1
 8002386:	d108      	bne.n	800239a <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002388:	697b      	ldr	r3, [r7, #20]
 800238a:	2200      	movs	r2, #0
 800238c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800238e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002390:	b2db      	uxtb	r3, r3
 8002392:	4619      	mov	r1, r3
 8002394:	6878      	ldr	r0, [r7, #4]
 8002396:	f006 fc01 	bl	8008b9c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800239a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800239c:	015a      	lsls	r2, r3, #5
 800239e:	69fb      	ldr	r3, [r7, #28]
 80023a0:	4413      	add	r3, r2
 80023a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80023a6:	461a      	mov	r2, r3
 80023a8:	2302      	movs	r3, #2
 80023aa:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80023ac:	693b      	ldr	r3, [r7, #16]
 80023ae:	f003 0320 	and.w	r3, r3, #32
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d008      	beq.n	80023c8 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80023b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023b8:	015a      	lsls	r2, r3, #5
 80023ba:	69fb      	ldr	r3, [r7, #28]
 80023bc:	4413      	add	r3, r2
 80023be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80023c2:	461a      	mov	r2, r3
 80023c4:	2320      	movs	r3, #32
 80023c6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80023c8:	693b      	ldr	r3, [r7, #16]
 80023ca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d009      	beq.n	80023e6 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80023d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023d4:	015a      	lsls	r2, r3, #5
 80023d6:	69fb      	ldr	r3, [r7, #28]
 80023d8:	4413      	add	r3, r2
 80023da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80023de:	461a      	mov	r2, r3
 80023e0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80023e4:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80023e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023e8:	3301      	adds	r3, #1
 80023ea:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80023ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023ee:	085b      	lsrs	r3, r3, #1
 80023f0:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80023f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	f47f af62 	bne.w	80022be <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	4618      	mov	r0, r3
 8002400:	f003 ffa2 	bl	8006348 <USB_ReadInterrupts>
 8002404:	4603      	mov	r3, r0
 8002406:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800240a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800240e:	f040 80db 	bne.w	80025c8 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4618      	mov	r0, r3
 8002418:	f003 ffc3 	bl	80063a2 <USB_ReadDevAllInEpInterrupt>
 800241c:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800241e:	2300      	movs	r3, #0
 8002420:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002422:	e0cd      	b.n	80025c0 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002424:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002426:	f003 0301 	and.w	r3, r3, #1
 800242a:	2b00      	cmp	r3, #0
 800242c:	f000 80c2 	beq.w	80025b4 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002436:	b2d2      	uxtb	r2, r2
 8002438:	4611      	mov	r1, r2
 800243a:	4618      	mov	r0, r3
 800243c:	f003 ffe9 	bl	8006412 <USB_ReadDevInEPInterrupt>
 8002440:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002442:	693b      	ldr	r3, [r7, #16]
 8002444:	f003 0301 	and.w	r3, r3, #1
 8002448:	2b00      	cmp	r3, #0
 800244a:	d057      	beq.n	80024fc <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800244c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800244e:	f003 030f 	and.w	r3, r3, #15
 8002452:	2201      	movs	r2, #1
 8002454:	fa02 f303 	lsl.w	r3, r2, r3
 8002458:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800245a:	69fb      	ldr	r3, [r7, #28]
 800245c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002460:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	43db      	mvns	r3, r3
 8002466:	69f9      	ldr	r1, [r7, #28]
 8002468:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800246c:	4013      	ands	r3, r2
 800246e:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002472:	015a      	lsls	r2, r3, #5
 8002474:	69fb      	ldr	r3, [r7, #28]
 8002476:	4413      	add	r3, r2
 8002478:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800247c:	461a      	mov	r2, r3
 800247e:	2301      	movs	r3, #1
 8002480:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	691b      	ldr	r3, [r3, #16]
 8002486:	2b01      	cmp	r3, #1
 8002488:	d132      	bne.n	80024f0 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800248a:	6879      	ldr	r1, [r7, #4]
 800248c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800248e:	4613      	mov	r3, r2
 8002490:	00db      	lsls	r3, r3, #3
 8002492:	4413      	add	r3, r2
 8002494:	009b      	lsls	r3, r3, #2
 8002496:	440b      	add	r3, r1
 8002498:	334c      	adds	r3, #76	; 0x4c
 800249a:	6819      	ldr	r1, [r3, #0]
 800249c:	6878      	ldr	r0, [r7, #4]
 800249e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024a0:	4613      	mov	r3, r2
 80024a2:	00db      	lsls	r3, r3, #3
 80024a4:	4413      	add	r3, r2
 80024a6:	009b      	lsls	r3, r3, #2
 80024a8:	4403      	add	r3, r0
 80024aa:	3348      	adds	r3, #72	; 0x48
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	4419      	add	r1, r3
 80024b0:	6878      	ldr	r0, [r7, #4]
 80024b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024b4:	4613      	mov	r3, r2
 80024b6:	00db      	lsls	r3, r3, #3
 80024b8:	4413      	add	r3, r2
 80024ba:	009b      	lsls	r3, r3, #2
 80024bc:	4403      	add	r3, r0
 80024be:	334c      	adds	r3, #76	; 0x4c
 80024c0:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80024c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d113      	bne.n	80024f0 <HAL_PCD_IRQHandler+0x3a2>
 80024c8:	6879      	ldr	r1, [r7, #4]
 80024ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024cc:	4613      	mov	r3, r2
 80024ce:	00db      	lsls	r3, r3, #3
 80024d0:	4413      	add	r3, r2
 80024d2:	009b      	lsls	r3, r3, #2
 80024d4:	440b      	add	r3, r1
 80024d6:	3354      	adds	r3, #84	; 0x54
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d108      	bne.n	80024f0 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6818      	ldr	r0, [r3, #0]
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80024e8:	461a      	mov	r2, r3
 80024ea:	2101      	movs	r1, #1
 80024ec:	f003 fff0 	bl	80064d0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80024f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024f2:	b2db      	uxtb	r3, r3
 80024f4:	4619      	mov	r1, r3
 80024f6:	6878      	ldr	r0, [r7, #4]
 80024f8:	f006 facb 	bl	8008a92 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80024fc:	693b      	ldr	r3, [r7, #16]
 80024fe:	f003 0308 	and.w	r3, r3, #8
 8002502:	2b00      	cmp	r3, #0
 8002504:	d008      	beq.n	8002518 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002508:	015a      	lsls	r2, r3, #5
 800250a:	69fb      	ldr	r3, [r7, #28]
 800250c:	4413      	add	r3, r2
 800250e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002512:	461a      	mov	r2, r3
 8002514:	2308      	movs	r3, #8
 8002516:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002518:	693b      	ldr	r3, [r7, #16]
 800251a:	f003 0310 	and.w	r3, r3, #16
 800251e:	2b00      	cmp	r3, #0
 8002520:	d008      	beq.n	8002534 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002524:	015a      	lsls	r2, r3, #5
 8002526:	69fb      	ldr	r3, [r7, #28]
 8002528:	4413      	add	r3, r2
 800252a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800252e:	461a      	mov	r2, r3
 8002530:	2310      	movs	r3, #16
 8002532:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002534:	693b      	ldr	r3, [r7, #16]
 8002536:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800253a:	2b00      	cmp	r3, #0
 800253c:	d008      	beq.n	8002550 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800253e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002540:	015a      	lsls	r2, r3, #5
 8002542:	69fb      	ldr	r3, [r7, #28]
 8002544:	4413      	add	r3, r2
 8002546:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800254a:	461a      	mov	r2, r3
 800254c:	2340      	movs	r3, #64	; 0x40
 800254e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002550:	693b      	ldr	r3, [r7, #16]
 8002552:	f003 0302 	and.w	r3, r3, #2
 8002556:	2b00      	cmp	r3, #0
 8002558:	d023      	beq.n	80025a2 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800255a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800255c:	6a38      	ldr	r0, [r7, #32]
 800255e:	f002 fed1 	bl	8005304 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002562:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002564:	4613      	mov	r3, r2
 8002566:	00db      	lsls	r3, r3, #3
 8002568:	4413      	add	r3, r2
 800256a:	009b      	lsls	r3, r3, #2
 800256c:	3338      	adds	r3, #56	; 0x38
 800256e:	687a      	ldr	r2, [r7, #4]
 8002570:	4413      	add	r3, r2
 8002572:	3304      	adds	r3, #4
 8002574:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002576:	697b      	ldr	r3, [r7, #20]
 8002578:	78db      	ldrb	r3, [r3, #3]
 800257a:	2b01      	cmp	r3, #1
 800257c:	d108      	bne.n	8002590 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800257e:	697b      	ldr	r3, [r7, #20]
 8002580:	2200      	movs	r2, #0
 8002582:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002586:	b2db      	uxtb	r3, r3
 8002588:	4619      	mov	r1, r3
 800258a:	6878      	ldr	r0, [r7, #4]
 800258c:	f006 fb18 	bl	8008bc0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002592:	015a      	lsls	r2, r3, #5
 8002594:	69fb      	ldr	r3, [r7, #28]
 8002596:	4413      	add	r3, r2
 8002598:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800259c:	461a      	mov	r2, r3
 800259e:	2302      	movs	r3, #2
 80025a0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80025a2:	693b      	ldr	r3, [r7, #16]
 80025a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d003      	beq.n	80025b4 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80025ac:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80025ae:	6878      	ldr	r0, [r7, #4]
 80025b0:	f000 fcdb 	bl	8002f6a <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80025b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025b6:	3301      	adds	r3, #1
 80025b8:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80025ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025bc:	085b      	lsrs	r3, r3, #1
 80025be:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80025c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	f47f af2e 	bne.w	8002424 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4618      	mov	r0, r3
 80025ce:	f003 febb 	bl	8006348 <USB_ReadInterrupts>
 80025d2:	4603      	mov	r3, r0
 80025d4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80025d8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80025dc:	d122      	bne.n	8002624 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80025de:	69fb      	ldr	r3, [r7, #28]
 80025e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	69fa      	ldr	r2, [r7, #28]
 80025e8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80025ec:	f023 0301 	bic.w	r3, r3, #1
 80025f0:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80025f8:	2b01      	cmp	r3, #1
 80025fa:	d108      	bne.n	800260e <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2200      	movs	r2, #0
 8002600:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002604:	2100      	movs	r1, #0
 8002606:	6878      	ldr	r0, [r7, #4]
 8002608:	f000 fec2 	bl	8003390 <HAL_PCDEx_LPM_Callback>
 800260c:	e002      	b.n	8002614 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800260e:	6878      	ldr	r0, [r7, #4]
 8002610:	f006 fab6 	bl	8008b80 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	695a      	ldr	r2, [r3, #20]
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002622:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4618      	mov	r0, r3
 800262a:	f003 fe8d 	bl	8006348 <USB_ReadInterrupts>
 800262e:	4603      	mov	r3, r0
 8002630:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002634:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002638:	d112      	bne.n	8002660 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800263a:	69fb      	ldr	r3, [r7, #28]
 800263c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002640:	689b      	ldr	r3, [r3, #8]
 8002642:	f003 0301 	and.w	r3, r3, #1
 8002646:	2b01      	cmp	r3, #1
 8002648:	d102      	bne.n	8002650 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800264a:	6878      	ldr	r0, [r7, #4]
 800264c:	f006 fa72 	bl	8008b34 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	695a      	ldr	r2, [r3, #20]
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800265e:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4618      	mov	r0, r3
 8002666:	f003 fe6f 	bl	8006348 <USB_ReadInterrupts>
 800266a:	4603      	mov	r3, r0
 800266c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002670:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002674:	f040 80b7 	bne.w	80027e6 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002678:	69fb      	ldr	r3, [r7, #28]
 800267a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	69fa      	ldr	r2, [r7, #28]
 8002682:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002686:	f023 0301 	bic.w	r3, r3, #1
 800268a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	2110      	movs	r1, #16
 8002692:	4618      	mov	r0, r3
 8002694:	f002 fe36 	bl	8005304 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002698:	2300      	movs	r3, #0
 800269a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800269c:	e046      	b.n	800272c <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800269e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026a0:	015a      	lsls	r2, r3, #5
 80026a2:	69fb      	ldr	r3, [r7, #28]
 80026a4:	4413      	add	r3, r2
 80026a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80026aa:	461a      	mov	r2, r3
 80026ac:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80026b0:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80026b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026b4:	015a      	lsls	r2, r3, #5
 80026b6:	69fb      	ldr	r3, [r7, #28]
 80026b8:	4413      	add	r3, r2
 80026ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80026c2:	0151      	lsls	r1, r2, #5
 80026c4:	69fa      	ldr	r2, [r7, #28]
 80026c6:	440a      	add	r2, r1
 80026c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80026cc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80026d0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80026d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026d4:	015a      	lsls	r2, r3, #5
 80026d6:	69fb      	ldr	r3, [r7, #28]
 80026d8:	4413      	add	r3, r2
 80026da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80026de:	461a      	mov	r2, r3
 80026e0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80026e4:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80026e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026e8:	015a      	lsls	r2, r3, #5
 80026ea:	69fb      	ldr	r3, [r7, #28]
 80026ec:	4413      	add	r3, r2
 80026ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80026f6:	0151      	lsls	r1, r2, #5
 80026f8:	69fa      	ldr	r2, [r7, #28]
 80026fa:	440a      	add	r2, r1
 80026fc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002700:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002704:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002706:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002708:	015a      	lsls	r2, r3, #5
 800270a:	69fb      	ldr	r3, [r7, #28]
 800270c:	4413      	add	r3, r2
 800270e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002716:	0151      	lsls	r1, r2, #5
 8002718:	69fa      	ldr	r2, [r7, #28]
 800271a:	440a      	add	r2, r1
 800271c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002720:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002724:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002726:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002728:	3301      	adds	r3, #1
 800272a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002732:	429a      	cmp	r2, r3
 8002734:	d3b3      	bcc.n	800269e <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002736:	69fb      	ldr	r3, [r7, #28]
 8002738:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800273c:	69db      	ldr	r3, [r3, #28]
 800273e:	69fa      	ldr	r2, [r7, #28]
 8002740:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002744:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002748:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800274e:	2b00      	cmp	r3, #0
 8002750:	d016      	beq.n	8002780 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002752:	69fb      	ldr	r3, [r7, #28]
 8002754:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002758:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800275c:	69fa      	ldr	r2, [r7, #28]
 800275e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002762:	f043 030b 	orr.w	r3, r3, #11
 8002766:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800276a:	69fb      	ldr	r3, [r7, #28]
 800276c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002770:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002772:	69fa      	ldr	r2, [r7, #28]
 8002774:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002778:	f043 030b 	orr.w	r3, r3, #11
 800277c:	6453      	str	r3, [r2, #68]	; 0x44
 800277e:	e015      	b.n	80027ac <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002780:	69fb      	ldr	r3, [r7, #28]
 8002782:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002786:	695b      	ldr	r3, [r3, #20]
 8002788:	69fa      	ldr	r2, [r7, #28]
 800278a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800278e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002792:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002796:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002798:	69fb      	ldr	r3, [r7, #28]
 800279a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800279e:	691b      	ldr	r3, [r3, #16]
 80027a0:	69fa      	ldr	r2, [r7, #28]
 80027a2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80027a6:	f043 030b 	orr.w	r3, r3, #11
 80027aa:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80027ac:	69fb      	ldr	r3, [r7, #28]
 80027ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	69fa      	ldr	r2, [r7, #28]
 80027b6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80027ba:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80027be:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6818      	ldr	r0, [r3, #0]
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	691b      	ldr	r3, [r3, #16]
 80027c8:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80027d0:	461a      	mov	r2, r3
 80027d2:	f003 fe7d 	bl	80064d0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	695a      	ldr	r2, [r3, #20]
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80027e4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	4618      	mov	r0, r3
 80027ec:	f003 fdac 	bl	8006348 <USB_ReadInterrupts>
 80027f0:	4603      	mov	r3, r0
 80027f2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80027f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80027fa:	d124      	bne.n	8002846 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4618      	mov	r0, r3
 8002802:	f003 fe42 	bl	800648a <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	4618      	mov	r0, r3
 800280c:	f002 fdf7 	bl	80053fe <USB_GetDevSpeed>
 8002810:	4603      	mov	r3, r0
 8002812:	461a      	mov	r2, r3
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681c      	ldr	r4, [r3, #0]
 800281c:	f001 f9e8 	bl	8003bf0 <HAL_RCC_GetHCLKFreq>
 8002820:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002826:	b2db      	uxtb	r3, r3
 8002828:	461a      	mov	r2, r3
 800282a:	4620      	mov	r0, r4
 800282c:	f002 faf6 	bl	8004e1c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002830:	6878      	ldr	r0, [r7, #4]
 8002832:	f006 f956 	bl	8008ae2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	695a      	ldr	r2, [r3, #20]
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002844:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	4618      	mov	r0, r3
 800284c:	f003 fd7c 	bl	8006348 <USB_ReadInterrupts>
 8002850:	4603      	mov	r3, r0
 8002852:	f003 0308 	and.w	r3, r3, #8
 8002856:	2b08      	cmp	r3, #8
 8002858:	d10a      	bne.n	8002870 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800285a:	6878      	ldr	r0, [r7, #4]
 800285c:	f006 f933 	bl	8008ac6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	695a      	ldr	r2, [r3, #20]
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f002 0208 	and.w	r2, r2, #8
 800286e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4618      	mov	r0, r3
 8002876:	f003 fd67 	bl	8006348 <USB_ReadInterrupts>
 800287a:	4603      	mov	r3, r0
 800287c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002880:	2b80      	cmp	r3, #128	; 0x80
 8002882:	d122      	bne.n	80028ca <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002884:	6a3b      	ldr	r3, [r7, #32]
 8002886:	699b      	ldr	r3, [r3, #24]
 8002888:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800288c:	6a3b      	ldr	r3, [r7, #32]
 800288e:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002890:	2301      	movs	r3, #1
 8002892:	627b      	str	r3, [r7, #36]	; 0x24
 8002894:	e014      	b.n	80028c0 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002896:	6879      	ldr	r1, [r7, #4]
 8002898:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800289a:	4613      	mov	r3, r2
 800289c:	00db      	lsls	r3, r3, #3
 800289e:	4413      	add	r3, r2
 80028a0:	009b      	lsls	r3, r3, #2
 80028a2:	440b      	add	r3, r1
 80028a4:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80028a8:	781b      	ldrb	r3, [r3, #0]
 80028aa:	2b01      	cmp	r3, #1
 80028ac:	d105      	bne.n	80028ba <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80028ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028b0:	b2db      	uxtb	r3, r3
 80028b2:	4619      	mov	r1, r3
 80028b4:	6878      	ldr	r0, [r7, #4]
 80028b6:	f000 fb27 	bl	8002f08 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80028ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028bc:	3301      	adds	r3, #1
 80028be:	627b      	str	r3, [r7, #36]	; 0x24
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	685b      	ldr	r3, [r3, #4]
 80028c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028c6:	429a      	cmp	r2, r3
 80028c8:	d3e5      	bcc.n	8002896 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	4618      	mov	r0, r3
 80028d0:	f003 fd3a 	bl	8006348 <USB_ReadInterrupts>
 80028d4:	4603      	mov	r3, r0
 80028d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80028da:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80028de:	d13b      	bne.n	8002958 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80028e0:	2301      	movs	r3, #1
 80028e2:	627b      	str	r3, [r7, #36]	; 0x24
 80028e4:	e02b      	b.n	800293e <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80028e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028e8:	015a      	lsls	r2, r3, #5
 80028ea:	69fb      	ldr	r3, [r7, #28]
 80028ec:	4413      	add	r3, r2
 80028ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80028f6:	6879      	ldr	r1, [r7, #4]
 80028f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028fa:	4613      	mov	r3, r2
 80028fc:	00db      	lsls	r3, r3, #3
 80028fe:	4413      	add	r3, r2
 8002900:	009b      	lsls	r3, r3, #2
 8002902:	440b      	add	r3, r1
 8002904:	3340      	adds	r3, #64	; 0x40
 8002906:	781b      	ldrb	r3, [r3, #0]
 8002908:	2b01      	cmp	r3, #1
 800290a:	d115      	bne.n	8002938 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800290c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800290e:	2b00      	cmp	r3, #0
 8002910:	da12      	bge.n	8002938 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002912:	6879      	ldr	r1, [r7, #4]
 8002914:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002916:	4613      	mov	r3, r2
 8002918:	00db      	lsls	r3, r3, #3
 800291a:	4413      	add	r3, r2
 800291c:	009b      	lsls	r3, r3, #2
 800291e:	440b      	add	r3, r1
 8002920:	333f      	adds	r3, #63	; 0x3f
 8002922:	2201      	movs	r2, #1
 8002924:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002928:	b2db      	uxtb	r3, r3
 800292a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800292e:	b2db      	uxtb	r3, r3
 8002930:	4619      	mov	r1, r3
 8002932:	6878      	ldr	r0, [r7, #4]
 8002934:	f000 fae8 	bl	8002f08 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800293a:	3301      	adds	r3, #1
 800293c:	627b      	str	r3, [r7, #36]	; 0x24
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002944:	429a      	cmp	r2, r3
 8002946:	d3ce      	bcc.n	80028e6 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	695a      	ldr	r2, [r3, #20]
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002956:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4618      	mov	r0, r3
 800295e:	f003 fcf3 	bl	8006348 <USB_ReadInterrupts>
 8002962:	4603      	mov	r3, r0
 8002964:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002968:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800296c:	d155      	bne.n	8002a1a <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800296e:	2301      	movs	r3, #1
 8002970:	627b      	str	r3, [r7, #36]	; 0x24
 8002972:	e045      	b.n	8002a00 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002976:	015a      	lsls	r2, r3, #5
 8002978:	69fb      	ldr	r3, [r7, #28]
 800297a:	4413      	add	r3, r2
 800297c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002984:	6879      	ldr	r1, [r7, #4]
 8002986:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002988:	4613      	mov	r3, r2
 800298a:	00db      	lsls	r3, r3, #3
 800298c:	4413      	add	r3, r2
 800298e:	009b      	lsls	r3, r3, #2
 8002990:	440b      	add	r3, r1
 8002992:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002996:	781b      	ldrb	r3, [r3, #0]
 8002998:	2b01      	cmp	r3, #1
 800299a:	d12e      	bne.n	80029fa <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800299c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800299e:	2b00      	cmp	r3, #0
 80029a0:	da2b      	bge.n	80029fa <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80029a2:	69bb      	ldr	r3, [r7, #24]
 80029a4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80029ae:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80029b2:	429a      	cmp	r2, r3
 80029b4:	d121      	bne.n	80029fa <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80029b6:	6879      	ldr	r1, [r7, #4]
 80029b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029ba:	4613      	mov	r3, r2
 80029bc:	00db      	lsls	r3, r3, #3
 80029be:	4413      	add	r3, r2
 80029c0:	009b      	lsls	r3, r3, #2
 80029c2:	440b      	add	r3, r1
 80029c4:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80029c8:	2201      	movs	r2, #1
 80029ca:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80029cc:	6a3b      	ldr	r3, [r7, #32]
 80029ce:	699b      	ldr	r3, [r3, #24]
 80029d0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80029d4:	6a3b      	ldr	r3, [r7, #32]
 80029d6:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80029d8:	6a3b      	ldr	r3, [r7, #32]
 80029da:	695b      	ldr	r3, [r3, #20]
 80029dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d10a      	bne.n	80029fa <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80029e4:	69fb      	ldr	r3, [r7, #28]
 80029e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80029ea:	685b      	ldr	r3, [r3, #4]
 80029ec:	69fa      	ldr	r2, [r7, #28]
 80029ee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80029f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80029f6:	6053      	str	r3, [r2, #4]
            break;
 80029f8:	e007      	b.n	8002a0a <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80029fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029fc:	3301      	adds	r3, #1
 80029fe:	627b      	str	r3, [r7, #36]	; 0x24
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	685b      	ldr	r3, [r3, #4]
 8002a04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a06:	429a      	cmp	r2, r3
 8002a08:	d3b4      	bcc.n	8002974 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	695a      	ldr	r2, [r3, #20]
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002a18:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	4618      	mov	r0, r3
 8002a20:	f003 fc92 	bl	8006348 <USB_ReadInterrupts>
 8002a24:	4603      	mov	r3, r0
 8002a26:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002a2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a2e:	d10a      	bne.n	8002a46 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002a30:	6878      	ldr	r0, [r7, #4]
 8002a32:	f006 f8d7 	bl	8008be4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	695a      	ldr	r2, [r3, #20]
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002a44:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	f003 fc7c 	bl	8006348 <USB_ReadInterrupts>
 8002a50:	4603      	mov	r3, r0
 8002a52:	f003 0304 	and.w	r3, r3, #4
 8002a56:	2b04      	cmp	r3, #4
 8002a58:	d115      	bne.n	8002a86 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	685b      	ldr	r3, [r3, #4]
 8002a60:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002a62:	69bb      	ldr	r3, [r7, #24]
 8002a64:	f003 0304 	and.w	r3, r3, #4
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d002      	beq.n	8002a72 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002a6c:	6878      	ldr	r0, [r7, #4]
 8002a6e:	f006 f8c7 	bl	8008c00 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	6859      	ldr	r1, [r3, #4]
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	69ba      	ldr	r2, [r7, #24]
 8002a7e:	430a      	orrs	r2, r1
 8002a80:	605a      	str	r2, [r3, #4]
 8002a82:	e000      	b.n	8002a86 <HAL_PCD_IRQHandler+0x938>
      return;
 8002a84:	bf00      	nop
    }
  }
}
 8002a86:	3734      	adds	r7, #52	; 0x34
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	bd90      	pop	{r4, r7, pc}

08002a8c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b082      	sub	sp, #8
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
 8002a94:	460b      	mov	r3, r1
 8002a96:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002a9e:	2b01      	cmp	r3, #1
 8002aa0:	d101      	bne.n	8002aa6 <HAL_PCD_SetAddress+0x1a>
 8002aa2:	2302      	movs	r3, #2
 8002aa4:	e013      	b.n	8002ace <HAL_PCD_SetAddress+0x42>
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	2201      	movs	r2, #1
 8002aaa:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	78fa      	ldrb	r2, [r7, #3]
 8002ab2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	78fa      	ldrb	r2, [r7, #3]
 8002abc:	4611      	mov	r1, r2
 8002abe:	4618      	mov	r0, r3
 8002ac0:	f003 fbda 	bl	8006278 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002acc:	2300      	movs	r3, #0
}
 8002ace:	4618      	mov	r0, r3
 8002ad0:	3708      	adds	r7, #8
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bd80      	pop	{r7, pc}

08002ad6 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002ad6:	b580      	push	{r7, lr}
 8002ad8:	b084      	sub	sp, #16
 8002ada:	af00      	add	r7, sp, #0
 8002adc:	6078      	str	r0, [r7, #4]
 8002ade:	4608      	mov	r0, r1
 8002ae0:	4611      	mov	r1, r2
 8002ae2:	461a      	mov	r2, r3
 8002ae4:	4603      	mov	r3, r0
 8002ae6:	70fb      	strb	r3, [r7, #3]
 8002ae8:	460b      	mov	r3, r1
 8002aea:	803b      	strh	r3, [r7, #0]
 8002aec:	4613      	mov	r3, r2
 8002aee:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002af0:	2300      	movs	r3, #0
 8002af2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002af4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	da0f      	bge.n	8002b1c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002afc:	78fb      	ldrb	r3, [r7, #3]
 8002afe:	f003 020f 	and.w	r2, r3, #15
 8002b02:	4613      	mov	r3, r2
 8002b04:	00db      	lsls	r3, r3, #3
 8002b06:	4413      	add	r3, r2
 8002b08:	009b      	lsls	r3, r3, #2
 8002b0a:	3338      	adds	r3, #56	; 0x38
 8002b0c:	687a      	ldr	r2, [r7, #4]
 8002b0e:	4413      	add	r3, r2
 8002b10:	3304      	adds	r3, #4
 8002b12:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	2201      	movs	r2, #1
 8002b18:	705a      	strb	r2, [r3, #1]
 8002b1a:	e00f      	b.n	8002b3c <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002b1c:	78fb      	ldrb	r3, [r7, #3]
 8002b1e:	f003 020f 	and.w	r2, r3, #15
 8002b22:	4613      	mov	r3, r2
 8002b24:	00db      	lsls	r3, r3, #3
 8002b26:	4413      	add	r3, r2
 8002b28:	009b      	lsls	r3, r3, #2
 8002b2a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002b2e:	687a      	ldr	r2, [r7, #4]
 8002b30:	4413      	add	r3, r2
 8002b32:	3304      	adds	r3, #4
 8002b34:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	2200      	movs	r2, #0
 8002b3a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002b3c:	78fb      	ldrb	r3, [r7, #3]
 8002b3e:	f003 030f 	and.w	r3, r3, #15
 8002b42:	b2da      	uxtb	r2, r3
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002b48:	883a      	ldrh	r2, [r7, #0]
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	78ba      	ldrb	r2, [r7, #2]
 8002b52:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	785b      	ldrb	r3, [r3, #1]
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d004      	beq.n	8002b66 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	781b      	ldrb	r3, [r3, #0]
 8002b60:	b29a      	uxth	r2, r3
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002b66:	78bb      	ldrb	r3, [r7, #2]
 8002b68:	2b02      	cmp	r3, #2
 8002b6a:	d102      	bne.n	8002b72 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	2200      	movs	r2, #0
 8002b70:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002b78:	2b01      	cmp	r3, #1
 8002b7a:	d101      	bne.n	8002b80 <HAL_PCD_EP_Open+0xaa>
 8002b7c:	2302      	movs	r3, #2
 8002b7e:	e00e      	b.n	8002b9e <HAL_PCD_EP_Open+0xc8>
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2201      	movs	r2, #1
 8002b84:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	68f9      	ldr	r1, [r7, #12]
 8002b8e:	4618      	mov	r0, r3
 8002b90:	f002 fc5a 	bl	8005448 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2200      	movs	r2, #0
 8002b98:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8002b9c:	7afb      	ldrb	r3, [r7, #11]
}
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	3710      	adds	r7, #16
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	bd80      	pop	{r7, pc}

08002ba6 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002ba6:	b580      	push	{r7, lr}
 8002ba8:	b084      	sub	sp, #16
 8002baa:	af00      	add	r7, sp, #0
 8002bac:	6078      	str	r0, [r7, #4]
 8002bae:	460b      	mov	r3, r1
 8002bb0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002bb2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	da0f      	bge.n	8002bda <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002bba:	78fb      	ldrb	r3, [r7, #3]
 8002bbc:	f003 020f 	and.w	r2, r3, #15
 8002bc0:	4613      	mov	r3, r2
 8002bc2:	00db      	lsls	r3, r3, #3
 8002bc4:	4413      	add	r3, r2
 8002bc6:	009b      	lsls	r3, r3, #2
 8002bc8:	3338      	adds	r3, #56	; 0x38
 8002bca:	687a      	ldr	r2, [r7, #4]
 8002bcc:	4413      	add	r3, r2
 8002bce:	3304      	adds	r3, #4
 8002bd0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	2201      	movs	r2, #1
 8002bd6:	705a      	strb	r2, [r3, #1]
 8002bd8:	e00f      	b.n	8002bfa <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002bda:	78fb      	ldrb	r3, [r7, #3]
 8002bdc:	f003 020f 	and.w	r2, r3, #15
 8002be0:	4613      	mov	r3, r2
 8002be2:	00db      	lsls	r3, r3, #3
 8002be4:	4413      	add	r3, r2
 8002be6:	009b      	lsls	r3, r3, #2
 8002be8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002bec:	687a      	ldr	r2, [r7, #4]
 8002bee:	4413      	add	r3, r2
 8002bf0:	3304      	adds	r3, #4
 8002bf2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002bfa:	78fb      	ldrb	r3, [r7, #3]
 8002bfc:	f003 030f 	and.w	r3, r3, #15
 8002c00:	b2da      	uxtb	r2, r3
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002c0c:	2b01      	cmp	r3, #1
 8002c0e:	d101      	bne.n	8002c14 <HAL_PCD_EP_Close+0x6e>
 8002c10:	2302      	movs	r3, #2
 8002c12:	e00e      	b.n	8002c32 <HAL_PCD_EP_Close+0x8c>
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2201      	movs	r2, #1
 8002c18:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	68f9      	ldr	r1, [r7, #12]
 8002c22:	4618      	mov	r0, r3
 8002c24:	f002 fc98 	bl	8005558 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8002c30:	2300      	movs	r3, #0
}
 8002c32:	4618      	mov	r0, r3
 8002c34:	3710      	adds	r7, #16
 8002c36:	46bd      	mov	sp, r7
 8002c38:	bd80      	pop	{r7, pc}

08002c3a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002c3a:	b580      	push	{r7, lr}
 8002c3c:	b086      	sub	sp, #24
 8002c3e:	af00      	add	r7, sp, #0
 8002c40:	60f8      	str	r0, [r7, #12]
 8002c42:	607a      	str	r2, [r7, #4]
 8002c44:	603b      	str	r3, [r7, #0]
 8002c46:	460b      	mov	r3, r1
 8002c48:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002c4a:	7afb      	ldrb	r3, [r7, #11]
 8002c4c:	f003 020f 	and.w	r2, r3, #15
 8002c50:	4613      	mov	r3, r2
 8002c52:	00db      	lsls	r3, r3, #3
 8002c54:	4413      	add	r3, r2
 8002c56:	009b      	lsls	r3, r3, #2
 8002c58:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002c5c:	68fa      	ldr	r2, [r7, #12]
 8002c5e:	4413      	add	r3, r2
 8002c60:	3304      	adds	r3, #4
 8002c62:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002c64:	697b      	ldr	r3, [r7, #20]
 8002c66:	687a      	ldr	r2, [r7, #4]
 8002c68:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002c6a:	697b      	ldr	r3, [r7, #20]
 8002c6c:	683a      	ldr	r2, [r7, #0]
 8002c6e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002c70:	697b      	ldr	r3, [r7, #20]
 8002c72:	2200      	movs	r2, #0
 8002c74:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8002c76:	697b      	ldr	r3, [r7, #20]
 8002c78:	2200      	movs	r2, #0
 8002c7a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002c7c:	7afb      	ldrb	r3, [r7, #11]
 8002c7e:	f003 030f 	and.w	r3, r3, #15
 8002c82:	b2da      	uxtb	r2, r3
 8002c84:	697b      	ldr	r3, [r7, #20]
 8002c86:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	691b      	ldr	r3, [r3, #16]
 8002c8c:	2b01      	cmp	r3, #1
 8002c8e:	d102      	bne.n	8002c96 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002c90:	687a      	ldr	r2, [r7, #4]
 8002c92:	697b      	ldr	r3, [r7, #20]
 8002c94:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002c96:	7afb      	ldrb	r3, [r7, #11]
 8002c98:	f003 030f 	and.w	r3, r3, #15
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d109      	bne.n	8002cb4 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	6818      	ldr	r0, [r3, #0]
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	691b      	ldr	r3, [r3, #16]
 8002ca8:	b2db      	uxtb	r3, r3
 8002caa:	461a      	mov	r2, r3
 8002cac:	6979      	ldr	r1, [r7, #20]
 8002cae:	f002 ff77 	bl	8005ba0 <USB_EP0StartXfer>
 8002cb2:	e008      	b.n	8002cc6 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	6818      	ldr	r0, [r3, #0]
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	691b      	ldr	r3, [r3, #16]
 8002cbc:	b2db      	uxtb	r3, r3
 8002cbe:	461a      	mov	r2, r3
 8002cc0:	6979      	ldr	r1, [r7, #20]
 8002cc2:	f002 fd25 	bl	8005710 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002cc6:	2300      	movs	r3, #0
}
 8002cc8:	4618      	mov	r0, r3
 8002cca:	3718      	adds	r7, #24
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	bd80      	pop	{r7, pc}

08002cd0 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002cd0:	b480      	push	{r7}
 8002cd2:	b083      	sub	sp, #12
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
 8002cd8:	460b      	mov	r3, r1
 8002cda:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002cdc:	78fb      	ldrb	r3, [r7, #3]
 8002cde:	f003 020f 	and.w	r2, r3, #15
 8002ce2:	6879      	ldr	r1, [r7, #4]
 8002ce4:	4613      	mov	r3, r2
 8002ce6:	00db      	lsls	r3, r3, #3
 8002ce8:	4413      	add	r3, r2
 8002cea:	009b      	lsls	r3, r3, #2
 8002cec:	440b      	add	r3, r1
 8002cee:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8002cf2:	681b      	ldr	r3, [r3, #0]
}
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	370c      	adds	r7, #12
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfe:	4770      	bx	lr

08002d00 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b086      	sub	sp, #24
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	60f8      	str	r0, [r7, #12]
 8002d08:	607a      	str	r2, [r7, #4]
 8002d0a:	603b      	str	r3, [r7, #0]
 8002d0c:	460b      	mov	r3, r1
 8002d0e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002d10:	7afb      	ldrb	r3, [r7, #11]
 8002d12:	f003 020f 	and.w	r2, r3, #15
 8002d16:	4613      	mov	r3, r2
 8002d18:	00db      	lsls	r3, r3, #3
 8002d1a:	4413      	add	r3, r2
 8002d1c:	009b      	lsls	r3, r3, #2
 8002d1e:	3338      	adds	r3, #56	; 0x38
 8002d20:	68fa      	ldr	r2, [r7, #12]
 8002d22:	4413      	add	r3, r2
 8002d24:	3304      	adds	r3, #4
 8002d26:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002d28:	697b      	ldr	r3, [r7, #20]
 8002d2a:	687a      	ldr	r2, [r7, #4]
 8002d2c:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002d2e:	697b      	ldr	r3, [r7, #20]
 8002d30:	683a      	ldr	r2, [r7, #0]
 8002d32:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002d34:	697b      	ldr	r3, [r7, #20]
 8002d36:	2200      	movs	r2, #0
 8002d38:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8002d3a:	697b      	ldr	r3, [r7, #20]
 8002d3c:	2201      	movs	r2, #1
 8002d3e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002d40:	7afb      	ldrb	r3, [r7, #11]
 8002d42:	f003 030f 	and.w	r3, r3, #15
 8002d46:	b2da      	uxtb	r2, r3
 8002d48:	697b      	ldr	r3, [r7, #20]
 8002d4a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	691b      	ldr	r3, [r3, #16]
 8002d50:	2b01      	cmp	r3, #1
 8002d52:	d102      	bne.n	8002d5a <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002d54:	687a      	ldr	r2, [r7, #4]
 8002d56:	697b      	ldr	r3, [r7, #20]
 8002d58:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002d5a:	7afb      	ldrb	r3, [r7, #11]
 8002d5c:	f003 030f 	and.w	r3, r3, #15
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d109      	bne.n	8002d78 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	6818      	ldr	r0, [r3, #0]
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	691b      	ldr	r3, [r3, #16]
 8002d6c:	b2db      	uxtb	r3, r3
 8002d6e:	461a      	mov	r2, r3
 8002d70:	6979      	ldr	r1, [r7, #20]
 8002d72:	f002 ff15 	bl	8005ba0 <USB_EP0StartXfer>
 8002d76:	e008      	b.n	8002d8a <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	6818      	ldr	r0, [r3, #0]
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	691b      	ldr	r3, [r3, #16]
 8002d80:	b2db      	uxtb	r3, r3
 8002d82:	461a      	mov	r2, r3
 8002d84:	6979      	ldr	r1, [r7, #20]
 8002d86:	f002 fcc3 	bl	8005710 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002d8a:	2300      	movs	r3, #0
}
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	3718      	adds	r7, #24
 8002d90:	46bd      	mov	sp, r7
 8002d92:	bd80      	pop	{r7, pc}

08002d94 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b084      	sub	sp, #16
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
 8002d9c:	460b      	mov	r3, r1
 8002d9e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002da0:	78fb      	ldrb	r3, [r7, #3]
 8002da2:	f003 020f 	and.w	r2, r3, #15
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	685b      	ldr	r3, [r3, #4]
 8002daa:	429a      	cmp	r2, r3
 8002dac:	d901      	bls.n	8002db2 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002dae:	2301      	movs	r3, #1
 8002db0:	e050      	b.n	8002e54 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002db2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	da0f      	bge.n	8002dda <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002dba:	78fb      	ldrb	r3, [r7, #3]
 8002dbc:	f003 020f 	and.w	r2, r3, #15
 8002dc0:	4613      	mov	r3, r2
 8002dc2:	00db      	lsls	r3, r3, #3
 8002dc4:	4413      	add	r3, r2
 8002dc6:	009b      	lsls	r3, r3, #2
 8002dc8:	3338      	adds	r3, #56	; 0x38
 8002dca:	687a      	ldr	r2, [r7, #4]
 8002dcc:	4413      	add	r3, r2
 8002dce:	3304      	adds	r3, #4
 8002dd0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	2201      	movs	r2, #1
 8002dd6:	705a      	strb	r2, [r3, #1]
 8002dd8:	e00d      	b.n	8002df6 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002dda:	78fa      	ldrb	r2, [r7, #3]
 8002ddc:	4613      	mov	r3, r2
 8002dde:	00db      	lsls	r3, r3, #3
 8002de0:	4413      	add	r3, r2
 8002de2:	009b      	lsls	r3, r3, #2
 8002de4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002de8:	687a      	ldr	r2, [r7, #4]
 8002dea:	4413      	add	r3, r2
 8002dec:	3304      	adds	r3, #4
 8002dee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	2200      	movs	r2, #0
 8002df4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	2201      	movs	r2, #1
 8002dfa:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002dfc:	78fb      	ldrb	r3, [r7, #3]
 8002dfe:	f003 030f 	and.w	r3, r3, #15
 8002e02:	b2da      	uxtb	r2, r3
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002e0e:	2b01      	cmp	r3, #1
 8002e10:	d101      	bne.n	8002e16 <HAL_PCD_EP_SetStall+0x82>
 8002e12:	2302      	movs	r3, #2
 8002e14:	e01e      	b.n	8002e54 <HAL_PCD_EP_SetStall+0xc0>
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	2201      	movs	r2, #1
 8002e1a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	68f9      	ldr	r1, [r7, #12]
 8002e24:	4618      	mov	r0, r3
 8002e26:	f003 f953 	bl	80060d0 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002e2a:	78fb      	ldrb	r3, [r7, #3]
 8002e2c:	f003 030f 	and.w	r3, r3, #15
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d10a      	bne.n	8002e4a <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6818      	ldr	r0, [r3, #0]
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	691b      	ldr	r3, [r3, #16]
 8002e3c:	b2d9      	uxtb	r1, r3
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002e44:	461a      	mov	r2, r3
 8002e46:	f003 fb43 	bl	80064d0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002e52:	2300      	movs	r3, #0
}
 8002e54:	4618      	mov	r0, r3
 8002e56:	3710      	adds	r7, #16
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	bd80      	pop	{r7, pc}

08002e5c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b084      	sub	sp, #16
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
 8002e64:	460b      	mov	r3, r1
 8002e66:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002e68:	78fb      	ldrb	r3, [r7, #3]
 8002e6a:	f003 020f 	and.w	r2, r3, #15
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	685b      	ldr	r3, [r3, #4]
 8002e72:	429a      	cmp	r2, r3
 8002e74:	d901      	bls.n	8002e7a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002e76:	2301      	movs	r3, #1
 8002e78:	e042      	b.n	8002f00 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002e7a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	da0f      	bge.n	8002ea2 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e82:	78fb      	ldrb	r3, [r7, #3]
 8002e84:	f003 020f 	and.w	r2, r3, #15
 8002e88:	4613      	mov	r3, r2
 8002e8a:	00db      	lsls	r3, r3, #3
 8002e8c:	4413      	add	r3, r2
 8002e8e:	009b      	lsls	r3, r3, #2
 8002e90:	3338      	adds	r3, #56	; 0x38
 8002e92:	687a      	ldr	r2, [r7, #4]
 8002e94:	4413      	add	r3, r2
 8002e96:	3304      	adds	r3, #4
 8002e98:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	2201      	movs	r2, #1
 8002e9e:	705a      	strb	r2, [r3, #1]
 8002ea0:	e00f      	b.n	8002ec2 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002ea2:	78fb      	ldrb	r3, [r7, #3]
 8002ea4:	f003 020f 	and.w	r2, r3, #15
 8002ea8:	4613      	mov	r3, r2
 8002eaa:	00db      	lsls	r3, r3, #3
 8002eac:	4413      	add	r3, r2
 8002eae:	009b      	lsls	r3, r3, #2
 8002eb0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002eb4:	687a      	ldr	r2, [r7, #4]
 8002eb6:	4413      	add	r3, r2
 8002eb8:	3304      	adds	r3, #4
 8002eba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002ec8:	78fb      	ldrb	r3, [r7, #3]
 8002eca:	f003 030f 	and.w	r3, r3, #15
 8002ece:	b2da      	uxtb	r2, r3
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002eda:	2b01      	cmp	r3, #1
 8002edc:	d101      	bne.n	8002ee2 <HAL_PCD_EP_ClrStall+0x86>
 8002ede:	2302      	movs	r3, #2
 8002ee0:	e00e      	b.n	8002f00 <HAL_PCD_EP_ClrStall+0xa4>
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2201      	movs	r2, #1
 8002ee6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	68f9      	ldr	r1, [r7, #12]
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	f003 f95b 	bl	80061ac <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	2200      	movs	r2, #0
 8002efa:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002efe:	2300      	movs	r3, #0
}
 8002f00:	4618      	mov	r0, r3
 8002f02:	3710      	adds	r7, #16
 8002f04:	46bd      	mov	sp, r7
 8002f06:	bd80      	pop	{r7, pc}

08002f08 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b084      	sub	sp, #16
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
 8002f10:	460b      	mov	r3, r1
 8002f12:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002f14:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	da0c      	bge.n	8002f36 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f1c:	78fb      	ldrb	r3, [r7, #3]
 8002f1e:	f003 020f 	and.w	r2, r3, #15
 8002f22:	4613      	mov	r3, r2
 8002f24:	00db      	lsls	r3, r3, #3
 8002f26:	4413      	add	r3, r2
 8002f28:	009b      	lsls	r3, r3, #2
 8002f2a:	3338      	adds	r3, #56	; 0x38
 8002f2c:	687a      	ldr	r2, [r7, #4]
 8002f2e:	4413      	add	r3, r2
 8002f30:	3304      	adds	r3, #4
 8002f32:	60fb      	str	r3, [r7, #12]
 8002f34:	e00c      	b.n	8002f50 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002f36:	78fb      	ldrb	r3, [r7, #3]
 8002f38:	f003 020f 	and.w	r2, r3, #15
 8002f3c:	4613      	mov	r3, r2
 8002f3e:	00db      	lsls	r3, r3, #3
 8002f40:	4413      	add	r3, r2
 8002f42:	009b      	lsls	r3, r3, #2
 8002f44:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002f48:	687a      	ldr	r2, [r7, #4]
 8002f4a:	4413      	add	r3, r2
 8002f4c:	3304      	adds	r3, #4
 8002f4e:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	68f9      	ldr	r1, [r7, #12]
 8002f56:	4618      	mov	r0, r3
 8002f58:	f002 ff7a 	bl	8005e50 <USB_EPStopXfer>
 8002f5c:	4603      	mov	r3, r0
 8002f5e:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002f60:	7afb      	ldrb	r3, [r7, #11]
}
 8002f62:	4618      	mov	r0, r3
 8002f64:	3710      	adds	r7, #16
 8002f66:	46bd      	mov	sp, r7
 8002f68:	bd80      	pop	{r7, pc}

08002f6a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002f6a:	b580      	push	{r7, lr}
 8002f6c:	b08a      	sub	sp, #40	; 0x28
 8002f6e:	af02      	add	r7, sp, #8
 8002f70:	6078      	str	r0, [r7, #4]
 8002f72:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002f7a:	697b      	ldr	r3, [r7, #20]
 8002f7c:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002f7e:	683a      	ldr	r2, [r7, #0]
 8002f80:	4613      	mov	r3, r2
 8002f82:	00db      	lsls	r3, r3, #3
 8002f84:	4413      	add	r3, r2
 8002f86:	009b      	lsls	r3, r3, #2
 8002f88:	3338      	adds	r3, #56	; 0x38
 8002f8a:	687a      	ldr	r2, [r7, #4]
 8002f8c:	4413      	add	r3, r2
 8002f8e:	3304      	adds	r3, #4
 8002f90:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	6a1a      	ldr	r2, [r3, #32]
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	699b      	ldr	r3, [r3, #24]
 8002f9a:	429a      	cmp	r2, r3
 8002f9c:	d901      	bls.n	8002fa2 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	e06c      	b.n	800307c <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	699a      	ldr	r2, [r3, #24]
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	6a1b      	ldr	r3, [r3, #32]
 8002faa:	1ad3      	subs	r3, r2, r3
 8002fac:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	68db      	ldr	r3, [r3, #12]
 8002fb2:	69fa      	ldr	r2, [r7, #28]
 8002fb4:	429a      	cmp	r2, r3
 8002fb6:	d902      	bls.n	8002fbe <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	68db      	ldr	r3, [r3, #12]
 8002fbc:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002fbe:	69fb      	ldr	r3, [r7, #28]
 8002fc0:	3303      	adds	r3, #3
 8002fc2:	089b      	lsrs	r3, r3, #2
 8002fc4:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002fc6:	e02b      	b.n	8003020 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	699a      	ldr	r2, [r3, #24]
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	6a1b      	ldr	r3, [r3, #32]
 8002fd0:	1ad3      	subs	r3, r2, r3
 8002fd2:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	68db      	ldr	r3, [r3, #12]
 8002fd8:	69fa      	ldr	r2, [r7, #28]
 8002fda:	429a      	cmp	r2, r3
 8002fdc:	d902      	bls.n	8002fe4 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	68db      	ldr	r3, [r3, #12]
 8002fe2:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002fe4:	69fb      	ldr	r3, [r7, #28]
 8002fe6:	3303      	adds	r3, #3
 8002fe8:	089b      	lsrs	r3, r3, #2
 8002fea:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	6919      	ldr	r1, [r3, #16]
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	b2da      	uxtb	r2, r3
 8002ff4:	69fb      	ldr	r3, [r7, #28]
 8002ff6:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002ffc:	b2db      	uxtb	r3, r3
 8002ffe:	9300      	str	r3, [sp, #0]
 8003000:	4603      	mov	r3, r0
 8003002:	6978      	ldr	r0, [r7, #20]
 8003004:	f002 ffce 	bl	8005fa4 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	691a      	ldr	r2, [r3, #16]
 800300c:	69fb      	ldr	r3, [r7, #28]
 800300e:	441a      	add	r2, r3
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	6a1a      	ldr	r2, [r3, #32]
 8003018:	69fb      	ldr	r3, [r7, #28]
 800301a:	441a      	add	r2, r3
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	015a      	lsls	r2, r3, #5
 8003024:	693b      	ldr	r3, [r7, #16]
 8003026:	4413      	add	r3, r2
 8003028:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800302c:	699b      	ldr	r3, [r3, #24]
 800302e:	b29b      	uxth	r3, r3
 8003030:	69ba      	ldr	r2, [r7, #24]
 8003032:	429a      	cmp	r2, r3
 8003034:	d809      	bhi.n	800304a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	6a1a      	ldr	r2, [r3, #32]
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800303e:	429a      	cmp	r2, r3
 8003040:	d203      	bcs.n	800304a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	699b      	ldr	r3, [r3, #24]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d1be      	bne.n	8002fc8 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	699a      	ldr	r2, [r3, #24]
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	6a1b      	ldr	r3, [r3, #32]
 8003052:	429a      	cmp	r2, r3
 8003054:	d811      	bhi.n	800307a <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	f003 030f 	and.w	r3, r3, #15
 800305c:	2201      	movs	r2, #1
 800305e:	fa02 f303 	lsl.w	r3, r2, r3
 8003062:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003064:	693b      	ldr	r3, [r7, #16]
 8003066:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800306a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800306c:	68bb      	ldr	r3, [r7, #8]
 800306e:	43db      	mvns	r3, r3
 8003070:	6939      	ldr	r1, [r7, #16]
 8003072:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003076:	4013      	ands	r3, r2
 8003078:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800307a:	2300      	movs	r3, #0
}
 800307c:	4618      	mov	r0, r3
 800307e:	3720      	adds	r7, #32
 8003080:	46bd      	mov	sp, r7
 8003082:	bd80      	pop	{r7, pc}

08003084 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b088      	sub	sp, #32
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
 800308c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003094:	69fb      	ldr	r3, [r7, #28]
 8003096:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003098:	69fb      	ldr	r3, [r7, #28]
 800309a:	333c      	adds	r3, #60	; 0x3c
 800309c:	3304      	adds	r3, #4
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	015a      	lsls	r2, r3, #5
 80030a6:	69bb      	ldr	r3, [r7, #24]
 80030a8:	4413      	add	r3, r2
 80030aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030ae:	689b      	ldr	r3, [r3, #8]
 80030b0:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	691b      	ldr	r3, [r3, #16]
 80030b6:	2b01      	cmp	r3, #1
 80030b8:	d17b      	bne.n	80031b2 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80030ba:	693b      	ldr	r3, [r7, #16]
 80030bc:	f003 0308 	and.w	r3, r3, #8
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d015      	beq.n	80030f0 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80030c4:	697b      	ldr	r3, [r7, #20]
 80030c6:	4a61      	ldr	r2, [pc, #388]	; (800324c <PCD_EP_OutXfrComplete_int+0x1c8>)
 80030c8:	4293      	cmp	r3, r2
 80030ca:	f240 80b9 	bls.w	8003240 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80030ce:	693b      	ldr	r3, [r7, #16]
 80030d0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	f000 80b3 	beq.w	8003240 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	015a      	lsls	r2, r3, #5
 80030de:	69bb      	ldr	r3, [r7, #24]
 80030e0:	4413      	add	r3, r2
 80030e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030e6:	461a      	mov	r2, r3
 80030e8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80030ec:	6093      	str	r3, [r2, #8]
 80030ee:	e0a7      	b.n	8003240 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80030f0:	693b      	ldr	r3, [r7, #16]
 80030f2:	f003 0320 	and.w	r3, r3, #32
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d009      	beq.n	800310e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	015a      	lsls	r2, r3, #5
 80030fe:	69bb      	ldr	r3, [r7, #24]
 8003100:	4413      	add	r3, r2
 8003102:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003106:	461a      	mov	r2, r3
 8003108:	2320      	movs	r3, #32
 800310a:	6093      	str	r3, [r2, #8]
 800310c:	e098      	b.n	8003240 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800310e:	693b      	ldr	r3, [r7, #16]
 8003110:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003114:	2b00      	cmp	r3, #0
 8003116:	f040 8093 	bne.w	8003240 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800311a:	697b      	ldr	r3, [r7, #20]
 800311c:	4a4b      	ldr	r2, [pc, #300]	; (800324c <PCD_EP_OutXfrComplete_int+0x1c8>)
 800311e:	4293      	cmp	r3, r2
 8003120:	d90f      	bls.n	8003142 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003122:	693b      	ldr	r3, [r7, #16]
 8003124:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003128:	2b00      	cmp	r3, #0
 800312a:	d00a      	beq.n	8003142 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	015a      	lsls	r2, r3, #5
 8003130:	69bb      	ldr	r3, [r7, #24]
 8003132:	4413      	add	r3, r2
 8003134:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003138:	461a      	mov	r2, r3
 800313a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800313e:	6093      	str	r3, [r2, #8]
 8003140:	e07e      	b.n	8003240 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8003142:	683a      	ldr	r2, [r7, #0]
 8003144:	4613      	mov	r3, r2
 8003146:	00db      	lsls	r3, r3, #3
 8003148:	4413      	add	r3, r2
 800314a:	009b      	lsls	r3, r3, #2
 800314c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003150:	687a      	ldr	r2, [r7, #4]
 8003152:	4413      	add	r3, r2
 8003154:	3304      	adds	r3, #4
 8003156:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	69da      	ldr	r2, [r3, #28]
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	0159      	lsls	r1, r3, #5
 8003160:	69bb      	ldr	r3, [r7, #24]
 8003162:	440b      	add	r3, r1
 8003164:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003168:	691b      	ldr	r3, [r3, #16]
 800316a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800316e:	1ad2      	subs	r2, r2, r3
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	2b00      	cmp	r3, #0
 8003178:	d114      	bne.n	80031a4 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	699b      	ldr	r3, [r3, #24]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d109      	bne.n	8003196 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6818      	ldr	r0, [r3, #0]
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800318c:	461a      	mov	r2, r3
 800318e:	2101      	movs	r1, #1
 8003190:	f003 f99e 	bl	80064d0 <USB_EP0_OutStart>
 8003194:	e006      	b.n	80031a4 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	691a      	ldr	r2, [r3, #16]
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	6a1b      	ldr	r3, [r3, #32]
 800319e:	441a      	add	r2, r3
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	b2db      	uxtb	r3, r3
 80031a8:	4619      	mov	r1, r3
 80031aa:	6878      	ldr	r0, [r7, #4]
 80031ac:	f005 fc56 	bl	8008a5c <HAL_PCD_DataOutStageCallback>
 80031b0:	e046      	b.n	8003240 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80031b2:	697b      	ldr	r3, [r7, #20]
 80031b4:	4a26      	ldr	r2, [pc, #152]	; (8003250 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d124      	bne.n	8003204 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80031ba:	693b      	ldr	r3, [r7, #16]
 80031bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d00a      	beq.n	80031da <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	015a      	lsls	r2, r3, #5
 80031c8:	69bb      	ldr	r3, [r7, #24]
 80031ca:	4413      	add	r3, r2
 80031cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031d0:	461a      	mov	r2, r3
 80031d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80031d6:	6093      	str	r3, [r2, #8]
 80031d8:	e032      	b.n	8003240 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80031da:	693b      	ldr	r3, [r7, #16]
 80031dc:	f003 0320 	and.w	r3, r3, #32
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d008      	beq.n	80031f6 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	015a      	lsls	r2, r3, #5
 80031e8:	69bb      	ldr	r3, [r7, #24]
 80031ea:	4413      	add	r3, r2
 80031ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031f0:	461a      	mov	r2, r3
 80031f2:	2320      	movs	r3, #32
 80031f4:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	b2db      	uxtb	r3, r3
 80031fa:	4619      	mov	r1, r3
 80031fc:	6878      	ldr	r0, [r7, #4]
 80031fe:	f005 fc2d 	bl	8008a5c <HAL_PCD_DataOutStageCallback>
 8003202:	e01d      	b.n	8003240 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	2b00      	cmp	r3, #0
 8003208:	d114      	bne.n	8003234 <PCD_EP_OutXfrComplete_int+0x1b0>
 800320a:	6879      	ldr	r1, [r7, #4]
 800320c:	683a      	ldr	r2, [r7, #0]
 800320e:	4613      	mov	r3, r2
 8003210:	00db      	lsls	r3, r3, #3
 8003212:	4413      	add	r3, r2
 8003214:	009b      	lsls	r3, r3, #2
 8003216:	440b      	add	r3, r1
 8003218:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	2b00      	cmp	r3, #0
 8003220:	d108      	bne.n	8003234 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6818      	ldr	r0, [r3, #0]
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800322c:	461a      	mov	r2, r3
 800322e:	2100      	movs	r1, #0
 8003230:	f003 f94e 	bl	80064d0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	b2db      	uxtb	r3, r3
 8003238:	4619      	mov	r1, r3
 800323a:	6878      	ldr	r0, [r7, #4]
 800323c:	f005 fc0e 	bl	8008a5c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003240:	2300      	movs	r3, #0
}
 8003242:	4618      	mov	r0, r3
 8003244:	3720      	adds	r7, #32
 8003246:	46bd      	mov	sp, r7
 8003248:	bd80      	pop	{r7, pc}
 800324a:	bf00      	nop
 800324c:	4f54300a 	.word	0x4f54300a
 8003250:	4f54310a 	.word	0x4f54310a

08003254 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b086      	sub	sp, #24
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
 800325c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003264:	697b      	ldr	r3, [r7, #20]
 8003266:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003268:	697b      	ldr	r3, [r7, #20]
 800326a:	333c      	adds	r3, #60	; 0x3c
 800326c:	3304      	adds	r3, #4
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	015a      	lsls	r2, r3, #5
 8003276:	693b      	ldr	r3, [r7, #16]
 8003278:	4413      	add	r3, r2
 800327a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800327e:	689b      	ldr	r3, [r3, #8]
 8003280:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	4a15      	ldr	r2, [pc, #84]	; (80032dc <PCD_EP_OutSetupPacket_int+0x88>)
 8003286:	4293      	cmp	r3, r2
 8003288:	d90e      	bls.n	80032a8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800328a:	68bb      	ldr	r3, [r7, #8]
 800328c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003290:	2b00      	cmp	r3, #0
 8003292:	d009      	beq.n	80032a8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	015a      	lsls	r2, r3, #5
 8003298:	693b      	ldr	r3, [r7, #16]
 800329a:	4413      	add	r3, r2
 800329c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032a0:	461a      	mov	r2, r3
 80032a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80032a6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80032a8:	6878      	ldr	r0, [r7, #4]
 80032aa:	f005 fbc5 	bl	8008a38 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	4a0a      	ldr	r2, [pc, #40]	; (80032dc <PCD_EP_OutSetupPacket_int+0x88>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d90c      	bls.n	80032d0 <PCD_EP_OutSetupPacket_int+0x7c>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	691b      	ldr	r3, [r3, #16]
 80032ba:	2b01      	cmp	r3, #1
 80032bc:	d108      	bne.n	80032d0 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6818      	ldr	r0, [r3, #0]
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80032c8:	461a      	mov	r2, r3
 80032ca:	2101      	movs	r1, #1
 80032cc:	f003 f900 	bl	80064d0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80032d0:	2300      	movs	r3, #0
}
 80032d2:	4618      	mov	r0, r3
 80032d4:	3718      	adds	r7, #24
 80032d6:	46bd      	mov	sp, r7
 80032d8:	bd80      	pop	{r7, pc}
 80032da:	bf00      	nop
 80032dc:	4f54300a 	.word	0x4f54300a

080032e0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80032e0:	b480      	push	{r7}
 80032e2:	b085      	sub	sp, #20
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
 80032e8:	460b      	mov	r3, r1
 80032ea:	70fb      	strb	r3, [r7, #3]
 80032ec:	4613      	mov	r3, r2
 80032ee:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032f6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80032f8:	78fb      	ldrb	r3, [r7, #3]
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d107      	bne.n	800330e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80032fe:	883b      	ldrh	r3, [r7, #0]
 8003300:	0419      	lsls	r1, r3, #16
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	68ba      	ldr	r2, [r7, #8]
 8003308:	430a      	orrs	r2, r1
 800330a:	629a      	str	r2, [r3, #40]	; 0x28
 800330c:	e028      	b.n	8003360 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003314:	0c1b      	lsrs	r3, r3, #16
 8003316:	68ba      	ldr	r2, [r7, #8]
 8003318:	4413      	add	r3, r2
 800331a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800331c:	2300      	movs	r3, #0
 800331e:	73fb      	strb	r3, [r7, #15]
 8003320:	e00d      	b.n	800333e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681a      	ldr	r2, [r3, #0]
 8003326:	7bfb      	ldrb	r3, [r7, #15]
 8003328:	3340      	adds	r3, #64	; 0x40
 800332a:	009b      	lsls	r3, r3, #2
 800332c:	4413      	add	r3, r2
 800332e:	685b      	ldr	r3, [r3, #4]
 8003330:	0c1b      	lsrs	r3, r3, #16
 8003332:	68ba      	ldr	r2, [r7, #8]
 8003334:	4413      	add	r3, r2
 8003336:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003338:	7bfb      	ldrb	r3, [r7, #15]
 800333a:	3301      	adds	r3, #1
 800333c:	73fb      	strb	r3, [r7, #15]
 800333e:	7bfa      	ldrb	r2, [r7, #15]
 8003340:	78fb      	ldrb	r3, [r7, #3]
 8003342:	3b01      	subs	r3, #1
 8003344:	429a      	cmp	r2, r3
 8003346:	d3ec      	bcc.n	8003322 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003348:	883b      	ldrh	r3, [r7, #0]
 800334a:	0418      	lsls	r0, r3, #16
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6819      	ldr	r1, [r3, #0]
 8003350:	78fb      	ldrb	r3, [r7, #3]
 8003352:	3b01      	subs	r3, #1
 8003354:	68ba      	ldr	r2, [r7, #8]
 8003356:	4302      	orrs	r2, r0
 8003358:	3340      	adds	r3, #64	; 0x40
 800335a:	009b      	lsls	r3, r3, #2
 800335c:	440b      	add	r3, r1
 800335e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003360:	2300      	movs	r3, #0
}
 8003362:	4618      	mov	r0, r3
 8003364:	3714      	adds	r7, #20
 8003366:	46bd      	mov	sp, r7
 8003368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336c:	4770      	bx	lr

0800336e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800336e:	b480      	push	{r7}
 8003370:	b083      	sub	sp, #12
 8003372:	af00      	add	r7, sp, #0
 8003374:	6078      	str	r0, [r7, #4]
 8003376:	460b      	mov	r3, r1
 8003378:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	887a      	ldrh	r2, [r7, #2]
 8003380:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003382:	2300      	movs	r3, #0
}
 8003384:	4618      	mov	r0, r3
 8003386:	370c      	adds	r7, #12
 8003388:	46bd      	mov	sp, r7
 800338a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338e:	4770      	bx	lr

08003390 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003390:	b480      	push	{r7}
 8003392:	b083      	sub	sp, #12
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
 8003398:	460b      	mov	r3, r1
 800339a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800339c:	bf00      	nop
 800339e:	370c      	adds	r7, #12
 80033a0:	46bd      	mov	sp, r7
 80033a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a6:	4770      	bx	lr

080033a8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b086      	sub	sp, #24
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d101      	bne.n	80033ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80033b6:	2301      	movs	r3, #1
 80033b8:	e267      	b.n	800388a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f003 0301 	and.w	r3, r3, #1
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d075      	beq.n	80034b2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80033c6:	4b88      	ldr	r3, [pc, #544]	; (80035e8 <HAL_RCC_OscConfig+0x240>)
 80033c8:	689b      	ldr	r3, [r3, #8]
 80033ca:	f003 030c 	and.w	r3, r3, #12
 80033ce:	2b04      	cmp	r3, #4
 80033d0:	d00c      	beq.n	80033ec <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80033d2:	4b85      	ldr	r3, [pc, #532]	; (80035e8 <HAL_RCC_OscConfig+0x240>)
 80033d4:	689b      	ldr	r3, [r3, #8]
 80033d6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80033da:	2b08      	cmp	r3, #8
 80033dc:	d112      	bne.n	8003404 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80033de:	4b82      	ldr	r3, [pc, #520]	; (80035e8 <HAL_RCC_OscConfig+0x240>)
 80033e0:	685b      	ldr	r3, [r3, #4]
 80033e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033e6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80033ea:	d10b      	bne.n	8003404 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033ec:	4b7e      	ldr	r3, [pc, #504]	; (80035e8 <HAL_RCC_OscConfig+0x240>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d05b      	beq.n	80034b0 <HAL_RCC_OscConfig+0x108>
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	685b      	ldr	r3, [r3, #4]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d157      	bne.n	80034b0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003400:	2301      	movs	r3, #1
 8003402:	e242      	b.n	800388a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	685b      	ldr	r3, [r3, #4]
 8003408:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800340c:	d106      	bne.n	800341c <HAL_RCC_OscConfig+0x74>
 800340e:	4b76      	ldr	r3, [pc, #472]	; (80035e8 <HAL_RCC_OscConfig+0x240>)
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	4a75      	ldr	r2, [pc, #468]	; (80035e8 <HAL_RCC_OscConfig+0x240>)
 8003414:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003418:	6013      	str	r3, [r2, #0]
 800341a:	e01d      	b.n	8003458 <HAL_RCC_OscConfig+0xb0>
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	685b      	ldr	r3, [r3, #4]
 8003420:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003424:	d10c      	bne.n	8003440 <HAL_RCC_OscConfig+0x98>
 8003426:	4b70      	ldr	r3, [pc, #448]	; (80035e8 <HAL_RCC_OscConfig+0x240>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	4a6f      	ldr	r2, [pc, #444]	; (80035e8 <HAL_RCC_OscConfig+0x240>)
 800342c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003430:	6013      	str	r3, [r2, #0]
 8003432:	4b6d      	ldr	r3, [pc, #436]	; (80035e8 <HAL_RCC_OscConfig+0x240>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	4a6c      	ldr	r2, [pc, #432]	; (80035e8 <HAL_RCC_OscConfig+0x240>)
 8003438:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800343c:	6013      	str	r3, [r2, #0]
 800343e:	e00b      	b.n	8003458 <HAL_RCC_OscConfig+0xb0>
 8003440:	4b69      	ldr	r3, [pc, #420]	; (80035e8 <HAL_RCC_OscConfig+0x240>)
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4a68      	ldr	r2, [pc, #416]	; (80035e8 <HAL_RCC_OscConfig+0x240>)
 8003446:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800344a:	6013      	str	r3, [r2, #0]
 800344c:	4b66      	ldr	r3, [pc, #408]	; (80035e8 <HAL_RCC_OscConfig+0x240>)
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	4a65      	ldr	r2, [pc, #404]	; (80035e8 <HAL_RCC_OscConfig+0x240>)
 8003452:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003456:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	2b00      	cmp	r3, #0
 800345e:	d013      	beq.n	8003488 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003460:	f7fd fe2e 	bl	80010c0 <HAL_GetTick>
 8003464:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003466:	e008      	b.n	800347a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003468:	f7fd fe2a 	bl	80010c0 <HAL_GetTick>
 800346c:	4602      	mov	r2, r0
 800346e:	693b      	ldr	r3, [r7, #16]
 8003470:	1ad3      	subs	r3, r2, r3
 8003472:	2b64      	cmp	r3, #100	; 0x64
 8003474:	d901      	bls.n	800347a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003476:	2303      	movs	r3, #3
 8003478:	e207      	b.n	800388a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800347a:	4b5b      	ldr	r3, [pc, #364]	; (80035e8 <HAL_RCC_OscConfig+0x240>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003482:	2b00      	cmp	r3, #0
 8003484:	d0f0      	beq.n	8003468 <HAL_RCC_OscConfig+0xc0>
 8003486:	e014      	b.n	80034b2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003488:	f7fd fe1a 	bl	80010c0 <HAL_GetTick>
 800348c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800348e:	e008      	b.n	80034a2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003490:	f7fd fe16 	bl	80010c0 <HAL_GetTick>
 8003494:	4602      	mov	r2, r0
 8003496:	693b      	ldr	r3, [r7, #16]
 8003498:	1ad3      	subs	r3, r2, r3
 800349a:	2b64      	cmp	r3, #100	; 0x64
 800349c:	d901      	bls.n	80034a2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800349e:	2303      	movs	r3, #3
 80034a0:	e1f3      	b.n	800388a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034a2:	4b51      	ldr	r3, [pc, #324]	; (80035e8 <HAL_RCC_OscConfig+0x240>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d1f0      	bne.n	8003490 <HAL_RCC_OscConfig+0xe8>
 80034ae:	e000      	b.n	80034b2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f003 0302 	and.w	r3, r3, #2
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d063      	beq.n	8003586 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80034be:	4b4a      	ldr	r3, [pc, #296]	; (80035e8 <HAL_RCC_OscConfig+0x240>)
 80034c0:	689b      	ldr	r3, [r3, #8]
 80034c2:	f003 030c 	and.w	r3, r3, #12
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d00b      	beq.n	80034e2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80034ca:	4b47      	ldr	r3, [pc, #284]	; (80035e8 <HAL_RCC_OscConfig+0x240>)
 80034cc:	689b      	ldr	r3, [r3, #8]
 80034ce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80034d2:	2b08      	cmp	r3, #8
 80034d4:	d11c      	bne.n	8003510 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80034d6:	4b44      	ldr	r3, [pc, #272]	; (80035e8 <HAL_RCC_OscConfig+0x240>)
 80034d8:	685b      	ldr	r3, [r3, #4]
 80034da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d116      	bne.n	8003510 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034e2:	4b41      	ldr	r3, [pc, #260]	; (80035e8 <HAL_RCC_OscConfig+0x240>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f003 0302 	and.w	r3, r3, #2
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d005      	beq.n	80034fa <HAL_RCC_OscConfig+0x152>
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	68db      	ldr	r3, [r3, #12]
 80034f2:	2b01      	cmp	r3, #1
 80034f4:	d001      	beq.n	80034fa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80034f6:	2301      	movs	r3, #1
 80034f8:	e1c7      	b.n	800388a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034fa:	4b3b      	ldr	r3, [pc, #236]	; (80035e8 <HAL_RCC_OscConfig+0x240>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	691b      	ldr	r3, [r3, #16]
 8003506:	00db      	lsls	r3, r3, #3
 8003508:	4937      	ldr	r1, [pc, #220]	; (80035e8 <HAL_RCC_OscConfig+0x240>)
 800350a:	4313      	orrs	r3, r2
 800350c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800350e:	e03a      	b.n	8003586 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	68db      	ldr	r3, [r3, #12]
 8003514:	2b00      	cmp	r3, #0
 8003516:	d020      	beq.n	800355a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003518:	4b34      	ldr	r3, [pc, #208]	; (80035ec <HAL_RCC_OscConfig+0x244>)
 800351a:	2201      	movs	r2, #1
 800351c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800351e:	f7fd fdcf 	bl	80010c0 <HAL_GetTick>
 8003522:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003524:	e008      	b.n	8003538 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003526:	f7fd fdcb 	bl	80010c0 <HAL_GetTick>
 800352a:	4602      	mov	r2, r0
 800352c:	693b      	ldr	r3, [r7, #16]
 800352e:	1ad3      	subs	r3, r2, r3
 8003530:	2b02      	cmp	r3, #2
 8003532:	d901      	bls.n	8003538 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003534:	2303      	movs	r3, #3
 8003536:	e1a8      	b.n	800388a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003538:	4b2b      	ldr	r3, [pc, #172]	; (80035e8 <HAL_RCC_OscConfig+0x240>)
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f003 0302 	and.w	r3, r3, #2
 8003540:	2b00      	cmp	r3, #0
 8003542:	d0f0      	beq.n	8003526 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003544:	4b28      	ldr	r3, [pc, #160]	; (80035e8 <HAL_RCC_OscConfig+0x240>)
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	691b      	ldr	r3, [r3, #16]
 8003550:	00db      	lsls	r3, r3, #3
 8003552:	4925      	ldr	r1, [pc, #148]	; (80035e8 <HAL_RCC_OscConfig+0x240>)
 8003554:	4313      	orrs	r3, r2
 8003556:	600b      	str	r3, [r1, #0]
 8003558:	e015      	b.n	8003586 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800355a:	4b24      	ldr	r3, [pc, #144]	; (80035ec <HAL_RCC_OscConfig+0x244>)
 800355c:	2200      	movs	r2, #0
 800355e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003560:	f7fd fdae 	bl	80010c0 <HAL_GetTick>
 8003564:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003566:	e008      	b.n	800357a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003568:	f7fd fdaa 	bl	80010c0 <HAL_GetTick>
 800356c:	4602      	mov	r2, r0
 800356e:	693b      	ldr	r3, [r7, #16]
 8003570:	1ad3      	subs	r3, r2, r3
 8003572:	2b02      	cmp	r3, #2
 8003574:	d901      	bls.n	800357a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003576:	2303      	movs	r3, #3
 8003578:	e187      	b.n	800388a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800357a:	4b1b      	ldr	r3, [pc, #108]	; (80035e8 <HAL_RCC_OscConfig+0x240>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f003 0302 	and.w	r3, r3, #2
 8003582:	2b00      	cmp	r3, #0
 8003584:	d1f0      	bne.n	8003568 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f003 0308 	and.w	r3, r3, #8
 800358e:	2b00      	cmp	r3, #0
 8003590:	d036      	beq.n	8003600 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	695b      	ldr	r3, [r3, #20]
 8003596:	2b00      	cmp	r3, #0
 8003598:	d016      	beq.n	80035c8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800359a:	4b15      	ldr	r3, [pc, #84]	; (80035f0 <HAL_RCC_OscConfig+0x248>)
 800359c:	2201      	movs	r2, #1
 800359e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035a0:	f7fd fd8e 	bl	80010c0 <HAL_GetTick>
 80035a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035a6:	e008      	b.n	80035ba <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80035a8:	f7fd fd8a 	bl	80010c0 <HAL_GetTick>
 80035ac:	4602      	mov	r2, r0
 80035ae:	693b      	ldr	r3, [r7, #16]
 80035b0:	1ad3      	subs	r3, r2, r3
 80035b2:	2b02      	cmp	r3, #2
 80035b4:	d901      	bls.n	80035ba <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80035b6:	2303      	movs	r3, #3
 80035b8:	e167      	b.n	800388a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035ba:	4b0b      	ldr	r3, [pc, #44]	; (80035e8 <HAL_RCC_OscConfig+0x240>)
 80035bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035be:	f003 0302 	and.w	r3, r3, #2
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d0f0      	beq.n	80035a8 <HAL_RCC_OscConfig+0x200>
 80035c6:	e01b      	b.n	8003600 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80035c8:	4b09      	ldr	r3, [pc, #36]	; (80035f0 <HAL_RCC_OscConfig+0x248>)
 80035ca:	2200      	movs	r2, #0
 80035cc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035ce:	f7fd fd77 	bl	80010c0 <HAL_GetTick>
 80035d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035d4:	e00e      	b.n	80035f4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80035d6:	f7fd fd73 	bl	80010c0 <HAL_GetTick>
 80035da:	4602      	mov	r2, r0
 80035dc:	693b      	ldr	r3, [r7, #16]
 80035de:	1ad3      	subs	r3, r2, r3
 80035e0:	2b02      	cmp	r3, #2
 80035e2:	d907      	bls.n	80035f4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80035e4:	2303      	movs	r3, #3
 80035e6:	e150      	b.n	800388a <HAL_RCC_OscConfig+0x4e2>
 80035e8:	40023800 	.word	0x40023800
 80035ec:	42470000 	.word	0x42470000
 80035f0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035f4:	4b88      	ldr	r3, [pc, #544]	; (8003818 <HAL_RCC_OscConfig+0x470>)
 80035f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035f8:	f003 0302 	and.w	r3, r3, #2
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d1ea      	bne.n	80035d6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f003 0304 	and.w	r3, r3, #4
 8003608:	2b00      	cmp	r3, #0
 800360a:	f000 8097 	beq.w	800373c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800360e:	2300      	movs	r3, #0
 8003610:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003612:	4b81      	ldr	r3, [pc, #516]	; (8003818 <HAL_RCC_OscConfig+0x470>)
 8003614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003616:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800361a:	2b00      	cmp	r3, #0
 800361c:	d10f      	bne.n	800363e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800361e:	2300      	movs	r3, #0
 8003620:	60bb      	str	r3, [r7, #8]
 8003622:	4b7d      	ldr	r3, [pc, #500]	; (8003818 <HAL_RCC_OscConfig+0x470>)
 8003624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003626:	4a7c      	ldr	r2, [pc, #496]	; (8003818 <HAL_RCC_OscConfig+0x470>)
 8003628:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800362c:	6413      	str	r3, [r2, #64]	; 0x40
 800362e:	4b7a      	ldr	r3, [pc, #488]	; (8003818 <HAL_RCC_OscConfig+0x470>)
 8003630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003632:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003636:	60bb      	str	r3, [r7, #8]
 8003638:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800363a:	2301      	movs	r3, #1
 800363c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800363e:	4b77      	ldr	r3, [pc, #476]	; (800381c <HAL_RCC_OscConfig+0x474>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003646:	2b00      	cmp	r3, #0
 8003648:	d118      	bne.n	800367c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800364a:	4b74      	ldr	r3, [pc, #464]	; (800381c <HAL_RCC_OscConfig+0x474>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	4a73      	ldr	r2, [pc, #460]	; (800381c <HAL_RCC_OscConfig+0x474>)
 8003650:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003654:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003656:	f7fd fd33 	bl	80010c0 <HAL_GetTick>
 800365a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800365c:	e008      	b.n	8003670 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800365e:	f7fd fd2f 	bl	80010c0 <HAL_GetTick>
 8003662:	4602      	mov	r2, r0
 8003664:	693b      	ldr	r3, [r7, #16]
 8003666:	1ad3      	subs	r3, r2, r3
 8003668:	2b02      	cmp	r3, #2
 800366a:	d901      	bls.n	8003670 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800366c:	2303      	movs	r3, #3
 800366e:	e10c      	b.n	800388a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003670:	4b6a      	ldr	r3, [pc, #424]	; (800381c <HAL_RCC_OscConfig+0x474>)
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003678:	2b00      	cmp	r3, #0
 800367a:	d0f0      	beq.n	800365e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	689b      	ldr	r3, [r3, #8]
 8003680:	2b01      	cmp	r3, #1
 8003682:	d106      	bne.n	8003692 <HAL_RCC_OscConfig+0x2ea>
 8003684:	4b64      	ldr	r3, [pc, #400]	; (8003818 <HAL_RCC_OscConfig+0x470>)
 8003686:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003688:	4a63      	ldr	r2, [pc, #396]	; (8003818 <HAL_RCC_OscConfig+0x470>)
 800368a:	f043 0301 	orr.w	r3, r3, #1
 800368e:	6713      	str	r3, [r2, #112]	; 0x70
 8003690:	e01c      	b.n	80036cc <HAL_RCC_OscConfig+0x324>
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	689b      	ldr	r3, [r3, #8]
 8003696:	2b05      	cmp	r3, #5
 8003698:	d10c      	bne.n	80036b4 <HAL_RCC_OscConfig+0x30c>
 800369a:	4b5f      	ldr	r3, [pc, #380]	; (8003818 <HAL_RCC_OscConfig+0x470>)
 800369c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800369e:	4a5e      	ldr	r2, [pc, #376]	; (8003818 <HAL_RCC_OscConfig+0x470>)
 80036a0:	f043 0304 	orr.w	r3, r3, #4
 80036a4:	6713      	str	r3, [r2, #112]	; 0x70
 80036a6:	4b5c      	ldr	r3, [pc, #368]	; (8003818 <HAL_RCC_OscConfig+0x470>)
 80036a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036aa:	4a5b      	ldr	r2, [pc, #364]	; (8003818 <HAL_RCC_OscConfig+0x470>)
 80036ac:	f043 0301 	orr.w	r3, r3, #1
 80036b0:	6713      	str	r3, [r2, #112]	; 0x70
 80036b2:	e00b      	b.n	80036cc <HAL_RCC_OscConfig+0x324>
 80036b4:	4b58      	ldr	r3, [pc, #352]	; (8003818 <HAL_RCC_OscConfig+0x470>)
 80036b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036b8:	4a57      	ldr	r2, [pc, #348]	; (8003818 <HAL_RCC_OscConfig+0x470>)
 80036ba:	f023 0301 	bic.w	r3, r3, #1
 80036be:	6713      	str	r3, [r2, #112]	; 0x70
 80036c0:	4b55      	ldr	r3, [pc, #340]	; (8003818 <HAL_RCC_OscConfig+0x470>)
 80036c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036c4:	4a54      	ldr	r2, [pc, #336]	; (8003818 <HAL_RCC_OscConfig+0x470>)
 80036c6:	f023 0304 	bic.w	r3, r3, #4
 80036ca:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	689b      	ldr	r3, [r3, #8]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d015      	beq.n	8003700 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036d4:	f7fd fcf4 	bl	80010c0 <HAL_GetTick>
 80036d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036da:	e00a      	b.n	80036f2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80036dc:	f7fd fcf0 	bl	80010c0 <HAL_GetTick>
 80036e0:	4602      	mov	r2, r0
 80036e2:	693b      	ldr	r3, [r7, #16]
 80036e4:	1ad3      	subs	r3, r2, r3
 80036e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d901      	bls.n	80036f2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80036ee:	2303      	movs	r3, #3
 80036f0:	e0cb      	b.n	800388a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036f2:	4b49      	ldr	r3, [pc, #292]	; (8003818 <HAL_RCC_OscConfig+0x470>)
 80036f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036f6:	f003 0302 	and.w	r3, r3, #2
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d0ee      	beq.n	80036dc <HAL_RCC_OscConfig+0x334>
 80036fe:	e014      	b.n	800372a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003700:	f7fd fcde 	bl	80010c0 <HAL_GetTick>
 8003704:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003706:	e00a      	b.n	800371e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003708:	f7fd fcda 	bl	80010c0 <HAL_GetTick>
 800370c:	4602      	mov	r2, r0
 800370e:	693b      	ldr	r3, [r7, #16]
 8003710:	1ad3      	subs	r3, r2, r3
 8003712:	f241 3288 	movw	r2, #5000	; 0x1388
 8003716:	4293      	cmp	r3, r2
 8003718:	d901      	bls.n	800371e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800371a:	2303      	movs	r3, #3
 800371c:	e0b5      	b.n	800388a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800371e:	4b3e      	ldr	r3, [pc, #248]	; (8003818 <HAL_RCC_OscConfig+0x470>)
 8003720:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003722:	f003 0302 	and.w	r3, r3, #2
 8003726:	2b00      	cmp	r3, #0
 8003728:	d1ee      	bne.n	8003708 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800372a:	7dfb      	ldrb	r3, [r7, #23]
 800372c:	2b01      	cmp	r3, #1
 800372e:	d105      	bne.n	800373c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003730:	4b39      	ldr	r3, [pc, #228]	; (8003818 <HAL_RCC_OscConfig+0x470>)
 8003732:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003734:	4a38      	ldr	r2, [pc, #224]	; (8003818 <HAL_RCC_OscConfig+0x470>)
 8003736:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800373a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	699b      	ldr	r3, [r3, #24]
 8003740:	2b00      	cmp	r3, #0
 8003742:	f000 80a1 	beq.w	8003888 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003746:	4b34      	ldr	r3, [pc, #208]	; (8003818 <HAL_RCC_OscConfig+0x470>)
 8003748:	689b      	ldr	r3, [r3, #8]
 800374a:	f003 030c 	and.w	r3, r3, #12
 800374e:	2b08      	cmp	r3, #8
 8003750:	d05c      	beq.n	800380c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	699b      	ldr	r3, [r3, #24]
 8003756:	2b02      	cmp	r3, #2
 8003758:	d141      	bne.n	80037de <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800375a:	4b31      	ldr	r3, [pc, #196]	; (8003820 <HAL_RCC_OscConfig+0x478>)
 800375c:	2200      	movs	r2, #0
 800375e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003760:	f7fd fcae 	bl	80010c0 <HAL_GetTick>
 8003764:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003766:	e008      	b.n	800377a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003768:	f7fd fcaa 	bl	80010c0 <HAL_GetTick>
 800376c:	4602      	mov	r2, r0
 800376e:	693b      	ldr	r3, [r7, #16]
 8003770:	1ad3      	subs	r3, r2, r3
 8003772:	2b02      	cmp	r3, #2
 8003774:	d901      	bls.n	800377a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003776:	2303      	movs	r3, #3
 8003778:	e087      	b.n	800388a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800377a:	4b27      	ldr	r3, [pc, #156]	; (8003818 <HAL_RCC_OscConfig+0x470>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003782:	2b00      	cmp	r3, #0
 8003784:	d1f0      	bne.n	8003768 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	69da      	ldr	r2, [r3, #28]
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6a1b      	ldr	r3, [r3, #32]
 800378e:	431a      	orrs	r2, r3
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003794:	019b      	lsls	r3, r3, #6
 8003796:	431a      	orrs	r2, r3
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800379c:	085b      	lsrs	r3, r3, #1
 800379e:	3b01      	subs	r3, #1
 80037a0:	041b      	lsls	r3, r3, #16
 80037a2:	431a      	orrs	r2, r3
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037a8:	061b      	lsls	r3, r3, #24
 80037aa:	491b      	ldr	r1, [pc, #108]	; (8003818 <HAL_RCC_OscConfig+0x470>)
 80037ac:	4313      	orrs	r3, r2
 80037ae:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80037b0:	4b1b      	ldr	r3, [pc, #108]	; (8003820 <HAL_RCC_OscConfig+0x478>)
 80037b2:	2201      	movs	r2, #1
 80037b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037b6:	f7fd fc83 	bl	80010c0 <HAL_GetTick>
 80037ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037bc:	e008      	b.n	80037d0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037be:	f7fd fc7f 	bl	80010c0 <HAL_GetTick>
 80037c2:	4602      	mov	r2, r0
 80037c4:	693b      	ldr	r3, [r7, #16]
 80037c6:	1ad3      	subs	r3, r2, r3
 80037c8:	2b02      	cmp	r3, #2
 80037ca:	d901      	bls.n	80037d0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80037cc:	2303      	movs	r3, #3
 80037ce:	e05c      	b.n	800388a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037d0:	4b11      	ldr	r3, [pc, #68]	; (8003818 <HAL_RCC_OscConfig+0x470>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d0f0      	beq.n	80037be <HAL_RCC_OscConfig+0x416>
 80037dc:	e054      	b.n	8003888 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037de:	4b10      	ldr	r3, [pc, #64]	; (8003820 <HAL_RCC_OscConfig+0x478>)
 80037e0:	2200      	movs	r2, #0
 80037e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037e4:	f7fd fc6c 	bl	80010c0 <HAL_GetTick>
 80037e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037ea:	e008      	b.n	80037fe <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037ec:	f7fd fc68 	bl	80010c0 <HAL_GetTick>
 80037f0:	4602      	mov	r2, r0
 80037f2:	693b      	ldr	r3, [r7, #16]
 80037f4:	1ad3      	subs	r3, r2, r3
 80037f6:	2b02      	cmp	r3, #2
 80037f8:	d901      	bls.n	80037fe <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80037fa:	2303      	movs	r3, #3
 80037fc:	e045      	b.n	800388a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037fe:	4b06      	ldr	r3, [pc, #24]	; (8003818 <HAL_RCC_OscConfig+0x470>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003806:	2b00      	cmp	r3, #0
 8003808:	d1f0      	bne.n	80037ec <HAL_RCC_OscConfig+0x444>
 800380a:	e03d      	b.n	8003888 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	699b      	ldr	r3, [r3, #24]
 8003810:	2b01      	cmp	r3, #1
 8003812:	d107      	bne.n	8003824 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003814:	2301      	movs	r3, #1
 8003816:	e038      	b.n	800388a <HAL_RCC_OscConfig+0x4e2>
 8003818:	40023800 	.word	0x40023800
 800381c:	40007000 	.word	0x40007000
 8003820:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003824:	4b1b      	ldr	r3, [pc, #108]	; (8003894 <HAL_RCC_OscConfig+0x4ec>)
 8003826:	685b      	ldr	r3, [r3, #4]
 8003828:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	699b      	ldr	r3, [r3, #24]
 800382e:	2b01      	cmp	r3, #1
 8003830:	d028      	beq.n	8003884 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800383c:	429a      	cmp	r2, r3
 800383e:	d121      	bne.n	8003884 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800384a:	429a      	cmp	r2, r3
 800384c:	d11a      	bne.n	8003884 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800384e:	68fa      	ldr	r2, [r7, #12]
 8003850:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003854:	4013      	ands	r3, r2
 8003856:	687a      	ldr	r2, [r7, #4]
 8003858:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800385a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800385c:	4293      	cmp	r3, r2
 800385e:	d111      	bne.n	8003884 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800386a:	085b      	lsrs	r3, r3, #1
 800386c:	3b01      	subs	r3, #1
 800386e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003870:	429a      	cmp	r2, r3
 8003872:	d107      	bne.n	8003884 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800387e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003880:	429a      	cmp	r2, r3
 8003882:	d001      	beq.n	8003888 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003884:	2301      	movs	r3, #1
 8003886:	e000      	b.n	800388a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003888:	2300      	movs	r3, #0
}
 800388a:	4618      	mov	r0, r3
 800388c:	3718      	adds	r7, #24
 800388e:	46bd      	mov	sp, r7
 8003890:	bd80      	pop	{r7, pc}
 8003892:	bf00      	nop
 8003894:	40023800 	.word	0x40023800

08003898 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	b084      	sub	sp, #16
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
 80038a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d101      	bne.n	80038ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80038a8:	2301      	movs	r3, #1
 80038aa:	e0cc      	b.n	8003a46 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80038ac:	4b68      	ldr	r3, [pc, #416]	; (8003a50 <HAL_RCC_ClockConfig+0x1b8>)
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f003 0307 	and.w	r3, r3, #7
 80038b4:	683a      	ldr	r2, [r7, #0]
 80038b6:	429a      	cmp	r2, r3
 80038b8:	d90c      	bls.n	80038d4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038ba:	4b65      	ldr	r3, [pc, #404]	; (8003a50 <HAL_RCC_ClockConfig+0x1b8>)
 80038bc:	683a      	ldr	r2, [r7, #0]
 80038be:	b2d2      	uxtb	r2, r2
 80038c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80038c2:	4b63      	ldr	r3, [pc, #396]	; (8003a50 <HAL_RCC_ClockConfig+0x1b8>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f003 0307 	and.w	r3, r3, #7
 80038ca:	683a      	ldr	r2, [r7, #0]
 80038cc:	429a      	cmp	r2, r3
 80038ce:	d001      	beq.n	80038d4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80038d0:	2301      	movs	r3, #1
 80038d2:	e0b8      	b.n	8003a46 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f003 0302 	and.w	r3, r3, #2
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d020      	beq.n	8003922 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f003 0304 	and.w	r3, r3, #4
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d005      	beq.n	80038f8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80038ec:	4b59      	ldr	r3, [pc, #356]	; (8003a54 <HAL_RCC_ClockConfig+0x1bc>)
 80038ee:	689b      	ldr	r3, [r3, #8]
 80038f0:	4a58      	ldr	r2, [pc, #352]	; (8003a54 <HAL_RCC_ClockConfig+0x1bc>)
 80038f2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80038f6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f003 0308 	and.w	r3, r3, #8
 8003900:	2b00      	cmp	r3, #0
 8003902:	d005      	beq.n	8003910 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003904:	4b53      	ldr	r3, [pc, #332]	; (8003a54 <HAL_RCC_ClockConfig+0x1bc>)
 8003906:	689b      	ldr	r3, [r3, #8]
 8003908:	4a52      	ldr	r2, [pc, #328]	; (8003a54 <HAL_RCC_ClockConfig+0x1bc>)
 800390a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800390e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003910:	4b50      	ldr	r3, [pc, #320]	; (8003a54 <HAL_RCC_ClockConfig+0x1bc>)
 8003912:	689b      	ldr	r3, [r3, #8]
 8003914:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	689b      	ldr	r3, [r3, #8]
 800391c:	494d      	ldr	r1, [pc, #308]	; (8003a54 <HAL_RCC_ClockConfig+0x1bc>)
 800391e:	4313      	orrs	r3, r2
 8003920:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f003 0301 	and.w	r3, r3, #1
 800392a:	2b00      	cmp	r3, #0
 800392c:	d044      	beq.n	80039b8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	685b      	ldr	r3, [r3, #4]
 8003932:	2b01      	cmp	r3, #1
 8003934:	d107      	bne.n	8003946 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003936:	4b47      	ldr	r3, [pc, #284]	; (8003a54 <HAL_RCC_ClockConfig+0x1bc>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800393e:	2b00      	cmp	r3, #0
 8003940:	d119      	bne.n	8003976 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003942:	2301      	movs	r3, #1
 8003944:	e07f      	b.n	8003a46 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	685b      	ldr	r3, [r3, #4]
 800394a:	2b02      	cmp	r3, #2
 800394c:	d003      	beq.n	8003956 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003952:	2b03      	cmp	r3, #3
 8003954:	d107      	bne.n	8003966 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003956:	4b3f      	ldr	r3, [pc, #252]	; (8003a54 <HAL_RCC_ClockConfig+0x1bc>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800395e:	2b00      	cmp	r3, #0
 8003960:	d109      	bne.n	8003976 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003962:	2301      	movs	r3, #1
 8003964:	e06f      	b.n	8003a46 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003966:	4b3b      	ldr	r3, [pc, #236]	; (8003a54 <HAL_RCC_ClockConfig+0x1bc>)
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f003 0302 	and.w	r3, r3, #2
 800396e:	2b00      	cmp	r3, #0
 8003970:	d101      	bne.n	8003976 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003972:	2301      	movs	r3, #1
 8003974:	e067      	b.n	8003a46 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003976:	4b37      	ldr	r3, [pc, #220]	; (8003a54 <HAL_RCC_ClockConfig+0x1bc>)
 8003978:	689b      	ldr	r3, [r3, #8]
 800397a:	f023 0203 	bic.w	r2, r3, #3
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	685b      	ldr	r3, [r3, #4]
 8003982:	4934      	ldr	r1, [pc, #208]	; (8003a54 <HAL_RCC_ClockConfig+0x1bc>)
 8003984:	4313      	orrs	r3, r2
 8003986:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003988:	f7fd fb9a 	bl	80010c0 <HAL_GetTick>
 800398c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800398e:	e00a      	b.n	80039a6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003990:	f7fd fb96 	bl	80010c0 <HAL_GetTick>
 8003994:	4602      	mov	r2, r0
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	1ad3      	subs	r3, r2, r3
 800399a:	f241 3288 	movw	r2, #5000	; 0x1388
 800399e:	4293      	cmp	r3, r2
 80039a0:	d901      	bls.n	80039a6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80039a2:	2303      	movs	r3, #3
 80039a4:	e04f      	b.n	8003a46 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039a6:	4b2b      	ldr	r3, [pc, #172]	; (8003a54 <HAL_RCC_ClockConfig+0x1bc>)
 80039a8:	689b      	ldr	r3, [r3, #8]
 80039aa:	f003 020c 	and.w	r2, r3, #12
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	685b      	ldr	r3, [r3, #4]
 80039b2:	009b      	lsls	r3, r3, #2
 80039b4:	429a      	cmp	r2, r3
 80039b6:	d1eb      	bne.n	8003990 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80039b8:	4b25      	ldr	r3, [pc, #148]	; (8003a50 <HAL_RCC_ClockConfig+0x1b8>)
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f003 0307 	and.w	r3, r3, #7
 80039c0:	683a      	ldr	r2, [r7, #0]
 80039c2:	429a      	cmp	r2, r3
 80039c4:	d20c      	bcs.n	80039e0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039c6:	4b22      	ldr	r3, [pc, #136]	; (8003a50 <HAL_RCC_ClockConfig+0x1b8>)
 80039c8:	683a      	ldr	r2, [r7, #0]
 80039ca:	b2d2      	uxtb	r2, r2
 80039cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80039ce:	4b20      	ldr	r3, [pc, #128]	; (8003a50 <HAL_RCC_ClockConfig+0x1b8>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f003 0307 	and.w	r3, r3, #7
 80039d6:	683a      	ldr	r2, [r7, #0]
 80039d8:	429a      	cmp	r2, r3
 80039da:	d001      	beq.n	80039e0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80039dc:	2301      	movs	r3, #1
 80039de:	e032      	b.n	8003a46 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f003 0304 	and.w	r3, r3, #4
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d008      	beq.n	80039fe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80039ec:	4b19      	ldr	r3, [pc, #100]	; (8003a54 <HAL_RCC_ClockConfig+0x1bc>)
 80039ee:	689b      	ldr	r3, [r3, #8]
 80039f0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	68db      	ldr	r3, [r3, #12]
 80039f8:	4916      	ldr	r1, [pc, #88]	; (8003a54 <HAL_RCC_ClockConfig+0x1bc>)
 80039fa:	4313      	orrs	r3, r2
 80039fc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f003 0308 	and.w	r3, r3, #8
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d009      	beq.n	8003a1e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003a0a:	4b12      	ldr	r3, [pc, #72]	; (8003a54 <HAL_RCC_ClockConfig+0x1bc>)
 8003a0c:	689b      	ldr	r3, [r3, #8]
 8003a0e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	691b      	ldr	r3, [r3, #16]
 8003a16:	00db      	lsls	r3, r3, #3
 8003a18:	490e      	ldr	r1, [pc, #56]	; (8003a54 <HAL_RCC_ClockConfig+0x1bc>)
 8003a1a:	4313      	orrs	r3, r2
 8003a1c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003a1e:	f000 f821 	bl	8003a64 <HAL_RCC_GetSysClockFreq>
 8003a22:	4602      	mov	r2, r0
 8003a24:	4b0b      	ldr	r3, [pc, #44]	; (8003a54 <HAL_RCC_ClockConfig+0x1bc>)
 8003a26:	689b      	ldr	r3, [r3, #8]
 8003a28:	091b      	lsrs	r3, r3, #4
 8003a2a:	f003 030f 	and.w	r3, r3, #15
 8003a2e:	490a      	ldr	r1, [pc, #40]	; (8003a58 <HAL_RCC_ClockConfig+0x1c0>)
 8003a30:	5ccb      	ldrb	r3, [r1, r3]
 8003a32:	fa22 f303 	lsr.w	r3, r2, r3
 8003a36:	4a09      	ldr	r2, [pc, #36]	; (8003a5c <HAL_RCC_ClockConfig+0x1c4>)
 8003a38:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003a3a:	4b09      	ldr	r3, [pc, #36]	; (8003a60 <HAL_RCC_ClockConfig+0x1c8>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	4618      	mov	r0, r3
 8003a40:	f7fd fafa 	bl	8001038 <HAL_InitTick>

  return HAL_OK;
 8003a44:	2300      	movs	r3, #0
}
 8003a46:	4618      	mov	r0, r3
 8003a48:	3710      	adds	r7, #16
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	bd80      	pop	{r7, pc}
 8003a4e:	bf00      	nop
 8003a50:	40023c00 	.word	0x40023c00
 8003a54:	40023800 	.word	0x40023800
 8003a58:	08009968 	.word	0x08009968
 8003a5c:	20000600 	.word	0x20000600
 8003a60:	20000604 	.word	0x20000604

08003a64 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a64:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003a68:	b090      	sub	sp, #64	; 0x40
 8003a6a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	637b      	str	r3, [r7, #52]	; 0x34
 8003a70:	2300      	movs	r3, #0
 8003a72:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003a74:	2300      	movs	r3, #0
 8003a76:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003a78:	2300      	movs	r3, #0
 8003a7a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003a7c:	4b59      	ldr	r3, [pc, #356]	; (8003be4 <HAL_RCC_GetSysClockFreq+0x180>)
 8003a7e:	689b      	ldr	r3, [r3, #8]
 8003a80:	f003 030c 	and.w	r3, r3, #12
 8003a84:	2b08      	cmp	r3, #8
 8003a86:	d00d      	beq.n	8003aa4 <HAL_RCC_GetSysClockFreq+0x40>
 8003a88:	2b08      	cmp	r3, #8
 8003a8a:	f200 80a1 	bhi.w	8003bd0 <HAL_RCC_GetSysClockFreq+0x16c>
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d002      	beq.n	8003a98 <HAL_RCC_GetSysClockFreq+0x34>
 8003a92:	2b04      	cmp	r3, #4
 8003a94:	d003      	beq.n	8003a9e <HAL_RCC_GetSysClockFreq+0x3a>
 8003a96:	e09b      	b.n	8003bd0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003a98:	4b53      	ldr	r3, [pc, #332]	; (8003be8 <HAL_RCC_GetSysClockFreq+0x184>)
 8003a9a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003a9c:	e09b      	b.n	8003bd6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003a9e:	4b53      	ldr	r3, [pc, #332]	; (8003bec <HAL_RCC_GetSysClockFreq+0x188>)
 8003aa0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003aa2:	e098      	b.n	8003bd6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003aa4:	4b4f      	ldr	r3, [pc, #316]	; (8003be4 <HAL_RCC_GetSysClockFreq+0x180>)
 8003aa6:	685b      	ldr	r3, [r3, #4]
 8003aa8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003aac:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003aae:	4b4d      	ldr	r3, [pc, #308]	; (8003be4 <HAL_RCC_GetSysClockFreq+0x180>)
 8003ab0:	685b      	ldr	r3, [r3, #4]
 8003ab2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d028      	beq.n	8003b0c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003aba:	4b4a      	ldr	r3, [pc, #296]	; (8003be4 <HAL_RCC_GetSysClockFreq+0x180>)
 8003abc:	685b      	ldr	r3, [r3, #4]
 8003abe:	099b      	lsrs	r3, r3, #6
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	623b      	str	r3, [r7, #32]
 8003ac4:	627a      	str	r2, [r7, #36]	; 0x24
 8003ac6:	6a3b      	ldr	r3, [r7, #32]
 8003ac8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003acc:	2100      	movs	r1, #0
 8003ace:	4b47      	ldr	r3, [pc, #284]	; (8003bec <HAL_RCC_GetSysClockFreq+0x188>)
 8003ad0:	fb03 f201 	mul.w	r2, r3, r1
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	fb00 f303 	mul.w	r3, r0, r3
 8003ada:	4413      	add	r3, r2
 8003adc:	4a43      	ldr	r2, [pc, #268]	; (8003bec <HAL_RCC_GetSysClockFreq+0x188>)
 8003ade:	fba0 1202 	umull	r1, r2, r0, r2
 8003ae2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003ae4:	460a      	mov	r2, r1
 8003ae6:	62ba      	str	r2, [r7, #40]	; 0x28
 8003ae8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003aea:	4413      	add	r3, r2
 8003aec:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003aee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003af0:	2200      	movs	r2, #0
 8003af2:	61bb      	str	r3, [r7, #24]
 8003af4:	61fa      	str	r2, [r7, #28]
 8003af6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003afa:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003afe:	f7fc fbbf 	bl	8000280 <__aeabi_uldivmod>
 8003b02:	4602      	mov	r2, r0
 8003b04:	460b      	mov	r3, r1
 8003b06:	4613      	mov	r3, r2
 8003b08:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003b0a:	e053      	b.n	8003bb4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b0c:	4b35      	ldr	r3, [pc, #212]	; (8003be4 <HAL_RCC_GetSysClockFreq+0x180>)
 8003b0e:	685b      	ldr	r3, [r3, #4]
 8003b10:	099b      	lsrs	r3, r3, #6
 8003b12:	2200      	movs	r2, #0
 8003b14:	613b      	str	r3, [r7, #16]
 8003b16:	617a      	str	r2, [r7, #20]
 8003b18:	693b      	ldr	r3, [r7, #16]
 8003b1a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003b1e:	f04f 0b00 	mov.w	fp, #0
 8003b22:	4652      	mov	r2, sl
 8003b24:	465b      	mov	r3, fp
 8003b26:	f04f 0000 	mov.w	r0, #0
 8003b2a:	f04f 0100 	mov.w	r1, #0
 8003b2e:	0159      	lsls	r1, r3, #5
 8003b30:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003b34:	0150      	lsls	r0, r2, #5
 8003b36:	4602      	mov	r2, r0
 8003b38:	460b      	mov	r3, r1
 8003b3a:	ebb2 080a 	subs.w	r8, r2, sl
 8003b3e:	eb63 090b 	sbc.w	r9, r3, fp
 8003b42:	f04f 0200 	mov.w	r2, #0
 8003b46:	f04f 0300 	mov.w	r3, #0
 8003b4a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003b4e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003b52:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003b56:	ebb2 0408 	subs.w	r4, r2, r8
 8003b5a:	eb63 0509 	sbc.w	r5, r3, r9
 8003b5e:	f04f 0200 	mov.w	r2, #0
 8003b62:	f04f 0300 	mov.w	r3, #0
 8003b66:	00eb      	lsls	r3, r5, #3
 8003b68:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003b6c:	00e2      	lsls	r2, r4, #3
 8003b6e:	4614      	mov	r4, r2
 8003b70:	461d      	mov	r5, r3
 8003b72:	eb14 030a 	adds.w	r3, r4, sl
 8003b76:	603b      	str	r3, [r7, #0]
 8003b78:	eb45 030b 	adc.w	r3, r5, fp
 8003b7c:	607b      	str	r3, [r7, #4]
 8003b7e:	f04f 0200 	mov.w	r2, #0
 8003b82:	f04f 0300 	mov.w	r3, #0
 8003b86:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003b8a:	4629      	mov	r1, r5
 8003b8c:	028b      	lsls	r3, r1, #10
 8003b8e:	4621      	mov	r1, r4
 8003b90:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003b94:	4621      	mov	r1, r4
 8003b96:	028a      	lsls	r2, r1, #10
 8003b98:	4610      	mov	r0, r2
 8003b9a:	4619      	mov	r1, r3
 8003b9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	60bb      	str	r3, [r7, #8]
 8003ba2:	60fa      	str	r2, [r7, #12]
 8003ba4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003ba8:	f7fc fb6a 	bl	8000280 <__aeabi_uldivmod>
 8003bac:	4602      	mov	r2, r0
 8003bae:	460b      	mov	r3, r1
 8003bb0:	4613      	mov	r3, r2
 8003bb2:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003bb4:	4b0b      	ldr	r3, [pc, #44]	; (8003be4 <HAL_RCC_GetSysClockFreq+0x180>)
 8003bb6:	685b      	ldr	r3, [r3, #4]
 8003bb8:	0c1b      	lsrs	r3, r3, #16
 8003bba:	f003 0303 	and.w	r3, r3, #3
 8003bbe:	3301      	adds	r3, #1
 8003bc0:	005b      	lsls	r3, r3, #1
 8003bc2:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003bc4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003bc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bcc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003bce:	e002      	b.n	8003bd6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003bd0:	4b05      	ldr	r3, [pc, #20]	; (8003be8 <HAL_RCC_GetSysClockFreq+0x184>)
 8003bd2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003bd4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003bd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003bd8:	4618      	mov	r0, r3
 8003bda:	3740      	adds	r7, #64	; 0x40
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003be2:	bf00      	nop
 8003be4:	40023800 	.word	0x40023800
 8003be8:	00f42400 	.word	0x00f42400
 8003bec:	017d7840 	.word	0x017d7840

08003bf0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003bf0:	b480      	push	{r7}
 8003bf2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003bf4:	4b03      	ldr	r3, [pc, #12]	; (8003c04 <HAL_RCC_GetHCLKFreq+0x14>)
 8003bf6:	681b      	ldr	r3, [r3, #0]
}
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c00:	4770      	bx	lr
 8003c02:	bf00      	nop
 8003c04:	20000600 	.word	0x20000600

08003c08 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b082      	sub	sp, #8
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d101      	bne.n	8003c1a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003c16:	2301      	movs	r3, #1
 8003c18:	e07b      	b.n	8003d12 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d108      	bne.n	8003c34 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	685b      	ldr	r3, [r3, #4]
 8003c26:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003c2a:	d009      	beq.n	8003c40 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2200      	movs	r2, #0
 8003c30:	61da      	str	r2, [r3, #28]
 8003c32:	e005      	b.n	8003c40 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2200      	movs	r2, #0
 8003c38:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2200      	movs	r2, #0
 8003c44:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003c4c:	b2db      	uxtb	r3, r3
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d106      	bne.n	8003c60 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	2200      	movs	r2, #0
 8003c56:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003c5a:	6878      	ldr	r0, [r7, #4]
 8003c5c:	f7fd f84a 	bl	8000cf4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2202      	movs	r2, #2
 8003c64:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	681a      	ldr	r2, [r3, #0]
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c76:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	685b      	ldr	r3, [r3, #4]
 8003c7c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	689b      	ldr	r3, [r3, #8]
 8003c84:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003c88:	431a      	orrs	r2, r3
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	68db      	ldr	r3, [r3, #12]
 8003c8e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c92:	431a      	orrs	r2, r3
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	691b      	ldr	r3, [r3, #16]
 8003c98:	f003 0302 	and.w	r3, r3, #2
 8003c9c:	431a      	orrs	r2, r3
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	695b      	ldr	r3, [r3, #20]
 8003ca2:	f003 0301 	and.w	r3, r3, #1
 8003ca6:	431a      	orrs	r2, r3
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	699b      	ldr	r3, [r3, #24]
 8003cac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003cb0:	431a      	orrs	r2, r3
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	69db      	ldr	r3, [r3, #28]
 8003cb6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003cba:	431a      	orrs	r2, r3
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6a1b      	ldr	r3, [r3, #32]
 8003cc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cc4:	ea42 0103 	orr.w	r1, r2, r3
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ccc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	430a      	orrs	r2, r1
 8003cd6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	699b      	ldr	r3, [r3, #24]
 8003cdc:	0c1b      	lsrs	r3, r3, #16
 8003cde:	f003 0104 	and.w	r1, r3, #4
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ce6:	f003 0210 	and.w	r2, r3, #16
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	430a      	orrs	r2, r1
 8003cf0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	69da      	ldr	r2, [r3, #28]
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003d00:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	2200      	movs	r2, #0
 8003d06:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2201      	movs	r2, #1
 8003d0c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003d10:	2300      	movs	r3, #0
}
 8003d12:	4618      	mov	r0, r3
 8003d14:	3708      	adds	r7, #8
 8003d16:	46bd      	mov	sp, r7
 8003d18:	bd80      	pop	{r7, pc}

08003d1a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003d1a:	b580      	push	{r7, lr}
 8003d1c:	b082      	sub	sp, #8
 8003d1e:	af00      	add	r7, sp, #0
 8003d20:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d101      	bne.n	8003d2c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003d28:	2301      	movs	r3, #1
 8003d2a:	e041      	b.n	8003db0 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d32:	b2db      	uxtb	r3, r3
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d106      	bne.n	8003d46 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003d40:	6878      	ldr	r0, [r7, #4]
 8003d42:	f7fd f81f 	bl	8000d84 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2202      	movs	r2, #2
 8003d4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681a      	ldr	r2, [r3, #0]
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	3304      	adds	r3, #4
 8003d56:	4619      	mov	r1, r3
 8003d58:	4610      	mov	r0, r2
 8003d5a:	f000 fb41 	bl	80043e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	2201      	movs	r2, #1
 8003d62:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2201      	movs	r2, #1
 8003d6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	2201      	movs	r2, #1
 8003d72:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	2201      	movs	r2, #1
 8003d7a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	2201      	movs	r2, #1
 8003d82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	2201      	movs	r2, #1
 8003d8a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	2201      	movs	r2, #1
 8003d92:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	2201      	movs	r2, #1
 8003d9a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	2201      	movs	r2, #1
 8003da2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	2201      	movs	r2, #1
 8003daa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003dae:	2300      	movs	r3, #0
}
 8003db0:	4618      	mov	r0, r3
 8003db2:	3708      	adds	r7, #8
 8003db4:	46bd      	mov	sp, r7
 8003db6:	bd80      	pop	{r7, pc}

08003db8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003db8:	b480      	push	{r7}
 8003dba:	b085      	sub	sp, #20
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003dc6:	b2db      	uxtb	r3, r3
 8003dc8:	2b01      	cmp	r3, #1
 8003dca:	d001      	beq.n	8003dd0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003dcc:	2301      	movs	r3, #1
 8003dce:	e046      	b.n	8003e5e <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2202      	movs	r2, #2
 8003dd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	4a23      	ldr	r2, [pc, #140]	; (8003e6c <HAL_TIM_Base_Start+0xb4>)
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d022      	beq.n	8003e28 <HAL_TIM_Base_Start+0x70>
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003dea:	d01d      	beq.n	8003e28 <HAL_TIM_Base_Start+0x70>
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4a1f      	ldr	r2, [pc, #124]	; (8003e70 <HAL_TIM_Base_Start+0xb8>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d018      	beq.n	8003e28 <HAL_TIM_Base_Start+0x70>
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	4a1e      	ldr	r2, [pc, #120]	; (8003e74 <HAL_TIM_Base_Start+0xbc>)
 8003dfc:	4293      	cmp	r3, r2
 8003dfe:	d013      	beq.n	8003e28 <HAL_TIM_Base_Start+0x70>
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	4a1c      	ldr	r2, [pc, #112]	; (8003e78 <HAL_TIM_Base_Start+0xc0>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d00e      	beq.n	8003e28 <HAL_TIM_Base_Start+0x70>
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	4a1b      	ldr	r2, [pc, #108]	; (8003e7c <HAL_TIM_Base_Start+0xc4>)
 8003e10:	4293      	cmp	r3, r2
 8003e12:	d009      	beq.n	8003e28 <HAL_TIM_Base_Start+0x70>
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	4a19      	ldr	r2, [pc, #100]	; (8003e80 <HAL_TIM_Base_Start+0xc8>)
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d004      	beq.n	8003e28 <HAL_TIM_Base_Start+0x70>
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	4a18      	ldr	r2, [pc, #96]	; (8003e84 <HAL_TIM_Base_Start+0xcc>)
 8003e24:	4293      	cmp	r3, r2
 8003e26:	d111      	bne.n	8003e4c <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	689b      	ldr	r3, [r3, #8]
 8003e2e:	f003 0307 	and.w	r3, r3, #7
 8003e32:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	2b06      	cmp	r3, #6
 8003e38:	d010      	beq.n	8003e5c <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	681a      	ldr	r2, [r3, #0]
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f042 0201 	orr.w	r2, r2, #1
 8003e48:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e4a:	e007      	b.n	8003e5c <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	681a      	ldr	r2, [r3, #0]
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f042 0201 	orr.w	r2, r2, #1
 8003e5a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003e5c:	2300      	movs	r3, #0
}
 8003e5e:	4618      	mov	r0, r3
 8003e60:	3714      	adds	r7, #20
 8003e62:	46bd      	mov	sp, r7
 8003e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e68:	4770      	bx	lr
 8003e6a:	bf00      	nop
 8003e6c:	40010000 	.word	0x40010000
 8003e70:	40000400 	.word	0x40000400
 8003e74:	40000800 	.word	0x40000800
 8003e78:	40000c00 	.word	0x40000c00
 8003e7c:	40010400 	.word	0x40010400
 8003e80:	40014000 	.word	0x40014000
 8003e84:	40001800 	.word	0x40001800

08003e88 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b082      	sub	sp, #8
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d101      	bne.n	8003e9a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003e96:	2301      	movs	r3, #1
 8003e98:	e041      	b.n	8003f1e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ea0:	b2db      	uxtb	r3, r3
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d106      	bne.n	8003eb4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003eae:	6878      	ldr	r0, [r7, #4]
 8003eb0:	f000 f839 	bl	8003f26 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2202      	movs	r2, #2
 8003eb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681a      	ldr	r2, [r3, #0]
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	3304      	adds	r3, #4
 8003ec4:	4619      	mov	r1, r3
 8003ec6:	4610      	mov	r0, r2
 8003ec8:	f000 fa8a 	bl	80043e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2201      	movs	r2, #1
 8003ed0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2201      	movs	r2, #1
 8003ed8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2201      	movs	r2, #1
 8003ee0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2201      	movs	r2, #1
 8003ee8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2201      	movs	r2, #1
 8003ef0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2201      	movs	r2, #1
 8003ef8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2201      	movs	r2, #1
 8003f00:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2201      	movs	r2, #1
 8003f08:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2201      	movs	r2, #1
 8003f10:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2201      	movs	r2, #1
 8003f18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003f1c:	2300      	movs	r3, #0
}
 8003f1e:	4618      	mov	r0, r3
 8003f20:	3708      	adds	r7, #8
 8003f22:	46bd      	mov	sp, r7
 8003f24:	bd80      	pop	{r7, pc}

08003f26 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003f26:	b480      	push	{r7}
 8003f28:	b083      	sub	sp, #12
 8003f2a:	af00      	add	r7, sp, #0
 8003f2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003f2e:	bf00      	nop
 8003f30:	370c      	adds	r7, #12
 8003f32:	46bd      	mov	sp, r7
 8003f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f38:	4770      	bx	lr
	...

08003f3c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b084      	sub	sp, #16
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
 8003f44:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003f46:	683b      	ldr	r3, [r7, #0]
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d109      	bne.n	8003f60 <HAL_TIM_PWM_Start+0x24>
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003f52:	b2db      	uxtb	r3, r3
 8003f54:	2b01      	cmp	r3, #1
 8003f56:	bf14      	ite	ne
 8003f58:	2301      	movne	r3, #1
 8003f5a:	2300      	moveq	r3, #0
 8003f5c:	b2db      	uxtb	r3, r3
 8003f5e:	e022      	b.n	8003fa6 <HAL_TIM_PWM_Start+0x6a>
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	2b04      	cmp	r3, #4
 8003f64:	d109      	bne.n	8003f7a <HAL_TIM_PWM_Start+0x3e>
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003f6c:	b2db      	uxtb	r3, r3
 8003f6e:	2b01      	cmp	r3, #1
 8003f70:	bf14      	ite	ne
 8003f72:	2301      	movne	r3, #1
 8003f74:	2300      	moveq	r3, #0
 8003f76:	b2db      	uxtb	r3, r3
 8003f78:	e015      	b.n	8003fa6 <HAL_TIM_PWM_Start+0x6a>
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	2b08      	cmp	r3, #8
 8003f7e:	d109      	bne.n	8003f94 <HAL_TIM_PWM_Start+0x58>
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003f86:	b2db      	uxtb	r3, r3
 8003f88:	2b01      	cmp	r3, #1
 8003f8a:	bf14      	ite	ne
 8003f8c:	2301      	movne	r3, #1
 8003f8e:	2300      	moveq	r3, #0
 8003f90:	b2db      	uxtb	r3, r3
 8003f92:	e008      	b.n	8003fa6 <HAL_TIM_PWM_Start+0x6a>
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f9a:	b2db      	uxtb	r3, r3
 8003f9c:	2b01      	cmp	r3, #1
 8003f9e:	bf14      	ite	ne
 8003fa0:	2301      	movne	r3, #1
 8003fa2:	2300      	moveq	r3, #0
 8003fa4:	b2db      	uxtb	r3, r3
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d001      	beq.n	8003fae <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003faa:	2301      	movs	r3, #1
 8003fac:	e07c      	b.n	80040a8 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003fae:	683b      	ldr	r3, [r7, #0]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d104      	bne.n	8003fbe <HAL_TIM_PWM_Start+0x82>
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2202      	movs	r2, #2
 8003fb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003fbc:	e013      	b.n	8003fe6 <HAL_TIM_PWM_Start+0xaa>
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	2b04      	cmp	r3, #4
 8003fc2:	d104      	bne.n	8003fce <HAL_TIM_PWM_Start+0x92>
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2202      	movs	r2, #2
 8003fc8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003fcc:	e00b      	b.n	8003fe6 <HAL_TIM_PWM_Start+0xaa>
 8003fce:	683b      	ldr	r3, [r7, #0]
 8003fd0:	2b08      	cmp	r3, #8
 8003fd2:	d104      	bne.n	8003fde <HAL_TIM_PWM_Start+0xa2>
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2202      	movs	r2, #2
 8003fd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003fdc:	e003      	b.n	8003fe6 <HAL_TIM_PWM_Start+0xaa>
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2202      	movs	r2, #2
 8003fe2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	2201      	movs	r2, #1
 8003fec:	6839      	ldr	r1, [r7, #0]
 8003fee:	4618      	mov	r0, r3
 8003ff0:	f000 fce0 	bl	80049b4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	4a2d      	ldr	r2, [pc, #180]	; (80040b0 <HAL_TIM_PWM_Start+0x174>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d004      	beq.n	8004008 <HAL_TIM_PWM_Start+0xcc>
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	4a2c      	ldr	r2, [pc, #176]	; (80040b4 <HAL_TIM_PWM_Start+0x178>)
 8004004:	4293      	cmp	r3, r2
 8004006:	d101      	bne.n	800400c <HAL_TIM_PWM_Start+0xd0>
 8004008:	2301      	movs	r3, #1
 800400a:	e000      	b.n	800400e <HAL_TIM_PWM_Start+0xd2>
 800400c:	2300      	movs	r3, #0
 800400e:	2b00      	cmp	r3, #0
 8004010:	d007      	beq.n	8004022 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004020:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	4a22      	ldr	r2, [pc, #136]	; (80040b0 <HAL_TIM_PWM_Start+0x174>)
 8004028:	4293      	cmp	r3, r2
 800402a:	d022      	beq.n	8004072 <HAL_TIM_PWM_Start+0x136>
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004034:	d01d      	beq.n	8004072 <HAL_TIM_PWM_Start+0x136>
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	4a1f      	ldr	r2, [pc, #124]	; (80040b8 <HAL_TIM_PWM_Start+0x17c>)
 800403c:	4293      	cmp	r3, r2
 800403e:	d018      	beq.n	8004072 <HAL_TIM_PWM_Start+0x136>
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	4a1d      	ldr	r2, [pc, #116]	; (80040bc <HAL_TIM_PWM_Start+0x180>)
 8004046:	4293      	cmp	r3, r2
 8004048:	d013      	beq.n	8004072 <HAL_TIM_PWM_Start+0x136>
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	4a1c      	ldr	r2, [pc, #112]	; (80040c0 <HAL_TIM_PWM_Start+0x184>)
 8004050:	4293      	cmp	r3, r2
 8004052:	d00e      	beq.n	8004072 <HAL_TIM_PWM_Start+0x136>
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	4a16      	ldr	r2, [pc, #88]	; (80040b4 <HAL_TIM_PWM_Start+0x178>)
 800405a:	4293      	cmp	r3, r2
 800405c:	d009      	beq.n	8004072 <HAL_TIM_PWM_Start+0x136>
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	4a18      	ldr	r2, [pc, #96]	; (80040c4 <HAL_TIM_PWM_Start+0x188>)
 8004064:	4293      	cmp	r3, r2
 8004066:	d004      	beq.n	8004072 <HAL_TIM_PWM_Start+0x136>
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	4a16      	ldr	r2, [pc, #88]	; (80040c8 <HAL_TIM_PWM_Start+0x18c>)
 800406e:	4293      	cmp	r3, r2
 8004070:	d111      	bne.n	8004096 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	689b      	ldr	r3, [r3, #8]
 8004078:	f003 0307 	and.w	r3, r3, #7
 800407c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	2b06      	cmp	r3, #6
 8004082:	d010      	beq.n	80040a6 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	681a      	ldr	r2, [r3, #0]
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f042 0201 	orr.w	r2, r2, #1
 8004092:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004094:	e007      	b.n	80040a6 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	681a      	ldr	r2, [r3, #0]
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f042 0201 	orr.w	r2, r2, #1
 80040a4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80040a6:	2300      	movs	r3, #0
}
 80040a8:	4618      	mov	r0, r3
 80040aa:	3710      	adds	r7, #16
 80040ac:	46bd      	mov	sp, r7
 80040ae:	bd80      	pop	{r7, pc}
 80040b0:	40010000 	.word	0x40010000
 80040b4:	40010400 	.word	0x40010400
 80040b8:	40000400 	.word	0x40000400
 80040bc:	40000800 	.word	0x40000800
 80040c0:	40000c00 	.word	0x40000c00
 80040c4:	40014000 	.word	0x40014000
 80040c8:	40001800 	.word	0x40001800

080040cc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	b086      	sub	sp, #24
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	60f8      	str	r0, [r7, #12]
 80040d4:	60b9      	str	r1, [r7, #8]
 80040d6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80040d8:	2300      	movs	r3, #0
 80040da:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80040e2:	2b01      	cmp	r3, #1
 80040e4:	d101      	bne.n	80040ea <HAL_TIM_PWM_ConfigChannel+0x1e>
 80040e6:	2302      	movs	r3, #2
 80040e8:	e0ae      	b.n	8004248 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	2201      	movs	r2, #1
 80040ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	2b0c      	cmp	r3, #12
 80040f6:	f200 809f 	bhi.w	8004238 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80040fa:	a201      	add	r2, pc, #4	; (adr r2, 8004100 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80040fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004100:	08004135 	.word	0x08004135
 8004104:	08004239 	.word	0x08004239
 8004108:	08004239 	.word	0x08004239
 800410c:	08004239 	.word	0x08004239
 8004110:	08004175 	.word	0x08004175
 8004114:	08004239 	.word	0x08004239
 8004118:	08004239 	.word	0x08004239
 800411c:	08004239 	.word	0x08004239
 8004120:	080041b7 	.word	0x080041b7
 8004124:	08004239 	.word	0x08004239
 8004128:	08004239 	.word	0x08004239
 800412c:	08004239 	.word	0x08004239
 8004130:	080041f7 	.word	0x080041f7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	68b9      	ldr	r1, [r7, #8]
 800413a:	4618      	mov	r0, r3
 800413c:	f000 f9f0 	bl	8004520 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	699a      	ldr	r2, [r3, #24]
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f042 0208 	orr.w	r2, r2, #8
 800414e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	699a      	ldr	r2, [r3, #24]
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f022 0204 	bic.w	r2, r2, #4
 800415e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	6999      	ldr	r1, [r3, #24]
 8004166:	68bb      	ldr	r3, [r7, #8]
 8004168:	691a      	ldr	r2, [r3, #16]
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	430a      	orrs	r2, r1
 8004170:	619a      	str	r2, [r3, #24]
      break;
 8004172:	e064      	b.n	800423e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	68b9      	ldr	r1, [r7, #8]
 800417a:	4618      	mov	r0, r3
 800417c:	f000 fa40 	bl	8004600 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	699a      	ldr	r2, [r3, #24]
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800418e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	699a      	ldr	r2, [r3, #24]
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800419e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	6999      	ldr	r1, [r3, #24]
 80041a6:	68bb      	ldr	r3, [r7, #8]
 80041a8:	691b      	ldr	r3, [r3, #16]
 80041aa:	021a      	lsls	r2, r3, #8
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	430a      	orrs	r2, r1
 80041b2:	619a      	str	r2, [r3, #24]
      break;
 80041b4:	e043      	b.n	800423e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	68b9      	ldr	r1, [r7, #8]
 80041bc:	4618      	mov	r0, r3
 80041be:	f000 fa95 	bl	80046ec <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	69da      	ldr	r2, [r3, #28]
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f042 0208 	orr.w	r2, r2, #8
 80041d0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	69da      	ldr	r2, [r3, #28]
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f022 0204 	bic.w	r2, r2, #4
 80041e0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	69d9      	ldr	r1, [r3, #28]
 80041e8:	68bb      	ldr	r3, [r7, #8]
 80041ea:	691a      	ldr	r2, [r3, #16]
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	430a      	orrs	r2, r1
 80041f2:	61da      	str	r2, [r3, #28]
      break;
 80041f4:	e023      	b.n	800423e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	68b9      	ldr	r1, [r7, #8]
 80041fc:	4618      	mov	r0, r3
 80041fe:	f000 fae9 	bl	80047d4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	69da      	ldr	r2, [r3, #28]
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004210:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	69da      	ldr	r2, [r3, #28]
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004220:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	69d9      	ldr	r1, [r3, #28]
 8004228:	68bb      	ldr	r3, [r7, #8]
 800422a:	691b      	ldr	r3, [r3, #16]
 800422c:	021a      	lsls	r2, r3, #8
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	430a      	orrs	r2, r1
 8004234:	61da      	str	r2, [r3, #28]
      break;
 8004236:	e002      	b.n	800423e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004238:	2301      	movs	r3, #1
 800423a:	75fb      	strb	r3, [r7, #23]
      break;
 800423c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	2200      	movs	r2, #0
 8004242:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004246:	7dfb      	ldrb	r3, [r7, #23]
}
 8004248:	4618      	mov	r0, r3
 800424a:	3718      	adds	r7, #24
 800424c:	46bd      	mov	sp, r7
 800424e:	bd80      	pop	{r7, pc}

08004250 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004250:	b580      	push	{r7, lr}
 8004252:	b084      	sub	sp, #16
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
 8004258:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800425a:	2300      	movs	r3, #0
 800425c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004264:	2b01      	cmp	r3, #1
 8004266:	d101      	bne.n	800426c <HAL_TIM_ConfigClockSource+0x1c>
 8004268:	2302      	movs	r3, #2
 800426a:	e0b4      	b.n	80043d6 <HAL_TIM_ConfigClockSource+0x186>
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2201      	movs	r2, #1
 8004270:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2202      	movs	r2, #2
 8004278:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	689b      	ldr	r3, [r3, #8]
 8004282:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004284:	68bb      	ldr	r3, [r7, #8]
 8004286:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800428a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800428c:	68bb      	ldr	r3, [r7, #8]
 800428e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004292:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	68ba      	ldr	r2, [r7, #8]
 800429a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80042a4:	d03e      	beq.n	8004324 <HAL_TIM_ConfigClockSource+0xd4>
 80042a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80042aa:	f200 8087 	bhi.w	80043bc <HAL_TIM_ConfigClockSource+0x16c>
 80042ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042b2:	f000 8086 	beq.w	80043c2 <HAL_TIM_ConfigClockSource+0x172>
 80042b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042ba:	d87f      	bhi.n	80043bc <HAL_TIM_ConfigClockSource+0x16c>
 80042bc:	2b70      	cmp	r3, #112	; 0x70
 80042be:	d01a      	beq.n	80042f6 <HAL_TIM_ConfigClockSource+0xa6>
 80042c0:	2b70      	cmp	r3, #112	; 0x70
 80042c2:	d87b      	bhi.n	80043bc <HAL_TIM_ConfigClockSource+0x16c>
 80042c4:	2b60      	cmp	r3, #96	; 0x60
 80042c6:	d050      	beq.n	800436a <HAL_TIM_ConfigClockSource+0x11a>
 80042c8:	2b60      	cmp	r3, #96	; 0x60
 80042ca:	d877      	bhi.n	80043bc <HAL_TIM_ConfigClockSource+0x16c>
 80042cc:	2b50      	cmp	r3, #80	; 0x50
 80042ce:	d03c      	beq.n	800434a <HAL_TIM_ConfigClockSource+0xfa>
 80042d0:	2b50      	cmp	r3, #80	; 0x50
 80042d2:	d873      	bhi.n	80043bc <HAL_TIM_ConfigClockSource+0x16c>
 80042d4:	2b40      	cmp	r3, #64	; 0x40
 80042d6:	d058      	beq.n	800438a <HAL_TIM_ConfigClockSource+0x13a>
 80042d8:	2b40      	cmp	r3, #64	; 0x40
 80042da:	d86f      	bhi.n	80043bc <HAL_TIM_ConfigClockSource+0x16c>
 80042dc:	2b30      	cmp	r3, #48	; 0x30
 80042de:	d064      	beq.n	80043aa <HAL_TIM_ConfigClockSource+0x15a>
 80042e0:	2b30      	cmp	r3, #48	; 0x30
 80042e2:	d86b      	bhi.n	80043bc <HAL_TIM_ConfigClockSource+0x16c>
 80042e4:	2b20      	cmp	r3, #32
 80042e6:	d060      	beq.n	80043aa <HAL_TIM_ConfigClockSource+0x15a>
 80042e8:	2b20      	cmp	r3, #32
 80042ea:	d867      	bhi.n	80043bc <HAL_TIM_ConfigClockSource+0x16c>
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d05c      	beq.n	80043aa <HAL_TIM_ConfigClockSource+0x15a>
 80042f0:	2b10      	cmp	r3, #16
 80042f2:	d05a      	beq.n	80043aa <HAL_TIM_ConfigClockSource+0x15a>
 80042f4:	e062      	b.n	80043bc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6818      	ldr	r0, [r3, #0]
 80042fa:	683b      	ldr	r3, [r7, #0]
 80042fc:	6899      	ldr	r1, [r3, #8]
 80042fe:	683b      	ldr	r3, [r7, #0]
 8004300:	685a      	ldr	r2, [r3, #4]
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	68db      	ldr	r3, [r3, #12]
 8004306:	f000 fb35 	bl	8004974 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	689b      	ldr	r3, [r3, #8]
 8004310:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004312:	68bb      	ldr	r3, [r7, #8]
 8004314:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004318:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	68ba      	ldr	r2, [r7, #8]
 8004320:	609a      	str	r2, [r3, #8]
      break;
 8004322:	e04f      	b.n	80043c4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6818      	ldr	r0, [r3, #0]
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	6899      	ldr	r1, [r3, #8]
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	685a      	ldr	r2, [r3, #4]
 8004330:	683b      	ldr	r3, [r7, #0]
 8004332:	68db      	ldr	r3, [r3, #12]
 8004334:	f000 fb1e 	bl	8004974 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	689a      	ldr	r2, [r3, #8]
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004346:	609a      	str	r2, [r3, #8]
      break;
 8004348:	e03c      	b.n	80043c4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6818      	ldr	r0, [r3, #0]
 800434e:	683b      	ldr	r3, [r7, #0]
 8004350:	6859      	ldr	r1, [r3, #4]
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	68db      	ldr	r3, [r3, #12]
 8004356:	461a      	mov	r2, r3
 8004358:	f000 fa92 	bl	8004880 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	2150      	movs	r1, #80	; 0x50
 8004362:	4618      	mov	r0, r3
 8004364:	f000 faeb 	bl	800493e <TIM_ITRx_SetConfig>
      break;
 8004368:	e02c      	b.n	80043c4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6818      	ldr	r0, [r3, #0]
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	6859      	ldr	r1, [r3, #4]
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	68db      	ldr	r3, [r3, #12]
 8004376:	461a      	mov	r2, r3
 8004378:	f000 fab1 	bl	80048de <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	2160      	movs	r1, #96	; 0x60
 8004382:	4618      	mov	r0, r3
 8004384:	f000 fadb 	bl	800493e <TIM_ITRx_SetConfig>
      break;
 8004388:	e01c      	b.n	80043c4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6818      	ldr	r0, [r3, #0]
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	6859      	ldr	r1, [r3, #4]
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	68db      	ldr	r3, [r3, #12]
 8004396:	461a      	mov	r2, r3
 8004398:	f000 fa72 	bl	8004880 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	2140      	movs	r1, #64	; 0x40
 80043a2:	4618      	mov	r0, r3
 80043a4:	f000 facb 	bl	800493e <TIM_ITRx_SetConfig>
      break;
 80043a8:	e00c      	b.n	80043c4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681a      	ldr	r2, [r3, #0]
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	4619      	mov	r1, r3
 80043b4:	4610      	mov	r0, r2
 80043b6:	f000 fac2 	bl	800493e <TIM_ITRx_SetConfig>
      break;
 80043ba:	e003      	b.n	80043c4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80043bc:	2301      	movs	r3, #1
 80043be:	73fb      	strb	r3, [r7, #15]
      break;
 80043c0:	e000      	b.n	80043c4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80043c2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2201      	movs	r2, #1
 80043c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2200      	movs	r2, #0
 80043d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80043d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80043d6:	4618      	mov	r0, r3
 80043d8:	3710      	adds	r7, #16
 80043da:	46bd      	mov	sp, r7
 80043dc:	bd80      	pop	{r7, pc}
	...

080043e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80043e0:	b480      	push	{r7}
 80043e2:	b085      	sub	sp, #20
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
 80043e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	4a40      	ldr	r2, [pc, #256]	; (80044f4 <TIM_Base_SetConfig+0x114>)
 80043f4:	4293      	cmp	r3, r2
 80043f6:	d013      	beq.n	8004420 <TIM_Base_SetConfig+0x40>
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043fe:	d00f      	beq.n	8004420 <TIM_Base_SetConfig+0x40>
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	4a3d      	ldr	r2, [pc, #244]	; (80044f8 <TIM_Base_SetConfig+0x118>)
 8004404:	4293      	cmp	r3, r2
 8004406:	d00b      	beq.n	8004420 <TIM_Base_SetConfig+0x40>
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	4a3c      	ldr	r2, [pc, #240]	; (80044fc <TIM_Base_SetConfig+0x11c>)
 800440c:	4293      	cmp	r3, r2
 800440e:	d007      	beq.n	8004420 <TIM_Base_SetConfig+0x40>
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	4a3b      	ldr	r2, [pc, #236]	; (8004500 <TIM_Base_SetConfig+0x120>)
 8004414:	4293      	cmp	r3, r2
 8004416:	d003      	beq.n	8004420 <TIM_Base_SetConfig+0x40>
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	4a3a      	ldr	r2, [pc, #232]	; (8004504 <TIM_Base_SetConfig+0x124>)
 800441c:	4293      	cmp	r3, r2
 800441e:	d108      	bne.n	8004432 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004426:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	685b      	ldr	r3, [r3, #4]
 800442c:	68fa      	ldr	r2, [r7, #12]
 800442e:	4313      	orrs	r3, r2
 8004430:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	4a2f      	ldr	r2, [pc, #188]	; (80044f4 <TIM_Base_SetConfig+0x114>)
 8004436:	4293      	cmp	r3, r2
 8004438:	d02b      	beq.n	8004492 <TIM_Base_SetConfig+0xb2>
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004440:	d027      	beq.n	8004492 <TIM_Base_SetConfig+0xb2>
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	4a2c      	ldr	r2, [pc, #176]	; (80044f8 <TIM_Base_SetConfig+0x118>)
 8004446:	4293      	cmp	r3, r2
 8004448:	d023      	beq.n	8004492 <TIM_Base_SetConfig+0xb2>
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	4a2b      	ldr	r2, [pc, #172]	; (80044fc <TIM_Base_SetConfig+0x11c>)
 800444e:	4293      	cmp	r3, r2
 8004450:	d01f      	beq.n	8004492 <TIM_Base_SetConfig+0xb2>
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	4a2a      	ldr	r2, [pc, #168]	; (8004500 <TIM_Base_SetConfig+0x120>)
 8004456:	4293      	cmp	r3, r2
 8004458:	d01b      	beq.n	8004492 <TIM_Base_SetConfig+0xb2>
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	4a29      	ldr	r2, [pc, #164]	; (8004504 <TIM_Base_SetConfig+0x124>)
 800445e:	4293      	cmp	r3, r2
 8004460:	d017      	beq.n	8004492 <TIM_Base_SetConfig+0xb2>
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	4a28      	ldr	r2, [pc, #160]	; (8004508 <TIM_Base_SetConfig+0x128>)
 8004466:	4293      	cmp	r3, r2
 8004468:	d013      	beq.n	8004492 <TIM_Base_SetConfig+0xb2>
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	4a27      	ldr	r2, [pc, #156]	; (800450c <TIM_Base_SetConfig+0x12c>)
 800446e:	4293      	cmp	r3, r2
 8004470:	d00f      	beq.n	8004492 <TIM_Base_SetConfig+0xb2>
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	4a26      	ldr	r2, [pc, #152]	; (8004510 <TIM_Base_SetConfig+0x130>)
 8004476:	4293      	cmp	r3, r2
 8004478:	d00b      	beq.n	8004492 <TIM_Base_SetConfig+0xb2>
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	4a25      	ldr	r2, [pc, #148]	; (8004514 <TIM_Base_SetConfig+0x134>)
 800447e:	4293      	cmp	r3, r2
 8004480:	d007      	beq.n	8004492 <TIM_Base_SetConfig+0xb2>
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	4a24      	ldr	r2, [pc, #144]	; (8004518 <TIM_Base_SetConfig+0x138>)
 8004486:	4293      	cmp	r3, r2
 8004488:	d003      	beq.n	8004492 <TIM_Base_SetConfig+0xb2>
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	4a23      	ldr	r2, [pc, #140]	; (800451c <TIM_Base_SetConfig+0x13c>)
 800448e:	4293      	cmp	r3, r2
 8004490:	d108      	bne.n	80044a4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004498:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800449a:	683b      	ldr	r3, [r7, #0]
 800449c:	68db      	ldr	r3, [r3, #12]
 800449e:	68fa      	ldr	r2, [r7, #12]
 80044a0:	4313      	orrs	r3, r2
 80044a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	695b      	ldr	r3, [r3, #20]
 80044ae:	4313      	orrs	r3, r2
 80044b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	68fa      	ldr	r2, [r7, #12]
 80044b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	689a      	ldr	r2, [r3, #8]
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	681a      	ldr	r2, [r3, #0]
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	4a0a      	ldr	r2, [pc, #40]	; (80044f4 <TIM_Base_SetConfig+0x114>)
 80044cc:	4293      	cmp	r3, r2
 80044ce:	d003      	beq.n	80044d8 <TIM_Base_SetConfig+0xf8>
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	4a0c      	ldr	r2, [pc, #48]	; (8004504 <TIM_Base_SetConfig+0x124>)
 80044d4:	4293      	cmp	r3, r2
 80044d6:	d103      	bne.n	80044e0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80044d8:	683b      	ldr	r3, [r7, #0]
 80044da:	691a      	ldr	r2, [r3, #16]
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2201      	movs	r2, #1
 80044e4:	615a      	str	r2, [r3, #20]
}
 80044e6:	bf00      	nop
 80044e8:	3714      	adds	r7, #20
 80044ea:	46bd      	mov	sp, r7
 80044ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f0:	4770      	bx	lr
 80044f2:	bf00      	nop
 80044f4:	40010000 	.word	0x40010000
 80044f8:	40000400 	.word	0x40000400
 80044fc:	40000800 	.word	0x40000800
 8004500:	40000c00 	.word	0x40000c00
 8004504:	40010400 	.word	0x40010400
 8004508:	40014000 	.word	0x40014000
 800450c:	40014400 	.word	0x40014400
 8004510:	40014800 	.word	0x40014800
 8004514:	40001800 	.word	0x40001800
 8004518:	40001c00 	.word	0x40001c00
 800451c:	40002000 	.word	0x40002000

08004520 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004520:	b480      	push	{r7}
 8004522:	b087      	sub	sp, #28
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
 8004528:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6a1b      	ldr	r3, [r3, #32]
 800452e:	f023 0201 	bic.w	r2, r3, #1
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6a1b      	ldr	r3, [r3, #32]
 800453a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	685b      	ldr	r3, [r3, #4]
 8004540:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	699b      	ldr	r3, [r3, #24]
 8004546:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800454e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	f023 0303 	bic.w	r3, r3, #3
 8004556:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	68fa      	ldr	r2, [r7, #12]
 800455e:	4313      	orrs	r3, r2
 8004560:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004562:	697b      	ldr	r3, [r7, #20]
 8004564:	f023 0302 	bic.w	r3, r3, #2
 8004568:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	689b      	ldr	r3, [r3, #8]
 800456e:	697a      	ldr	r2, [r7, #20]
 8004570:	4313      	orrs	r3, r2
 8004572:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	4a20      	ldr	r2, [pc, #128]	; (80045f8 <TIM_OC1_SetConfig+0xd8>)
 8004578:	4293      	cmp	r3, r2
 800457a:	d003      	beq.n	8004584 <TIM_OC1_SetConfig+0x64>
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	4a1f      	ldr	r2, [pc, #124]	; (80045fc <TIM_OC1_SetConfig+0xdc>)
 8004580:	4293      	cmp	r3, r2
 8004582:	d10c      	bne.n	800459e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004584:	697b      	ldr	r3, [r7, #20]
 8004586:	f023 0308 	bic.w	r3, r3, #8
 800458a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	68db      	ldr	r3, [r3, #12]
 8004590:	697a      	ldr	r2, [r7, #20]
 8004592:	4313      	orrs	r3, r2
 8004594:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004596:	697b      	ldr	r3, [r7, #20]
 8004598:	f023 0304 	bic.w	r3, r3, #4
 800459c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	4a15      	ldr	r2, [pc, #84]	; (80045f8 <TIM_OC1_SetConfig+0xd8>)
 80045a2:	4293      	cmp	r3, r2
 80045a4:	d003      	beq.n	80045ae <TIM_OC1_SetConfig+0x8e>
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	4a14      	ldr	r2, [pc, #80]	; (80045fc <TIM_OC1_SetConfig+0xdc>)
 80045aa:	4293      	cmp	r3, r2
 80045ac:	d111      	bne.n	80045d2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80045ae:	693b      	ldr	r3, [r7, #16]
 80045b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80045b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80045b6:	693b      	ldr	r3, [r7, #16]
 80045b8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80045bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	695b      	ldr	r3, [r3, #20]
 80045c2:	693a      	ldr	r2, [r7, #16]
 80045c4:	4313      	orrs	r3, r2
 80045c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	699b      	ldr	r3, [r3, #24]
 80045cc:	693a      	ldr	r2, [r7, #16]
 80045ce:	4313      	orrs	r3, r2
 80045d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	693a      	ldr	r2, [r7, #16]
 80045d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	68fa      	ldr	r2, [r7, #12]
 80045dc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	685a      	ldr	r2, [r3, #4]
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	697a      	ldr	r2, [r7, #20]
 80045ea:	621a      	str	r2, [r3, #32]
}
 80045ec:	bf00      	nop
 80045ee:	371c      	adds	r7, #28
 80045f0:	46bd      	mov	sp, r7
 80045f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f6:	4770      	bx	lr
 80045f8:	40010000 	.word	0x40010000
 80045fc:	40010400 	.word	0x40010400

08004600 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004600:	b480      	push	{r7}
 8004602:	b087      	sub	sp, #28
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
 8004608:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6a1b      	ldr	r3, [r3, #32]
 800460e:	f023 0210 	bic.w	r2, r3, #16
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6a1b      	ldr	r3, [r3, #32]
 800461a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	685b      	ldr	r3, [r3, #4]
 8004620:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	699b      	ldr	r3, [r3, #24]
 8004626:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800462e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004636:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	021b      	lsls	r3, r3, #8
 800463e:	68fa      	ldr	r2, [r7, #12]
 8004640:	4313      	orrs	r3, r2
 8004642:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004644:	697b      	ldr	r3, [r7, #20]
 8004646:	f023 0320 	bic.w	r3, r3, #32
 800464a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	689b      	ldr	r3, [r3, #8]
 8004650:	011b      	lsls	r3, r3, #4
 8004652:	697a      	ldr	r2, [r7, #20]
 8004654:	4313      	orrs	r3, r2
 8004656:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	4a22      	ldr	r2, [pc, #136]	; (80046e4 <TIM_OC2_SetConfig+0xe4>)
 800465c:	4293      	cmp	r3, r2
 800465e:	d003      	beq.n	8004668 <TIM_OC2_SetConfig+0x68>
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	4a21      	ldr	r2, [pc, #132]	; (80046e8 <TIM_OC2_SetConfig+0xe8>)
 8004664:	4293      	cmp	r3, r2
 8004666:	d10d      	bne.n	8004684 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004668:	697b      	ldr	r3, [r7, #20]
 800466a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800466e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	68db      	ldr	r3, [r3, #12]
 8004674:	011b      	lsls	r3, r3, #4
 8004676:	697a      	ldr	r2, [r7, #20]
 8004678:	4313      	orrs	r3, r2
 800467a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800467c:	697b      	ldr	r3, [r7, #20]
 800467e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004682:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	4a17      	ldr	r2, [pc, #92]	; (80046e4 <TIM_OC2_SetConfig+0xe4>)
 8004688:	4293      	cmp	r3, r2
 800468a:	d003      	beq.n	8004694 <TIM_OC2_SetConfig+0x94>
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	4a16      	ldr	r2, [pc, #88]	; (80046e8 <TIM_OC2_SetConfig+0xe8>)
 8004690:	4293      	cmp	r3, r2
 8004692:	d113      	bne.n	80046bc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004694:	693b      	ldr	r3, [r7, #16]
 8004696:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800469a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800469c:	693b      	ldr	r3, [r7, #16]
 800469e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80046a2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	695b      	ldr	r3, [r3, #20]
 80046a8:	009b      	lsls	r3, r3, #2
 80046aa:	693a      	ldr	r2, [r7, #16]
 80046ac:	4313      	orrs	r3, r2
 80046ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80046b0:	683b      	ldr	r3, [r7, #0]
 80046b2:	699b      	ldr	r3, [r3, #24]
 80046b4:	009b      	lsls	r3, r3, #2
 80046b6:	693a      	ldr	r2, [r7, #16]
 80046b8:	4313      	orrs	r3, r2
 80046ba:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	693a      	ldr	r2, [r7, #16]
 80046c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	68fa      	ldr	r2, [r7, #12]
 80046c6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	685a      	ldr	r2, [r3, #4]
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	697a      	ldr	r2, [r7, #20]
 80046d4:	621a      	str	r2, [r3, #32]
}
 80046d6:	bf00      	nop
 80046d8:	371c      	adds	r7, #28
 80046da:	46bd      	mov	sp, r7
 80046dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e0:	4770      	bx	lr
 80046e2:	bf00      	nop
 80046e4:	40010000 	.word	0x40010000
 80046e8:	40010400 	.word	0x40010400

080046ec <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80046ec:	b480      	push	{r7}
 80046ee:	b087      	sub	sp, #28
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
 80046f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6a1b      	ldr	r3, [r3, #32]
 80046fa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6a1b      	ldr	r3, [r3, #32]
 8004706:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	685b      	ldr	r3, [r3, #4]
 800470c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	69db      	ldr	r3, [r3, #28]
 8004712:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800471a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	f023 0303 	bic.w	r3, r3, #3
 8004722:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004724:	683b      	ldr	r3, [r7, #0]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	68fa      	ldr	r2, [r7, #12]
 800472a:	4313      	orrs	r3, r2
 800472c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800472e:	697b      	ldr	r3, [r7, #20]
 8004730:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004734:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	689b      	ldr	r3, [r3, #8]
 800473a:	021b      	lsls	r3, r3, #8
 800473c:	697a      	ldr	r2, [r7, #20]
 800473e:	4313      	orrs	r3, r2
 8004740:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	4a21      	ldr	r2, [pc, #132]	; (80047cc <TIM_OC3_SetConfig+0xe0>)
 8004746:	4293      	cmp	r3, r2
 8004748:	d003      	beq.n	8004752 <TIM_OC3_SetConfig+0x66>
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	4a20      	ldr	r2, [pc, #128]	; (80047d0 <TIM_OC3_SetConfig+0xe4>)
 800474e:	4293      	cmp	r3, r2
 8004750:	d10d      	bne.n	800476e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004752:	697b      	ldr	r3, [r7, #20]
 8004754:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004758:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800475a:	683b      	ldr	r3, [r7, #0]
 800475c:	68db      	ldr	r3, [r3, #12]
 800475e:	021b      	lsls	r3, r3, #8
 8004760:	697a      	ldr	r2, [r7, #20]
 8004762:	4313      	orrs	r3, r2
 8004764:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004766:	697b      	ldr	r3, [r7, #20]
 8004768:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800476c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	4a16      	ldr	r2, [pc, #88]	; (80047cc <TIM_OC3_SetConfig+0xe0>)
 8004772:	4293      	cmp	r3, r2
 8004774:	d003      	beq.n	800477e <TIM_OC3_SetConfig+0x92>
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	4a15      	ldr	r2, [pc, #84]	; (80047d0 <TIM_OC3_SetConfig+0xe4>)
 800477a:	4293      	cmp	r3, r2
 800477c:	d113      	bne.n	80047a6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800477e:	693b      	ldr	r3, [r7, #16]
 8004780:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004784:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004786:	693b      	ldr	r3, [r7, #16]
 8004788:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800478c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	695b      	ldr	r3, [r3, #20]
 8004792:	011b      	lsls	r3, r3, #4
 8004794:	693a      	ldr	r2, [r7, #16]
 8004796:	4313      	orrs	r3, r2
 8004798:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	699b      	ldr	r3, [r3, #24]
 800479e:	011b      	lsls	r3, r3, #4
 80047a0:	693a      	ldr	r2, [r7, #16]
 80047a2:	4313      	orrs	r3, r2
 80047a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	693a      	ldr	r2, [r7, #16]
 80047aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	68fa      	ldr	r2, [r7, #12]
 80047b0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	685a      	ldr	r2, [r3, #4]
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	697a      	ldr	r2, [r7, #20]
 80047be:	621a      	str	r2, [r3, #32]
}
 80047c0:	bf00      	nop
 80047c2:	371c      	adds	r7, #28
 80047c4:	46bd      	mov	sp, r7
 80047c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ca:	4770      	bx	lr
 80047cc:	40010000 	.word	0x40010000
 80047d0:	40010400 	.word	0x40010400

080047d4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80047d4:	b480      	push	{r7}
 80047d6:	b087      	sub	sp, #28
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
 80047dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6a1b      	ldr	r3, [r3, #32]
 80047e2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6a1b      	ldr	r3, [r3, #32]
 80047ee:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	685b      	ldr	r3, [r3, #4]
 80047f4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	69db      	ldr	r3, [r3, #28]
 80047fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004802:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800480a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	021b      	lsls	r3, r3, #8
 8004812:	68fa      	ldr	r2, [r7, #12]
 8004814:	4313      	orrs	r3, r2
 8004816:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004818:	693b      	ldr	r3, [r7, #16]
 800481a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800481e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	689b      	ldr	r3, [r3, #8]
 8004824:	031b      	lsls	r3, r3, #12
 8004826:	693a      	ldr	r2, [r7, #16]
 8004828:	4313      	orrs	r3, r2
 800482a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	4a12      	ldr	r2, [pc, #72]	; (8004878 <TIM_OC4_SetConfig+0xa4>)
 8004830:	4293      	cmp	r3, r2
 8004832:	d003      	beq.n	800483c <TIM_OC4_SetConfig+0x68>
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	4a11      	ldr	r2, [pc, #68]	; (800487c <TIM_OC4_SetConfig+0xa8>)
 8004838:	4293      	cmp	r3, r2
 800483a:	d109      	bne.n	8004850 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800483c:	697b      	ldr	r3, [r7, #20]
 800483e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004842:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	695b      	ldr	r3, [r3, #20]
 8004848:	019b      	lsls	r3, r3, #6
 800484a:	697a      	ldr	r2, [r7, #20]
 800484c:	4313      	orrs	r3, r2
 800484e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	697a      	ldr	r2, [r7, #20]
 8004854:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	68fa      	ldr	r2, [r7, #12]
 800485a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800485c:	683b      	ldr	r3, [r7, #0]
 800485e:	685a      	ldr	r2, [r3, #4]
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	693a      	ldr	r2, [r7, #16]
 8004868:	621a      	str	r2, [r3, #32]
}
 800486a:	bf00      	nop
 800486c:	371c      	adds	r7, #28
 800486e:	46bd      	mov	sp, r7
 8004870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004874:	4770      	bx	lr
 8004876:	bf00      	nop
 8004878:	40010000 	.word	0x40010000
 800487c:	40010400 	.word	0x40010400

08004880 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004880:	b480      	push	{r7}
 8004882:	b087      	sub	sp, #28
 8004884:	af00      	add	r7, sp, #0
 8004886:	60f8      	str	r0, [r7, #12]
 8004888:	60b9      	str	r1, [r7, #8]
 800488a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	6a1b      	ldr	r3, [r3, #32]
 8004890:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	6a1b      	ldr	r3, [r3, #32]
 8004896:	f023 0201 	bic.w	r2, r3, #1
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	699b      	ldr	r3, [r3, #24]
 80048a2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80048a4:	693b      	ldr	r3, [r7, #16]
 80048a6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80048aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	011b      	lsls	r3, r3, #4
 80048b0:	693a      	ldr	r2, [r7, #16]
 80048b2:	4313      	orrs	r3, r2
 80048b4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80048b6:	697b      	ldr	r3, [r7, #20]
 80048b8:	f023 030a 	bic.w	r3, r3, #10
 80048bc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80048be:	697a      	ldr	r2, [r7, #20]
 80048c0:	68bb      	ldr	r3, [r7, #8]
 80048c2:	4313      	orrs	r3, r2
 80048c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	693a      	ldr	r2, [r7, #16]
 80048ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	697a      	ldr	r2, [r7, #20]
 80048d0:	621a      	str	r2, [r3, #32]
}
 80048d2:	bf00      	nop
 80048d4:	371c      	adds	r7, #28
 80048d6:	46bd      	mov	sp, r7
 80048d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048dc:	4770      	bx	lr

080048de <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80048de:	b480      	push	{r7}
 80048e0:	b087      	sub	sp, #28
 80048e2:	af00      	add	r7, sp, #0
 80048e4:	60f8      	str	r0, [r7, #12]
 80048e6:	60b9      	str	r1, [r7, #8]
 80048e8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	6a1b      	ldr	r3, [r3, #32]
 80048ee:	f023 0210 	bic.w	r2, r3, #16
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	699b      	ldr	r3, [r3, #24]
 80048fa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	6a1b      	ldr	r3, [r3, #32]
 8004900:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004902:	697b      	ldr	r3, [r7, #20]
 8004904:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004908:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	031b      	lsls	r3, r3, #12
 800490e:	697a      	ldr	r2, [r7, #20]
 8004910:	4313      	orrs	r3, r2
 8004912:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004914:	693b      	ldr	r3, [r7, #16]
 8004916:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800491a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800491c:	68bb      	ldr	r3, [r7, #8]
 800491e:	011b      	lsls	r3, r3, #4
 8004920:	693a      	ldr	r2, [r7, #16]
 8004922:	4313      	orrs	r3, r2
 8004924:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	697a      	ldr	r2, [r7, #20]
 800492a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	693a      	ldr	r2, [r7, #16]
 8004930:	621a      	str	r2, [r3, #32]
}
 8004932:	bf00      	nop
 8004934:	371c      	adds	r7, #28
 8004936:	46bd      	mov	sp, r7
 8004938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493c:	4770      	bx	lr

0800493e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800493e:	b480      	push	{r7}
 8004940:	b085      	sub	sp, #20
 8004942:	af00      	add	r7, sp, #0
 8004944:	6078      	str	r0, [r7, #4]
 8004946:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	689b      	ldr	r3, [r3, #8]
 800494c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004954:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004956:	683a      	ldr	r2, [r7, #0]
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	4313      	orrs	r3, r2
 800495c:	f043 0307 	orr.w	r3, r3, #7
 8004960:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	68fa      	ldr	r2, [r7, #12]
 8004966:	609a      	str	r2, [r3, #8]
}
 8004968:	bf00      	nop
 800496a:	3714      	adds	r7, #20
 800496c:	46bd      	mov	sp, r7
 800496e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004972:	4770      	bx	lr

08004974 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004974:	b480      	push	{r7}
 8004976:	b087      	sub	sp, #28
 8004978:	af00      	add	r7, sp, #0
 800497a:	60f8      	str	r0, [r7, #12]
 800497c:	60b9      	str	r1, [r7, #8]
 800497e:	607a      	str	r2, [r7, #4]
 8004980:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	689b      	ldr	r3, [r3, #8]
 8004986:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004988:	697b      	ldr	r3, [r7, #20]
 800498a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800498e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004990:	683b      	ldr	r3, [r7, #0]
 8004992:	021a      	lsls	r2, r3, #8
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	431a      	orrs	r2, r3
 8004998:	68bb      	ldr	r3, [r7, #8]
 800499a:	4313      	orrs	r3, r2
 800499c:	697a      	ldr	r2, [r7, #20]
 800499e:	4313      	orrs	r3, r2
 80049a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	697a      	ldr	r2, [r7, #20]
 80049a6:	609a      	str	r2, [r3, #8]
}
 80049a8:	bf00      	nop
 80049aa:	371c      	adds	r7, #28
 80049ac:	46bd      	mov	sp, r7
 80049ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b2:	4770      	bx	lr

080049b4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80049b4:	b480      	push	{r7}
 80049b6:	b087      	sub	sp, #28
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	60f8      	str	r0, [r7, #12]
 80049bc:	60b9      	str	r1, [r7, #8]
 80049be:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80049c0:	68bb      	ldr	r3, [r7, #8]
 80049c2:	f003 031f 	and.w	r3, r3, #31
 80049c6:	2201      	movs	r2, #1
 80049c8:	fa02 f303 	lsl.w	r3, r2, r3
 80049cc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	6a1a      	ldr	r2, [r3, #32]
 80049d2:	697b      	ldr	r3, [r7, #20]
 80049d4:	43db      	mvns	r3, r3
 80049d6:	401a      	ands	r2, r3
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	6a1a      	ldr	r2, [r3, #32]
 80049e0:	68bb      	ldr	r3, [r7, #8]
 80049e2:	f003 031f 	and.w	r3, r3, #31
 80049e6:	6879      	ldr	r1, [r7, #4]
 80049e8:	fa01 f303 	lsl.w	r3, r1, r3
 80049ec:	431a      	orrs	r2, r3
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	621a      	str	r2, [r3, #32]
}
 80049f2:	bf00      	nop
 80049f4:	371c      	adds	r7, #28
 80049f6:	46bd      	mov	sp, r7
 80049f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fc:	4770      	bx	lr
	...

08004a00 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004a00:	b580      	push	{r7, lr}
 8004a02:	b084      	sub	sp, #16
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
 8004a08:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004a0a:	683b      	ldr	r3, [r7, #0]
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d109      	bne.n	8004a24 <HAL_TIMEx_PWMN_Start+0x24>
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004a16:	b2db      	uxtb	r3, r3
 8004a18:	2b01      	cmp	r3, #1
 8004a1a:	bf14      	ite	ne
 8004a1c:	2301      	movne	r3, #1
 8004a1e:	2300      	moveq	r3, #0
 8004a20:	b2db      	uxtb	r3, r3
 8004a22:	e022      	b.n	8004a6a <HAL_TIMEx_PWMN_Start+0x6a>
 8004a24:	683b      	ldr	r3, [r7, #0]
 8004a26:	2b04      	cmp	r3, #4
 8004a28:	d109      	bne.n	8004a3e <HAL_TIMEx_PWMN_Start+0x3e>
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004a30:	b2db      	uxtb	r3, r3
 8004a32:	2b01      	cmp	r3, #1
 8004a34:	bf14      	ite	ne
 8004a36:	2301      	movne	r3, #1
 8004a38:	2300      	moveq	r3, #0
 8004a3a:	b2db      	uxtb	r3, r3
 8004a3c:	e015      	b.n	8004a6a <HAL_TIMEx_PWMN_Start+0x6a>
 8004a3e:	683b      	ldr	r3, [r7, #0]
 8004a40:	2b08      	cmp	r3, #8
 8004a42:	d109      	bne.n	8004a58 <HAL_TIMEx_PWMN_Start+0x58>
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004a4a:	b2db      	uxtb	r3, r3
 8004a4c:	2b01      	cmp	r3, #1
 8004a4e:	bf14      	ite	ne
 8004a50:	2301      	movne	r3, #1
 8004a52:	2300      	moveq	r3, #0
 8004a54:	b2db      	uxtb	r3, r3
 8004a56:	e008      	b.n	8004a6a <HAL_TIMEx_PWMN_Start+0x6a>
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004a5e:	b2db      	uxtb	r3, r3
 8004a60:	2b01      	cmp	r3, #1
 8004a62:	bf14      	ite	ne
 8004a64:	2301      	movne	r3, #1
 8004a66:	2300      	moveq	r3, #0
 8004a68:	b2db      	uxtb	r3, r3
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d001      	beq.n	8004a72 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 8004a6e:	2301      	movs	r3, #1
 8004a70:	e06d      	b.n	8004b4e <HAL_TIMEx_PWMN_Start+0x14e>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a72:	683b      	ldr	r3, [r7, #0]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d104      	bne.n	8004a82 <HAL_TIMEx_PWMN_Start+0x82>
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2202      	movs	r2, #2
 8004a7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004a80:	e013      	b.n	8004aaa <HAL_TIMEx_PWMN_Start+0xaa>
 8004a82:	683b      	ldr	r3, [r7, #0]
 8004a84:	2b04      	cmp	r3, #4
 8004a86:	d104      	bne.n	8004a92 <HAL_TIMEx_PWMN_Start+0x92>
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2202      	movs	r2, #2
 8004a8c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004a90:	e00b      	b.n	8004aaa <HAL_TIMEx_PWMN_Start+0xaa>
 8004a92:	683b      	ldr	r3, [r7, #0]
 8004a94:	2b08      	cmp	r3, #8
 8004a96:	d104      	bne.n	8004aa2 <HAL_TIMEx_PWMN_Start+0xa2>
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2202      	movs	r2, #2
 8004a9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004aa0:	e003      	b.n	8004aaa <HAL_TIMEx_PWMN_Start+0xaa>
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	2202      	movs	r2, #2
 8004aa6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	2204      	movs	r2, #4
 8004ab0:	6839      	ldr	r1, [r7, #0]
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	f000 f92c 	bl	8004d10 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004ac6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	4a22      	ldr	r2, [pc, #136]	; (8004b58 <HAL_TIMEx_PWMN_Start+0x158>)
 8004ace:	4293      	cmp	r3, r2
 8004ad0:	d022      	beq.n	8004b18 <HAL_TIMEx_PWMN_Start+0x118>
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ada:	d01d      	beq.n	8004b18 <HAL_TIMEx_PWMN_Start+0x118>
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	4a1e      	ldr	r2, [pc, #120]	; (8004b5c <HAL_TIMEx_PWMN_Start+0x15c>)
 8004ae2:	4293      	cmp	r3, r2
 8004ae4:	d018      	beq.n	8004b18 <HAL_TIMEx_PWMN_Start+0x118>
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	4a1d      	ldr	r2, [pc, #116]	; (8004b60 <HAL_TIMEx_PWMN_Start+0x160>)
 8004aec:	4293      	cmp	r3, r2
 8004aee:	d013      	beq.n	8004b18 <HAL_TIMEx_PWMN_Start+0x118>
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	4a1b      	ldr	r2, [pc, #108]	; (8004b64 <HAL_TIMEx_PWMN_Start+0x164>)
 8004af6:	4293      	cmp	r3, r2
 8004af8:	d00e      	beq.n	8004b18 <HAL_TIMEx_PWMN_Start+0x118>
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	4a1a      	ldr	r2, [pc, #104]	; (8004b68 <HAL_TIMEx_PWMN_Start+0x168>)
 8004b00:	4293      	cmp	r3, r2
 8004b02:	d009      	beq.n	8004b18 <HAL_TIMEx_PWMN_Start+0x118>
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	4a18      	ldr	r2, [pc, #96]	; (8004b6c <HAL_TIMEx_PWMN_Start+0x16c>)
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	d004      	beq.n	8004b18 <HAL_TIMEx_PWMN_Start+0x118>
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	4a17      	ldr	r2, [pc, #92]	; (8004b70 <HAL_TIMEx_PWMN_Start+0x170>)
 8004b14:	4293      	cmp	r3, r2
 8004b16:	d111      	bne.n	8004b3c <HAL_TIMEx_PWMN_Start+0x13c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	689b      	ldr	r3, [r3, #8]
 8004b1e:	f003 0307 	and.w	r3, r3, #7
 8004b22:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	2b06      	cmp	r3, #6
 8004b28:	d010      	beq.n	8004b4c <HAL_TIMEx_PWMN_Start+0x14c>
    {
      __HAL_TIM_ENABLE(htim);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	681a      	ldr	r2, [r3, #0]
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f042 0201 	orr.w	r2, r2, #1
 8004b38:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b3a:	e007      	b.n	8004b4c <HAL_TIMEx_PWMN_Start+0x14c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	681a      	ldr	r2, [r3, #0]
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f042 0201 	orr.w	r2, r2, #1
 8004b4a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004b4c:	2300      	movs	r3, #0
}
 8004b4e:	4618      	mov	r0, r3
 8004b50:	3710      	adds	r7, #16
 8004b52:	46bd      	mov	sp, r7
 8004b54:	bd80      	pop	{r7, pc}
 8004b56:	bf00      	nop
 8004b58:	40010000 	.word	0x40010000
 8004b5c:	40000400 	.word	0x40000400
 8004b60:	40000800 	.word	0x40000800
 8004b64:	40000c00 	.word	0x40000c00
 8004b68:	40010400 	.word	0x40010400
 8004b6c:	40014000 	.word	0x40014000
 8004b70:	40001800 	.word	0x40001800

08004b74 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004b74:	b480      	push	{r7}
 8004b76:	b085      	sub	sp, #20
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	6078      	str	r0, [r7, #4]
 8004b7c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b84:	2b01      	cmp	r3, #1
 8004b86:	d101      	bne.n	8004b8c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004b88:	2302      	movs	r3, #2
 8004b8a:	e05a      	b.n	8004c42 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2201      	movs	r2, #1
 8004b90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2202      	movs	r2, #2
 8004b98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	685b      	ldr	r3, [r3, #4]
 8004ba2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	689b      	ldr	r3, [r3, #8]
 8004baa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bb2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004bb4:	683b      	ldr	r3, [r7, #0]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	68fa      	ldr	r2, [r7, #12]
 8004bba:	4313      	orrs	r3, r2
 8004bbc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	68fa      	ldr	r2, [r7, #12]
 8004bc4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	4a21      	ldr	r2, [pc, #132]	; (8004c50 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004bcc:	4293      	cmp	r3, r2
 8004bce:	d022      	beq.n	8004c16 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004bd8:	d01d      	beq.n	8004c16 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	4a1d      	ldr	r2, [pc, #116]	; (8004c54 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004be0:	4293      	cmp	r3, r2
 8004be2:	d018      	beq.n	8004c16 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	4a1b      	ldr	r2, [pc, #108]	; (8004c58 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004bea:	4293      	cmp	r3, r2
 8004bec:	d013      	beq.n	8004c16 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	4a1a      	ldr	r2, [pc, #104]	; (8004c5c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004bf4:	4293      	cmp	r3, r2
 8004bf6:	d00e      	beq.n	8004c16 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	4a18      	ldr	r2, [pc, #96]	; (8004c60 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	d009      	beq.n	8004c16 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	4a17      	ldr	r2, [pc, #92]	; (8004c64 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004c08:	4293      	cmp	r3, r2
 8004c0a:	d004      	beq.n	8004c16 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	4a15      	ldr	r2, [pc, #84]	; (8004c68 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004c12:	4293      	cmp	r3, r2
 8004c14:	d10c      	bne.n	8004c30 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004c16:	68bb      	ldr	r3, [r7, #8]
 8004c18:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004c1c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004c1e:	683b      	ldr	r3, [r7, #0]
 8004c20:	685b      	ldr	r3, [r3, #4]
 8004c22:	68ba      	ldr	r2, [r7, #8]
 8004c24:	4313      	orrs	r3, r2
 8004c26:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	68ba      	ldr	r2, [r7, #8]
 8004c2e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2201      	movs	r2, #1
 8004c34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004c40:	2300      	movs	r3, #0
}
 8004c42:	4618      	mov	r0, r3
 8004c44:	3714      	adds	r7, #20
 8004c46:	46bd      	mov	sp, r7
 8004c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4c:	4770      	bx	lr
 8004c4e:	bf00      	nop
 8004c50:	40010000 	.word	0x40010000
 8004c54:	40000400 	.word	0x40000400
 8004c58:	40000800 	.word	0x40000800
 8004c5c:	40000c00 	.word	0x40000c00
 8004c60:	40010400 	.word	0x40010400
 8004c64:	40014000 	.word	0x40014000
 8004c68:	40001800 	.word	0x40001800

08004c6c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004c6c:	b480      	push	{r7}
 8004c6e:	b085      	sub	sp, #20
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
 8004c74:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004c76:	2300      	movs	r3, #0
 8004c78:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c80:	2b01      	cmp	r3, #1
 8004c82:	d101      	bne.n	8004c88 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004c84:	2302      	movs	r3, #2
 8004c86:	e03d      	b.n	8004d04 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2201      	movs	r2, #1
 8004c8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004c96:	683b      	ldr	r3, [r7, #0]
 8004c98:	68db      	ldr	r3, [r3, #12]
 8004c9a:	4313      	orrs	r3, r2
 8004c9c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004ca4:	683b      	ldr	r3, [r7, #0]
 8004ca6:	689b      	ldr	r3, [r3, #8]
 8004ca8:	4313      	orrs	r3, r2
 8004caa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004cb2:	683b      	ldr	r3, [r7, #0]
 8004cb4:	685b      	ldr	r3, [r3, #4]
 8004cb6:	4313      	orrs	r3, r2
 8004cb8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004cc0:	683b      	ldr	r3, [r7, #0]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	4313      	orrs	r3, r2
 8004cc6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004cce:	683b      	ldr	r3, [r7, #0]
 8004cd0:	691b      	ldr	r3, [r3, #16]
 8004cd2:	4313      	orrs	r3, r2
 8004cd4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004cdc:	683b      	ldr	r3, [r7, #0]
 8004cde:	695b      	ldr	r3, [r3, #20]
 8004ce0:	4313      	orrs	r3, r2
 8004ce2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	69db      	ldr	r3, [r3, #28]
 8004cee:	4313      	orrs	r3, r2
 8004cf0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	68fa      	ldr	r2, [r7, #12]
 8004cf8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004d02:	2300      	movs	r3, #0
}
 8004d04:	4618      	mov	r0, r3
 8004d06:	3714      	adds	r7, #20
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0e:	4770      	bx	lr

08004d10 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8004d10:	b480      	push	{r7}
 8004d12:	b087      	sub	sp, #28
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	60f8      	str	r0, [r7, #12]
 8004d18:	60b9      	str	r1, [r7, #8]
 8004d1a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004d1c:	68bb      	ldr	r3, [r7, #8]
 8004d1e:	f003 031f 	and.w	r3, r3, #31
 8004d22:	2204      	movs	r2, #4
 8004d24:	fa02 f303 	lsl.w	r3, r2, r3
 8004d28:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	6a1a      	ldr	r2, [r3, #32]
 8004d2e:	697b      	ldr	r3, [r7, #20]
 8004d30:	43db      	mvns	r3, r3
 8004d32:	401a      	ands	r2, r3
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	6a1a      	ldr	r2, [r3, #32]
 8004d3c:	68bb      	ldr	r3, [r7, #8]
 8004d3e:	f003 031f 	and.w	r3, r3, #31
 8004d42:	6879      	ldr	r1, [r7, #4]
 8004d44:	fa01 f303 	lsl.w	r3, r1, r3
 8004d48:	431a      	orrs	r2, r3
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	621a      	str	r2, [r3, #32]
}
 8004d4e:	bf00      	nop
 8004d50:	371c      	adds	r7, #28
 8004d52:	46bd      	mov	sp, r7
 8004d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d58:	4770      	bx	lr

08004d5a <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004d5a:	b084      	sub	sp, #16
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	b084      	sub	sp, #16
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
 8004d64:	f107 001c 	add.w	r0, r7, #28
 8004d68:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004d6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d6e:	2b01      	cmp	r3, #1
 8004d70:	d122      	bne.n	8004db8 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d76:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	68db      	ldr	r3, [r3, #12]
 8004d82:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004d86:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d8a:	687a      	ldr	r2, [r7, #4]
 8004d8c:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	68db      	ldr	r3, [r3, #12]
 8004d92:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004d9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d9c:	2b01      	cmp	r3, #1
 8004d9e:	d105      	bne.n	8004dac <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	68db      	ldr	r3, [r3, #12]
 8004da4:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004dac:	6878      	ldr	r0, [r7, #4]
 8004dae:	f001 fbed 	bl	800658c <USB_CoreReset>
 8004db2:	4603      	mov	r3, r0
 8004db4:	73fb      	strb	r3, [r7, #15]
 8004db6:	e01a      	b.n	8004dee <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	68db      	ldr	r3, [r3, #12]
 8004dbc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004dc4:	6878      	ldr	r0, [r7, #4]
 8004dc6:	f001 fbe1 	bl	800658c <USB_CoreReset>
 8004dca:	4603      	mov	r3, r0
 8004dcc:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004dce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d106      	bne.n	8004de2 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dd8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	639a      	str	r2, [r3, #56]	; 0x38
 8004de0:	e005      	b.n	8004dee <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004de6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004dee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004df0:	2b01      	cmp	r3, #1
 8004df2:	d10b      	bne.n	8004e0c <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	689b      	ldr	r3, [r3, #8]
 8004df8:	f043 0206 	orr.w	r2, r3, #6
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	689b      	ldr	r3, [r3, #8]
 8004e04:	f043 0220 	orr.w	r2, r3, #32
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004e0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e0e:	4618      	mov	r0, r3
 8004e10:	3710      	adds	r7, #16
 8004e12:	46bd      	mov	sp, r7
 8004e14:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004e18:	b004      	add	sp, #16
 8004e1a:	4770      	bx	lr

08004e1c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004e1c:	b480      	push	{r7}
 8004e1e:	b087      	sub	sp, #28
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	60f8      	str	r0, [r7, #12]
 8004e24:	60b9      	str	r1, [r7, #8]
 8004e26:	4613      	mov	r3, r2
 8004e28:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8004e2a:	79fb      	ldrb	r3, [r7, #7]
 8004e2c:	2b02      	cmp	r3, #2
 8004e2e:	d165      	bne.n	8004efc <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004e30:	68bb      	ldr	r3, [r7, #8]
 8004e32:	4a41      	ldr	r2, [pc, #260]	; (8004f38 <USB_SetTurnaroundTime+0x11c>)
 8004e34:	4293      	cmp	r3, r2
 8004e36:	d906      	bls.n	8004e46 <USB_SetTurnaroundTime+0x2a>
 8004e38:	68bb      	ldr	r3, [r7, #8]
 8004e3a:	4a40      	ldr	r2, [pc, #256]	; (8004f3c <USB_SetTurnaroundTime+0x120>)
 8004e3c:	4293      	cmp	r3, r2
 8004e3e:	d202      	bcs.n	8004e46 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004e40:	230f      	movs	r3, #15
 8004e42:	617b      	str	r3, [r7, #20]
 8004e44:	e062      	b.n	8004f0c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004e46:	68bb      	ldr	r3, [r7, #8]
 8004e48:	4a3c      	ldr	r2, [pc, #240]	; (8004f3c <USB_SetTurnaroundTime+0x120>)
 8004e4a:	4293      	cmp	r3, r2
 8004e4c:	d306      	bcc.n	8004e5c <USB_SetTurnaroundTime+0x40>
 8004e4e:	68bb      	ldr	r3, [r7, #8]
 8004e50:	4a3b      	ldr	r2, [pc, #236]	; (8004f40 <USB_SetTurnaroundTime+0x124>)
 8004e52:	4293      	cmp	r3, r2
 8004e54:	d202      	bcs.n	8004e5c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8004e56:	230e      	movs	r3, #14
 8004e58:	617b      	str	r3, [r7, #20]
 8004e5a:	e057      	b.n	8004f0c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004e5c:	68bb      	ldr	r3, [r7, #8]
 8004e5e:	4a38      	ldr	r2, [pc, #224]	; (8004f40 <USB_SetTurnaroundTime+0x124>)
 8004e60:	4293      	cmp	r3, r2
 8004e62:	d306      	bcc.n	8004e72 <USB_SetTurnaroundTime+0x56>
 8004e64:	68bb      	ldr	r3, [r7, #8]
 8004e66:	4a37      	ldr	r2, [pc, #220]	; (8004f44 <USB_SetTurnaroundTime+0x128>)
 8004e68:	4293      	cmp	r3, r2
 8004e6a:	d202      	bcs.n	8004e72 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004e6c:	230d      	movs	r3, #13
 8004e6e:	617b      	str	r3, [r7, #20]
 8004e70:	e04c      	b.n	8004f0c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004e72:	68bb      	ldr	r3, [r7, #8]
 8004e74:	4a33      	ldr	r2, [pc, #204]	; (8004f44 <USB_SetTurnaroundTime+0x128>)
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d306      	bcc.n	8004e88 <USB_SetTurnaroundTime+0x6c>
 8004e7a:	68bb      	ldr	r3, [r7, #8]
 8004e7c:	4a32      	ldr	r2, [pc, #200]	; (8004f48 <USB_SetTurnaroundTime+0x12c>)
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	d802      	bhi.n	8004e88 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004e82:	230c      	movs	r3, #12
 8004e84:	617b      	str	r3, [r7, #20]
 8004e86:	e041      	b.n	8004f0c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004e88:	68bb      	ldr	r3, [r7, #8]
 8004e8a:	4a2f      	ldr	r2, [pc, #188]	; (8004f48 <USB_SetTurnaroundTime+0x12c>)
 8004e8c:	4293      	cmp	r3, r2
 8004e8e:	d906      	bls.n	8004e9e <USB_SetTurnaroundTime+0x82>
 8004e90:	68bb      	ldr	r3, [r7, #8]
 8004e92:	4a2e      	ldr	r2, [pc, #184]	; (8004f4c <USB_SetTurnaroundTime+0x130>)
 8004e94:	4293      	cmp	r3, r2
 8004e96:	d802      	bhi.n	8004e9e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004e98:	230b      	movs	r3, #11
 8004e9a:	617b      	str	r3, [r7, #20]
 8004e9c:	e036      	b.n	8004f0c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004e9e:	68bb      	ldr	r3, [r7, #8]
 8004ea0:	4a2a      	ldr	r2, [pc, #168]	; (8004f4c <USB_SetTurnaroundTime+0x130>)
 8004ea2:	4293      	cmp	r3, r2
 8004ea4:	d906      	bls.n	8004eb4 <USB_SetTurnaroundTime+0x98>
 8004ea6:	68bb      	ldr	r3, [r7, #8]
 8004ea8:	4a29      	ldr	r2, [pc, #164]	; (8004f50 <USB_SetTurnaroundTime+0x134>)
 8004eaa:	4293      	cmp	r3, r2
 8004eac:	d802      	bhi.n	8004eb4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004eae:	230a      	movs	r3, #10
 8004eb0:	617b      	str	r3, [r7, #20]
 8004eb2:	e02b      	b.n	8004f0c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004eb4:	68bb      	ldr	r3, [r7, #8]
 8004eb6:	4a26      	ldr	r2, [pc, #152]	; (8004f50 <USB_SetTurnaroundTime+0x134>)
 8004eb8:	4293      	cmp	r3, r2
 8004eba:	d906      	bls.n	8004eca <USB_SetTurnaroundTime+0xae>
 8004ebc:	68bb      	ldr	r3, [r7, #8]
 8004ebe:	4a25      	ldr	r2, [pc, #148]	; (8004f54 <USB_SetTurnaroundTime+0x138>)
 8004ec0:	4293      	cmp	r3, r2
 8004ec2:	d202      	bcs.n	8004eca <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004ec4:	2309      	movs	r3, #9
 8004ec6:	617b      	str	r3, [r7, #20]
 8004ec8:	e020      	b.n	8004f0c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004eca:	68bb      	ldr	r3, [r7, #8]
 8004ecc:	4a21      	ldr	r2, [pc, #132]	; (8004f54 <USB_SetTurnaroundTime+0x138>)
 8004ece:	4293      	cmp	r3, r2
 8004ed0:	d306      	bcc.n	8004ee0 <USB_SetTurnaroundTime+0xc4>
 8004ed2:	68bb      	ldr	r3, [r7, #8]
 8004ed4:	4a20      	ldr	r2, [pc, #128]	; (8004f58 <USB_SetTurnaroundTime+0x13c>)
 8004ed6:	4293      	cmp	r3, r2
 8004ed8:	d802      	bhi.n	8004ee0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004eda:	2308      	movs	r3, #8
 8004edc:	617b      	str	r3, [r7, #20]
 8004ede:	e015      	b.n	8004f0c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004ee0:	68bb      	ldr	r3, [r7, #8]
 8004ee2:	4a1d      	ldr	r2, [pc, #116]	; (8004f58 <USB_SetTurnaroundTime+0x13c>)
 8004ee4:	4293      	cmp	r3, r2
 8004ee6:	d906      	bls.n	8004ef6 <USB_SetTurnaroundTime+0xda>
 8004ee8:	68bb      	ldr	r3, [r7, #8]
 8004eea:	4a1c      	ldr	r2, [pc, #112]	; (8004f5c <USB_SetTurnaroundTime+0x140>)
 8004eec:	4293      	cmp	r3, r2
 8004eee:	d202      	bcs.n	8004ef6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004ef0:	2307      	movs	r3, #7
 8004ef2:	617b      	str	r3, [r7, #20]
 8004ef4:	e00a      	b.n	8004f0c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004ef6:	2306      	movs	r3, #6
 8004ef8:	617b      	str	r3, [r7, #20]
 8004efa:	e007      	b.n	8004f0c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004efc:	79fb      	ldrb	r3, [r7, #7]
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d102      	bne.n	8004f08 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004f02:	2309      	movs	r3, #9
 8004f04:	617b      	str	r3, [r7, #20]
 8004f06:	e001      	b.n	8004f0c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004f08:	2309      	movs	r3, #9
 8004f0a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	68db      	ldr	r3, [r3, #12]
 8004f10:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	68da      	ldr	r2, [r3, #12]
 8004f1c:	697b      	ldr	r3, [r7, #20]
 8004f1e:	029b      	lsls	r3, r3, #10
 8004f20:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8004f24:	431a      	orrs	r2, r3
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004f2a:	2300      	movs	r3, #0
}
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	371c      	adds	r7, #28
 8004f30:	46bd      	mov	sp, r7
 8004f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f36:	4770      	bx	lr
 8004f38:	00d8acbf 	.word	0x00d8acbf
 8004f3c:	00e4e1c0 	.word	0x00e4e1c0
 8004f40:	00f42400 	.word	0x00f42400
 8004f44:	01067380 	.word	0x01067380
 8004f48:	011a499f 	.word	0x011a499f
 8004f4c:	01312cff 	.word	0x01312cff
 8004f50:	014ca43f 	.word	0x014ca43f
 8004f54:	016e3600 	.word	0x016e3600
 8004f58:	01a6ab1f 	.word	0x01a6ab1f
 8004f5c:	01e84800 	.word	0x01e84800

08004f60 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004f60:	b480      	push	{r7}
 8004f62:	b083      	sub	sp, #12
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	689b      	ldr	r3, [r3, #8]
 8004f6c:	f043 0201 	orr.w	r2, r3, #1
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004f74:	2300      	movs	r3, #0
}
 8004f76:	4618      	mov	r0, r3
 8004f78:	370c      	adds	r7, #12
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f80:	4770      	bx	lr

08004f82 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004f82:	b480      	push	{r7}
 8004f84:	b083      	sub	sp, #12
 8004f86:	af00      	add	r7, sp, #0
 8004f88:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	689b      	ldr	r3, [r3, #8]
 8004f8e:	f023 0201 	bic.w	r2, r3, #1
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004f96:	2300      	movs	r3, #0
}
 8004f98:	4618      	mov	r0, r3
 8004f9a:	370c      	adds	r7, #12
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa2:	4770      	bx	lr

08004fa4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	b084      	sub	sp, #16
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
 8004fac:	460b      	mov	r3, r1
 8004fae:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004fb0:	2300      	movs	r3, #0
 8004fb2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	68db      	ldr	r3, [r3, #12]
 8004fb8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004fc0:	78fb      	ldrb	r3, [r7, #3]
 8004fc2:	2b01      	cmp	r3, #1
 8004fc4:	d115      	bne.n	8004ff2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	68db      	ldr	r3, [r3, #12]
 8004fca:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004fd2:	2001      	movs	r0, #1
 8004fd4:	f7fc f880 	bl	80010d8 <HAL_Delay>
      ms++;
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	3301      	adds	r3, #1
 8004fdc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004fde:	6878      	ldr	r0, [r7, #4]
 8004fe0:	f001 fa45 	bl	800646e <USB_GetMode>
 8004fe4:	4603      	mov	r3, r0
 8004fe6:	2b01      	cmp	r3, #1
 8004fe8:	d01e      	beq.n	8005028 <USB_SetCurrentMode+0x84>
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	2b31      	cmp	r3, #49	; 0x31
 8004fee:	d9f0      	bls.n	8004fd2 <USB_SetCurrentMode+0x2e>
 8004ff0:	e01a      	b.n	8005028 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004ff2:	78fb      	ldrb	r3, [r7, #3]
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d115      	bne.n	8005024 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	68db      	ldr	r3, [r3, #12]
 8004ffc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005004:	2001      	movs	r0, #1
 8005006:	f7fc f867 	bl	80010d8 <HAL_Delay>
      ms++;
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	3301      	adds	r3, #1
 800500e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005010:	6878      	ldr	r0, [r7, #4]
 8005012:	f001 fa2c 	bl	800646e <USB_GetMode>
 8005016:	4603      	mov	r3, r0
 8005018:	2b00      	cmp	r3, #0
 800501a:	d005      	beq.n	8005028 <USB_SetCurrentMode+0x84>
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	2b31      	cmp	r3, #49	; 0x31
 8005020:	d9f0      	bls.n	8005004 <USB_SetCurrentMode+0x60>
 8005022:	e001      	b.n	8005028 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005024:	2301      	movs	r3, #1
 8005026:	e005      	b.n	8005034 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	2b32      	cmp	r3, #50	; 0x32
 800502c:	d101      	bne.n	8005032 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800502e:	2301      	movs	r3, #1
 8005030:	e000      	b.n	8005034 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005032:	2300      	movs	r3, #0
}
 8005034:	4618      	mov	r0, r3
 8005036:	3710      	adds	r7, #16
 8005038:	46bd      	mov	sp, r7
 800503a:	bd80      	pop	{r7, pc}

0800503c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800503c:	b084      	sub	sp, #16
 800503e:	b580      	push	{r7, lr}
 8005040:	b086      	sub	sp, #24
 8005042:	af00      	add	r7, sp, #0
 8005044:	6078      	str	r0, [r7, #4]
 8005046:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800504a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800504e:	2300      	movs	r3, #0
 8005050:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005056:	2300      	movs	r3, #0
 8005058:	613b      	str	r3, [r7, #16]
 800505a:	e009      	b.n	8005070 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800505c:	687a      	ldr	r2, [r7, #4]
 800505e:	693b      	ldr	r3, [r7, #16]
 8005060:	3340      	adds	r3, #64	; 0x40
 8005062:	009b      	lsls	r3, r3, #2
 8005064:	4413      	add	r3, r2
 8005066:	2200      	movs	r2, #0
 8005068:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800506a:	693b      	ldr	r3, [r7, #16]
 800506c:	3301      	adds	r3, #1
 800506e:	613b      	str	r3, [r7, #16]
 8005070:	693b      	ldr	r3, [r7, #16]
 8005072:	2b0e      	cmp	r3, #14
 8005074:	d9f2      	bls.n	800505c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005076:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005078:	2b00      	cmp	r3, #0
 800507a:	d11c      	bne.n	80050b6 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005082:	685b      	ldr	r3, [r3, #4]
 8005084:	68fa      	ldr	r2, [r7, #12]
 8005086:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800508a:	f043 0302 	orr.w	r3, r3, #2
 800508e:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005094:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050a0:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050ac:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	639a      	str	r2, [r3, #56]	; 0x38
 80050b4:	e00b      	b.n	80050ce <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050ba:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050c6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80050d4:	461a      	mov	r2, r3
 80050d6:	2300      	movs	r3, #0
 80050d8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050e0:	4619      	mov	r1, r3
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050e8:	461a      	mov	r2, r3
 80050ea:	680b      	ldr	r3, [r1, #0]
 80050ec:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80050ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050f0:	2b01      	cmp	r3, #1
 80050f2:	d10c      	bne.n	800510e <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80050f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d104      	bne.n	8005104 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80050fa:	2100      	movs	r1, #0
 80050fc:	6878      	ldr	r0, [r7, #4]
 80050fe:	f000 f965 	bl	80053cc <USB_SetDevSpeed>
 8005102:	e008      	b.n	8005116 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005104:	2101      	movs	r1, #1
 8005106:	6878      	ldr	r0, [r7, #4]
 8005108:	f000 f960 	bl	80053cc <USB_SetDevSpeed>
 800510c:	e003      	b.n	8005116 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800510e:	2103      	movs	r1, #3
 8005110:	6878      	ldr	r0, [r7, #4]
 8005112:	f000 f95b 	bl	80053cc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005116:	2110      	movs	r1, #16
 8005118:	6878      	ldr	r0, [r7, #4]
 800511a:	f000 f8f3 	bl	8005304 <USB_FlushTxFifo>
 800511e:	4603      	mov	r3, r0
 8005120:	2b00      	cmp	r3, #0
 8005122:	d001      	beq.n	8005128 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8005124:	2301      	movs	r3, #1
 8005126:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005128:	6878      	ldr	r0, [r7, #4]
 800512a:	f000 f91f 	bl	800536c <USB_FlushRxFifo>
 800512e:	4603      	mov	r3, r0
 8005130:	2b00      	cmp	r3, #0
 8005132:	d001      	beq.n	8005138 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8005134:	2301      	movs	r3, #1
 8005136:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800513e:	461a      	mov	r2, r3
 8005140:	2300      	movs	r3, #0
 8005142:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800514a:	461a      	mov	r2, r3
 800514c:	2300      	movs	r3, #0
 800514e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005156:	461a      	mov	r2, r3
 8005158:	2300      	movs	r3, #0
 800515a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800515c:	2300      	movs	r3, #0
 800515e:	613b      	str	r3, [r7, #16]
 8005160:	e043      	b.n	80051ea <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005162:	693b      	ldr	r3, [r7, #16]
 8005164:	015a      	lsls	r2, r3, #5
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	4413      	add	r3, r2
 800516a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005174:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005178:	d118      	bne.n	80051ac <USB_DevInit+0x170>
    {
      if (i == 0U)
 800517a:	693b      	ldr	r3, [r7, #16]
 800517c:	2b00      	cmp	r3, #0
 800517e:	d10a      	bne.n	8005196 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005180:	693b      	ldr	r3, [r7, #16]
 8005182:	015a      	lsls	r2, r3, #5
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	4413      	add	r3, r2
 8005188:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800518c:	461a      	mov	r2, r3
 800518e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005192:	6013      	str	r3, [r2, #0]
 8005194:	e013      	b.n	80051be <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005196:	693b      	ldr	r3, [r7, #16]
 8005198:	015a      	lsls	r2, r3, #5
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	4413      	add	r3, r2
 800519e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051a2:	461a      	mov	r2, r3
 80051a4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80051a8:	6013      	str	r3, [r2, #0]
 80051aa:	e008      	b.n	80051be <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80051ac:	693b      	ldr	r3, [r7, #16]
 80051ae:	015a      	lsls	r2, r3, #5
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	4413      	add	r3, r2
 80051b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051b8:	461a      	mov	r2, r3
 80051ba:	2300      	movs	r3, #0
 80051bc:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80051be:	693b      	ldr	r3, [r7, #16]
 80051c0:	015a      	lsls	r2, r3, #5
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	4413      	add	r3, r2
 80051c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051ca:	461a      	mov	r2, r3
 80051cc:	2300      	movs	r3, #0
 80051ce:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80051d0:	693b      	ldr	r3, [r7, #16]
 80051d2:	015a      	lsls	r2, r3, #5
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	4413      	add	r3, r2
 80051d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051dc:	461a      	mov	r2, r3
 80051de:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80051e2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80051e4:	693b      	ldr	r3, [r7, #16]
 80051e6:	3301      	adds	r3, #1
 80051e8:	613b      	str	r3, [r7, #16]
 80051ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ec:	693a      	ldr	r2, [r7, #16]
 80051ee:	429a      	cmp	r2, r3
 80051f0:	d3b7      	bcc.n	8005162 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80051f2:	2300      	movs	r3, #0
 80051f4:	613b      	str	r3, [r7, #16]
 80051f6:	e043      	b.n	8005280 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80051f8:	693b      	ldr	r3, [r7, #16]
 80051fa:	015a      	lsls	r2, r3, #5
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	4413      	add	r3, r2
 8005200:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800520a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800520e:	d118      	bne.n	8005242 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8005210:	693b      	ldr	r3, [r7, #16]
 8005212:	2b00      	cmp	r3, #0
 8005214:	d10a      	bne.n	800522c <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005216:	693b      	ldr	r3, [r7, #16]
 8005218:	015a      	lsls	r2, r3, #5
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	4413      	add	r3, r2
 800521e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005222:	461a      	mov	r2, r3
 8005224:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005228:	6013      	str	r3, [r2, #0]
 800522a:	e013      	b.n	8005254 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800522c:	693b      	ldr	r3, [r7, #16]
 800522e:	015a      	lsls	r2, r3, #5
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	4413      	add	r3, r2
 8005234:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005238:	461a      	mov	r2, r3
 800523a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800523e:	6013      	str	r3, [r2, #0]
 8005240:	e008      	b.n	8005254 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005242:	693b      	ldr	r3, [r7, #16]
 8005244:	015a      	lsls	r2, r3, #5
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	4413      	add	r3, r2
 800524a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800524e:	461a      	mov	r2, r3
 8005250:	2300      	movs	r3, #0
 8005252:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005254:	693b      	ldr	r3, [r7, #16]
 8005256:	015a      	lsls	r2, r3, #5
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	4413      	add	r3, r2
 800525c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005260:	461a      	mov	r2, r3
 8005262:	2300      	movs	r3, #0
 8005264:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005266:	693b      	ldr	r3, [r7, #16]
 8005268:	015a      	lsls	r2, r3, #5
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	4413      	add	r3, r2
 800526e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005272:	461a      	mov	r2, r3
 8005274:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005278:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800527a:	693b      	ldr	r3, [r7, #16]
 800527c:	3301      	adds	r3, #1
 800527e:	613b      	str	r3, [r7, #16]
 8005280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005282:	693a      	ldr	r2, [r7, #16]
 8005284:	429a      	cmp	r2, r3
 8005286:	d3b7      	bcc.n	80051f8 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800528e:	691b      	ldr	r3, [r3, #16]
 8005290:	68fa      	ldr	r2, [r7, #12]
 8005292:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005296:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800529a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2200      	movs	r2, #0
 80052a0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80052a8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80052aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d105      	bne.n	80052bc <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	699b      	ldr	r3, [r3, #24]
 80052b4:	f043 0210 	orr.w	r2, r3, #16
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	699a      	ldr	r2, [r3, #24]
 80052c0:	4b0f      	ldr	r3, [pc, #60]	; (8005300 <USB_DevInit+0x2c4>)
 80052c2:	4313      	orrs	r3, r2
 80052c4:	687a      	ldr	r2, [r7, #4]
 80052c6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80052c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d005      	beq.n	80052da <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	699b      	ldr	r3, [r3, #24]
 80052d2:	f043 0208 	orr.w	r2, r3, #8
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80052da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80052dc:	2b01      	cmp	r3, #1
 80052de:	d107      	bne.n	80052f0 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	699b      	ldr	r3, [r3, #24]
 80052e4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80052e8:	f043 0304 	orr.w	r3, r3, #4
 80052ec:	687a      	ldr	r2, [r7, #4]
 80052ee:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80052f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80052f2:	4618      	mov	r0, r3
 80052f4:	3718      	adds	r7, #24
 80052f6:	46bd      	mov	sp, r7
 80052f8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80052fc:	b004      	add	sp, #16
 80052fe:	4770      	bx	lr
 8005300:	803c3800 	.word	0x803c3800

08005304 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005304:	b480      	push	{r7}
 8005306:	b085      	sub	sp, #20
 8005308:	af00      	add	r7, sp, #0
 800530a:	6078      	str	r0, [r7, #4]
 800530c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800530e:	2300      	movs	r3, #0
 8005310:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	3301      	adds	r3, #1
 8005316:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	4a13      	ldr	r2, [pc, #76]	; (8005368 <USB_FlushTxFifo+0x64>)
 800531c:	4293      	cmp	r3, r2
 800531e:	d901      	bls.n	8005324 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005320:	2303      	movs	r3, #3
 8005322:	e01b      	b.n	800535c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	691b      	ldr	r3, [r3, #16]
 8005328:	2b00      	cmp	r3, #0
 800532a:	daf2      	bge.n	8005312 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800532c:	2300      	movs	r3, #0
 800532e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005330:	683b      	ldr	r3, [r7, #0]
 8005332:	019b      	lsls	r3, r3, #6
 8005334:	f043 0220 	orr.w	r2, r3, #32
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	3301      	adds	r3, #1
 8005340:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	4a08      	ldr	r2, [pc, #32]	; (8005368 <USB_FlushTxFifo+0x64>)
 8005346:	4293      	cmp	r3, r2
 8005348:	d901      	bls.n	800534e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800534a:	2303      	movs	r3, #3
 800534c:	e006      	b.n	800535c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	691b      	ldr	r3, [r3, #16]
 8005352:	f003 0320 	and.w	r3, r3, #32
 8005356:	2b20      	cmp	r3, #32
 8005358:	d0f0      	beq.n	800533c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800535a:	2300      	movs	r3, #0
}
 800535c:	4618      	mov	r0, r3
 800535e:	3714      	adds	r7, #20
 8005360:	46bd      	mov	sp, r7
 8005362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005366:	4770      	bx	lr
 8005368:	00030d40 	.word	0x00030d40

0800536c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800536c:	b480      	push	{r7}
 800536e:	b085      	sub	sp, #20
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005374:	2300      	movs	r3, #0
 8005376:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	3301      	adds	r3, #1
 800537c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	4a11      	ldr	r2, [pc, #68]	; (80053c8 <USB_FlushRxFifo+0x5c>)
 8005382:	4293      	cmp	r3, r2
 8005384:	d901      	bls.n	800538a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005386:	2303      	movs	r3, #3
 8005388:	e018      	b.n	80053bc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	691b      	ldr	r3, [r3, #16]
 800538e:	2b00      	cmp	r3, #0
 8005390:	daf2      	bge.n	8005378 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005392:	2300      	movs	r3, #0
 8005394:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	2210      	movs	r2, #16
 800539a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	3301      	adds	r3, #1
 80053a0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	4a08      	ldr	r2, [pc, #32]	; (80053c8 <USB_FlushRxFifo+0x5c>)
 80053a6:	4293      	cmp	r3, r2
 80053a8:	d901      	bls.n	80053ae <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80053aa:	2303      	movs	r3, #3
 80053ac:	e006      	b.n	80053bc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	691b      	ldr	r3, [r3, #16]
 80053b2:	f003 0310 	and.w	r3, r3, #16
 80053b6:	2b10      	cmp	r3, #16
 80053b8:	d0f0      	beq.n	800539c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80053ba:	2300      	movs	r3, #0
}
 80053bc:	4618      	mov	r0, r3
 80053be:	3714      	adds	r7, #20
 80053c0:	46bd      	mov	sp, r7
 80053c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c6:	4770      	bx	lr
 80053c8:	00030d40 	.word	0x00030d40

080053cc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80053cc:	b480      	push	{r7}
 80053ce:	b085      	sub	sp, #20
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	6078      	str	r0, [r7, #4]
 80053d4:	460b      	mov	r3, r1
 80053d6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053e2:	681a      	ldr	r2, [r3, #0]
 80053e4:	78fb      	ldrb	r3, [r7, #3]
 80053e6:	68f9      	ldr	r1, [r7, #12]
 80053e8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80053ec:	4313      	orrs	r3, r2
 80053ee:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80053f0:	2300      	movs	r3, #0
}
 80053f2:	4618      	mov	r0, r3
 80053f4:	3714      	adds	r7, #20
 80053f6:	46bd      	mov	sp, r7
 80053f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fc:	4770      	bx	lr

080053fe <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80053fe:	b480      	push	{r7}
 8005400:	b087      	sub	sp, #28
 8005402:	af00      	add	r7, sp, #0
 8005404:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800540a:	693b      	ldr	r3, [r7, #16]
 800540c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005410:	689b      	ldr	r3, [r3, #8]
 8005412:	f003 0306 	and.w	r3, r3, #6
 8005416:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	2b00      	cmp	r3, #0
 800541c:	d102      	bne.n	8005424 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800541e:	2300      	movs	r3, #0
 8005420:	75fb      	strb	r3, [r7, #23]
 8005422:	e00a      	b.n	800543a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	2b02      	cmp	r3, #2
 8005428:	d002      	beq.n	8005430 <USB_GetDevSpeed+0x32>
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	2b06      	cmp	r3, #6
 800542e:	d102      	bne.n	8005436 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005430:	2302      	movs	r3, #2
 8005432:	75fb      	strb	r3, [r7, #23]
 8005434:	e001      	b.n	800543a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8005436:	230f      	movs	r3, #15
 8005438:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800543a:	7dfb      	ldrb	r3, [r7, #23]
}
 800543c:	4618      	mov	r0, r3
 800543e:	371c      	adds	r7, #28
 8005440:	46bd      	mov	sp, r7
 8005442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005446:	4770      	bx	lr

08005448 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005448:	b480      	push	{r7}
 800544a:	b085      	sub	sp, #20
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]
 8005450:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005456:	683b      	ldr	r3, [r7, #0]
 8005458:	781b      	ldrb	r3, [r3, #0]
 800545a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800545c:	683b      	ldr	r3, [r7, #0]
 800545e:	785b      	ldrb	r3, [r3, #1]
 8005460:	2b01      	cmp	r3, #1
 8005462:	d13a      	bne.n	80054da <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800546a:	69da      	ldr	r2, [r3, #28]
 800546c:	683b      	ldr	r3, [r7, #0]
 800546e:	781b      	ldrb	r3, [r3, #0]
 8005470:	f003 030f 	and.w	r3, r3, #15
 8005474:	2101      	movs	r1, #1
 8005476:	fa01 f303 	lsl.w	r3, r1, r3
 800547a:	b29b      	uxth	r3, r3
 800547c:	68f9      	ldr	r1, [r7, #12]
 800547e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005482:	4313      	orrs	r3, r2
 8005484:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005486:	68bb      	ldr	r3, [r7, #8]
 8005488:	015a      	lsls	r2, r3, #5
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	4413      	add	r3, r2
 800548e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005498:	2b00      	cmp	r3, #0
 800549a:	d155      	bne.n	8005548 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800549c:	68bb      	ldr	r3, [r7, #8]
 800549e:	015a      	lsls	r2, r3, #5
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	4413      	add	r3, r2
 80054a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054a8:	681a      	ldr	r2, [r3, #0]
 80054aa:	683b      	ldr	r3, [r7, #0]
 80054ac:	68db      	ldr	r3, [r3, #12]
 80054ae:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80054b2:	683b      	ldr	r3, [r7, #0]
 80054b4:	791b      	ldrb	r3, [r3, #4]
 80054b6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80054b8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80054ba:	68bb      	ldr	r3, [r7, #8]
 80054bc:	059b      	lsls	r3, r3, #22
 80054be:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80054c0:	4313      	orrs	r3, r2
 80054c2:	68ba      	ldr	r2, [r7, #8]
 80054c4:	0151      	lsls	r1, r2, #5
 80054c6:	68fa      	ldr	r2, [r7, #12]
 80054c8:	440a      	add	r2, r1
 80054ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80054ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80054d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80054d6:	6013      	str	r3, [r2, #0]
 80054d8:	e036      	b.n	8005548 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054e0:	69da      	ldr	r2, [r3, #28]
 80054e2:	683b      	ldr	r3, [r7, #0]
 80054e4:	781b      	ldrb	r3, [r3, #0]
 80054e6:	f003 030f 	and.w	r3, r3, #15
 80054ea:	2101      	movs	r1, #1
 80054ec:	fa01 f303 	lsl.w	r3, r1, r3
 80054f0:	041b      	lsls	r3, r3, #16
 80054f2:	68f9      	ldr	r1, [r7, #12]
 80054f4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80054f8:	4313      	orrs	r3, r2
 80054fa:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80054fc:	68bb      	ldr	r3, [r7, #8]
 80054fe:	015a      	lsls	r2, r3, #5
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	4413      	add	r3, r2
 8005504:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800550e:	2b00      	cmp	r3, #0
 8005510:	d11a      	bne.n	8005548 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005512:	68bb      	ldr	r3, [r7, #8]
 8005514:	015a      	lsls	r2, r3, #5
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	4413      	add	r3, r2
 800551a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800551e:	681a      	ldr	r2, [r3, #0]
 8005520:	683b      	ldr	r3, [r7, #0]
 8005522:	68db      	ldr	r3, [r3, #12]
 8005524:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005528:	683b      	ldr	r3, [r7, #0]
 800552a:	791b      	ldrb	r3, [r3, #4]
 800552c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800552e:	430b      	orrs	r3, r1
 8005530:	4313      	orrs	r3, r2
 8005532:	68ba      	ldr	r2, [r7, #8]
 8005534:	0151      	lsls	r1, r2, #5
 8005536:	68fa      	ldr	r2, [r7, #12]
 8005538:	440a      	add	r2, r1
 800553a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800553e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005542:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005546:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005548:	2300      	movs	r3, #0
}
 800554a:	4618      	mov	r0, r3
 800554c:	3714      	adds	r7, #20
 800554e:	46bd      	mov	sp, r7
 8005550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005554:	4770      	bx	lr
	...

08005558 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005558:	b480      	push	{r7}
 800555a:	b085      	sub	sp, #20
 800555c:	af00      	add	r7, sp, #0
 800555e:	6078      	str	r0, [r7, #4]
 8005560:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005566:	683b      	ldr	r3, [r7, #0]
 8005568:	781b      	ldrb	r3, [r3, #0]
 800556a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800556c:	683b      	ldr	r3, [r7, #0]
 800556e:	785b      	ldrb	r3, [r3, #1]
 8005570:	2b01      	cmp	r3, #1
 8005572:	d161      	bne.n	8005638 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005574:	68bb      	ldr	r3, [r7, #8]
 8005576:	015a      	lsls	r2, r3, #5
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	4413      	add	r3, r2
 800557c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005586:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800558a:	d11f      	bne.n	80055cc <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800558c:	68bb      	ldr	r3, [r7, #8]
 800558e:	015a      	lsls	r2, r3, #5
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	4413      	add	r3, r2
 8005594:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	68ba      	ldr	r2, [r7, #8]
 800559c:	0151      	lsls	r1, r2, #5
 800559e:	68fa      	ldr	r2, [r7, #12]
 80055a0:	440a      	add	r2, r1
 80055a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80055a6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80055aa:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80055ac:	68bb      	ldr	r3, [r7, #8]
 80055ae:	015a      	lsls	r2, r3, #5
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	4413      	add	r3, r2
 80055b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	68ba      	ldr	r2, [r7, #8]
 80055bc:	0151      	lsls	r1, r2, #5
 80055be:	68fa      	ldr	r2, [r7, #12]
 80055c0:	440a      	add	r2, r1
 80055c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80055c6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80055ca:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055d2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80055d4:	683b      	ldr	r3, [r7, #0]
 80055d6:	781b      	ldrb	r3, [r3, #0]
 80055d8:	f003 030f 	and.w	r3, r3, #15
 80055dc:	2101      	movs	r1, #1
 80055de:	fa01 f303 	lsl.w	r3, r1, r3
 80055e2:	b29b      	uxth	r3, r3
 80055e4:	43db      	mvns	r3, r3
 80055e6:	68f9      	ldr	r1, [r7, #12]
 80055e8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80055ec:	4013      	ands	r3, r2
 80055ee:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055f6:	69da      	ldr	r2, [r3, #28]
 80055f8:	683b      	ldr	r3, [r7, #0]
 80055fa:	781b      	ldrb	r3, [r3, #0]
 80055fc:	f003 030f 	and.w	r3, r3, #15
 8005600:	2101      	movs	r1, #1
 8005602:	fa01 f303 	lsl.w	r3, r1, r3
 8005606:	b29b      	uxth	r3, r3
 8005608:	43db      	mvns	r3, r3
 800560a:	68f9      	ldr	r1, [r7, #12]
 800560c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005610:	4013      	ands	r3, r2
 8005612:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005614:	68bb      	ldr	r3, [r7, #8]
 8005616:	015a      	lsls	r2, r3, #5
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	4413      	add	r3, r2
 800561c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005620:	681a      	ldr	r2, [r3, #0]
 8005622:	68bb      	ldr	r3, [r7, #8]
 8005624:	0159      	lsls	r1, r3, #5
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	440b      	add	r3, r1
 800562a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800562e:	4619      	mov	r1, r3
 8005630:	4b35      	ldr	r3, [pc, #212]	; (8005708 <USB_DeactivateEndpoint+0x1b0>)
 8005632:	4013      	ands	r3, r2
 8005634:	600b      	str	r3, [r1, #0]
 8005636:	e060      	b.n	80056fa <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005638:	68bb      	ldr	r3, [r7, #8]
 800563a:	015a      	lsls	r2, r3, #5
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	4413      	add	r3, r2
 8005640:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800564a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800564e:	d11f      	bne.n	8005690 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005650:	68bb      	ldr	r3, [r7, #8]
 8005652:	015a      	lsls	r2, r3, #5
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	4413      	add	r3, r2
 8005658:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	68ba      	ldr	r2, [r7, #8]
 8005660:	0151      	lsls	r1, r2, #5
 8005662:	68fa      	ldr	r2, [r7, #12]
 8005664:	440a      	add	r2, r1
 8005666:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800566a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800566e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005670:	68bb      	ldr	r3, [r7, #8]
 8005672:	015a      	lsls	r2, r3, #5
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	4413      	add	r3, r2
 8005678:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	68ba      	ldr	r2, [r7, #8]
 8005680:	0151      	lsls	r1, r2, #5
 8005682:	68fa      	ldr	r2, [r7, #12]
 8005684:	440a      	add	r2, r1
 8005686:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800568a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800568e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005696:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005698:	683b      	ldr	r3, [r7, #0]
 800569a:	781b      	ldrb	r3, [r3, #0]
 800569c:	f003 030f 	and.w	r3, r3, #15
 80056a0:	2101      	movs	r1, #1
 80056a2:	fa01 f303 	lsl.w	r3, r1, r3
 80056a6:	041b      	lsls	r3, r3, #16
 80056a8:	43db      	mvns	r3, r3
 80056aa:	68f9      	ldr	r1, [r7, #12]
 80056ac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80056b0:	4013      	ands	r3, r2
 80056b2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056ba:	69da      	ldr	r2, [r3, #28]
 80056bc:	683b      	ldr	r3, [r7, #0]
 80056be:	781b      	ldrb	r3, [r3, #0]
 80056c0:	f003 030f 	and.w	r3, r3, #15
 80056c4:	2101      	movs	r1, #1
 80056c6:	fa01 f303 	lsl.w	r3, r1, r3
 80056ca:	041b      	lsls	r3, r3, #16
 80056cc:	43db      	mvns	r3, r3
 80056ce:	68f9      	ldr	r1, [r7, #12]
 80056d0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80056d4:	4013      	ands	r3, r2
 80056d6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80056d8:	68bb      	ldr	r3, [r7, #8]
 80056da:	015a      	lsls	r2, r3, #5
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	4413      	add	r3, r2
 80056e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056e4:	681a      	ldr	r2, [r3, #0]
 80056e6:	68bb      	ldr	r3, [r7, #8]
 80056e8:	0159      	lsls	r1, r3, #5
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	440b      	add	r3, r1
 80056ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056f2:	4619      	mov	r1, r3
 80056f4:	4b05      	ldr	r3, [pc, #20]	; (800570c <USB_DeactivateEndpoint+0x1b4>)
 80056f6:	4013      	ands	r3, r2
 80056f8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80056fa:	2300      	movs	r3, #0
}
 80056fc:	4618      	mov	r0, r3
 80056fe:	3714      	adds	r7, #20
 8005700:	46bd      	mov	sp, r7
 8005702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005706:	4770      	bx	lr
 8005708:	ec337800 	.word	0xec337800
 800570c:	eff37800 	.word	0xeff37800

08005710 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005710:	b580      	push	{r7, lr}
 8005712:	b08a      	sub	sp, #40	; 0x28
 8005714:	af02      	add	r7, sp, #8
 8005716:	60f8      	str	r0, [r7, #12]
 8005718:	60b9      	str	r1, [r7, #8]
 800571a:	4613      	mov	r3, r2
 800571c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8005722:	68bb      	ldr	r3, [r7, #8]
 8005724:	781b      	ldrb	r3, [r3, #0]
 8005726:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005728:	68bb      	ldr	r3, [r7, #8]
 800572a:	785b      	ldrb	r3, [r3, #1]
 800572c:	2b01      	cmp	r3, #1
 800572e:	f040 815c 	bne.w	80059ea <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005732:	68bb      	ldr	r3, [r7, #8]
 8005734:	699b      	ldr	r3, [r3, #24]
 8005736:	2b00      	cmp	r3, #0
 8005738:	d132      	bne.n	80057a0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800573a:	69bb      	ldr	r3, [r7, #24]
 800573c:	015a      	lsls	r2, r3, #5
 800573e:	69fb      	ldr	r3, [r7, #28]
 8005740:	4413      	add	r3, r2
 8005742:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005746:	691b      	ldr	r3, [r3, #16]
 8005748:	69ba      	ldr	r2, [r7, #24]
 800574a:	0151      	lsls	r1, r2, #5
 800574c:	69fa      	ldr	r2, [r7, #28]
 800574e:	440a      	add	r2, r1
 8005750:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005754:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005758:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800575c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800575e:	69bb      	ldr	r3, [r7, #24]
 8005760:	015a      	lsls	r2, r3, #5
 8005762:	69fb      	ldr	r3, [r7, #28]
 8005764:	4413      	add	r3, r2
 8005766:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800576a:	691b      	ldr	r3, [r3, #16]
 800576c:	69ba      	ldr	r2, [r7, #24]
 800576e:	0151      	lsls	r1, r2, #5
 8005770:	69fa      	ldr	r2, [r7, #28]
 8005772:	440a      	add	r2, r1
 8005774:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005778:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800577c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800577e:	69bb      	ldr	r3, [r7, #24]
 8005780:	015a      	lsls	r2, r3, #5
 8005782:	69fb      	ldr	r3, [r7, #28]
 8005784:	4413      	add	r3, r2
 8005786:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800578a:	691b      	ldr	r3, [r3, #16]
 800578c:	69ba      	ldr	r2, [r7, #24]
 800578e:	0151      	lsls	r1, r2, #5
 8005790:	69fa      	ldr	r2, [r7, #28]
 8005792:	440a      	add	r2, r1
 8005794:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005798:	0cdb      	lsrs	r3, r3, #19
 800579a:	04db      	lsls	r3, r3, #19
 800579c:	6113      	str	r3, [r2, #16]
 800579e:	e074      	b.n	800588a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80057a0:	69bb      	ldr	r3, [r7, #24]
 80057a2:	015a      	lsls	r2, r3, #5
 80057a4:	69fb      	ldr	r3, [r7, #28]
 80057a6:	4413      	add	r3, r2
 80057a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057ac:	691b      	ldr	r3, [r3, #16]
 80057ae:	69ba      	ldr	r2, [r7, #24]
 80057b0:	0151      	lsls	r1, r2, #5
 80057b2:	69fa      	ldr	r2, [r7, #28]
 80057b4:	440a      	add	r2, r1
 80057b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057ba:	0cdb      	lsrs	r3, r3, #19
 80057bc:	04db      	lsls	r3, r3, #19
 80057be:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80057c0:	69bb      	ldr	r3, [r7, #24]
 80057c2:	015a      	lsls	r2, r3, #5
 80057c4:	69fb      	ldr	r3, [r7, #28]
 80057c6:	4413      	add	r3, r2
 80057c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057cc:	691b      	ldr	r3, [r3, #16]
 80057ce:	69ba      	ldr	r2, [r7, #24]
 80057d0:	0151      	lsls	r1, r2, #5
 80057d2:	69fa      	ldr	r2, [r7, #28]
 80057d4:	440a      	add	r2, r1
 80057d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057da:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80057de:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80057e2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80057e4:	69bb      	ldr	r3, [r7, #24]
 80057e6:	015a      	lsls	r2, r3, #5
 80057e8:	69fb      	ldr	r3, [r7, #28]
 80057ea:	4413      	add	r3, r2
 80057ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057f0:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80057f2:	68bb      	ldr	r3, [r7, #8]
 80057f4:	6999      	ldr	r1, [r3, #24]
 80057f6:	68bb      	ldr	r3, [r7, #8]
 80057f8:	68db      	ldr	r3, [r3, #12]
 80057fa:	440b      	add	r3, r1
 80057fc:	1e59      	subs	r1, r3, #1
 80057fe:	68bb      	ldr	r3, [r7, #8]
 8005800:	68db      	ldr	r3, [r3, #12]
 8005802:	fbb1 f3f3 	udiv	r3, r1, r3
 8005806:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005808:	4b9d      	ldr	r3, [pc, #628]	; (8005a80 <USB_EPStartXfer+0x370>)
 800580a:	400b      	ands	r3, r1
 800580c:	69b9      	ldr	r1, [r7, #24]
 800580e:	0148      	lsls	r0, r1, #5
 8005810:	69f9      	ldr	r1, [r7, #28]
 8005812:	4401      	add	r1, r0
 8005814:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005818:	4313      	orrs	r3, r2
 800581a:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800581c:	69bb      	ldr	r3, [r7, #24]
 800581e:	015a      	lsls	r2, r3, #5
 8005820:	69fb      	ldr	r3, [r7, #28]
 8005822:	4413      	add	r3, r2
 8005824:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005828:	691a      	ldr	r2, [r3, #16]
 800582a:	68bb      	ldr	r3, [r7, #8]
 800582c:	699b      	ldr	r3, [r3, #24]
 800582e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005832:	69b9      	ldr	r1, [r7, #24]
 8005834:	0148      	lsls	r0, r1, #5
 8005836:	69f9      	ldr	r1, [r7, #28]
 8005838:	4401      	add	r1, r0
 800583a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800583e:	4313      	orrs	r3, r2
 8005840:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8005842:	68bb      	ldr	r3, [r7, #8]
 8005844:	791b      	ldrb	r3, [r3, #4]
 8005846:	2b01      	cmp	r3, #1
 8005848:	d11f      	bne.n	800588a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800584a:	69bb      	ldr	r3, [r7, #24]
 800584c:	015a      	lsls	r2, r3, #5
 800584e:	69fb      	ldr	r3, [r7, #28]
 8005850:	4413      	add	r3, r2
 8005852:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005856:	691b      	ldr	r3, [r3, #16]
 8005858:	69ba      	ldr	r2, [r7, #24]
 800585a:	0151      	lsls	r1, r2, #5
 800585c:	69fa      	ldr	r2, [r7, #28]
 800585e:	440a      	add	r2, r1
 8005860:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005864:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8005868:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800586a:	69bb      	ldr	r3, [r7, #24]
 800586c:	015a      	lsls	r2, r3, #5
 800586e:	69fb      	ldr	r3, [r7, #28]
 8005870:	4413      	add	r3, r2
 8005872:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005876:	691b      	ldr	r3, [r3, #16]
 8005878:	69ba      	ldr	r2, [r7, #24]
 800587a:	0151      	lsls	r1, r2, #5
 800587c:	69fa      	ldr	r2, [r7, #28]
 800587e:	440a      	add	r2, r1
 8005880:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005884:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005888:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800588a:	79fb      	ldrb	r3, [r7, #7]
 800588c:	2b01      	cmp	r3, #1
 800588e:	d14b      	bne.n	8005928 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005890:	68bb      	ldr	r3, [r7, #8]
 8005892:	695b      	ldr	r3, [r3, #20]
 8005894:	2b00      	cmp	r3, #0
 8005896:	d009      	beq.n	80058ac <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005898:	69bb      	ldr	r3, [r7, #24]
 800589a:	015a      	lsls	r2, r3, #5
 800589c:	69fb      	ldr	r3, [r7, #28]
 800589e:	4413      	add	r3, r2
 80058a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058a4:	461a      	mov	r2, r3
 80058a6:	68bb      	ldr	r3, [r7, #8]
 80058a8:	695b      	ldr	r3, [r3, #20]
 80058aa:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80058ac:	68bb      	ldr	r3, [r7, #8]
 80058ae:	791b      	ldrb	r3, [r3, #4]
 80058b0:	2b01      	cmp	r3, #1
 80058b2:	d128      	bne.n	8005906 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80058b4:	69fb      	ldr	r3, [r7, #28]
 80058b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058ba:	689b      	ldr	r3, [r3, #8]
 80058bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d110      	bne.n	80058e6 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80058c4:	69bb      	ldr	r3, [r7, #24]
 80058c6:	015a      	lsls	r2, r3, #5
 80058c8:	69fb      	ldr	r3, [r7, #28]
 80058ca:	4413      	add	r3, r2
 80058cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	69ba      	ldr	r2, [r7, #24]
 80058d4:	0151      	lsls	r1, r2, #5
 80058d6:	69fa      	ldr	r2, [r7, #28]
 80058d8:	440a      	add	r2, r1
 80058da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058de:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80058e2:	6013      	str	r3, [r2, #0]
 80058e4:	e00f      	b.n	8005906 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80058e6:	69bb      	ldr	r3, [r7, #24]
 80058e8:	015a      	lsls	r2, r3, #5
 80058ea:	69fb      	ldr	r3, [r7, #28]
 80058ec:	4413      	add	r3, r2
 80058ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	69ba      	ldr	r2, [r7, #24]
 80058f6:	0151      	lsls	r1, r2, #5
 80058f8:	69fa      	ldr	r2, [r7, #28]
 80058fa:	440a      	add	r2, r1
 80058fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005900:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005904:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005906:	69bb      	ldr	r3, [r7, #24]
 8005908:	015a      	lsls	r2, r3, #5
 800590a:	69fb      	ldr	r3, [r7, #28]
 800590c:	4413      	add	r3, r2
 800590e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	69ba      	ldr	r2, [r7, #24]
 8005916:	0151      	lsls	r1, r2, #5
 8005918:	69fa      	ldr	r2, [r7, #28]
 800591a:	440a      	add	r2, r1
 800591c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005920:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005924:	6013      	str	r3, [r2, #0]
 8005926:	e133      	b.n	8005b90 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005928:	69bb      	ldr	r3, [r7, #24]
 800592a:	015a      	lsls	r2, r3, #5
 800592c:	69fb      	ldr	r3, [r7, #28]
 800592e:	4413      	add	r3, r2
 8005930:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	69ba      	ldr	r2, [r7, #24]
 8005938:	0151      	lsls	r1, r2, #5
 800593a:	69fa      	ldr	r2, [r7, #28]
 800593c:	440a      	add	r2, r1
 800593e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005942:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005946:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005948:	68bb      	ldr	r3, [r7, #8]
 800594a:	791b      	ldrb	r3, [r3, #4]
 800594c:	2b01      	cmp	r3, #1
 800594e:	d015      	beq.n	800597c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005950:	68bb      	ldr	r3, [r7, #8]
 8005952:	699b      	ldr	r3, [r3, #24]
 8005954:	2b00      	cmp	r3, #0
 8005956:	f000 811b 	beq.w	8005b90 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800595a:	69fb      	ldr	r3, [r7, #28]
 800595c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005960:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005962:	68bb      	ldr	r3, [r7, #8]
 8005964:	781b      	ldrb	r3, [r3, #0]
 8005966:	f003 030f 	and.w	r3, r3, #15
 800596a:	2101      	movs	r1, #1
 800596c:	fa01 f303 	lsl.w	r3, r1, r3
 8005970:	69f9      	ldr	r1, [r7, #28]
 8005972:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005976:	4313      	orrs	r3, r2
 8005978:	634b      	str	r3, [r1, #52]	; 0x34
 800597a:	e109      	b.n	8005b90 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800597c:	69fb      	ldr	r3, [r7, #28]
 800597e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005982:	689b      	ldr	r3, [r3, #8]
 8005984:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005988:	2b00      	cmp	r3, #0
 800598a:	d110      	bne.n	80059ae <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800598c:	69bb      	ldr	r3, [r7, #24]
 800598e:	015a      	lsls	r2, r3, #5
 8005990:	69fb      	ldr	r3, [r7, #28]
 8005992:	4413      	add	r3, r2
 8005994:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	69ba      	ldr	r2, [r7, #24]
 800599c:	0151      	lsls	r1, r2, #5
 800599e:	69fa      	ldr	r2, [r7, #28]
 80059a0:	440a      	add	r2, r1
 80059a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80059a6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80059aa:	6013      	str	r3, [r2, #0]
 80059ac:	e00f      	b.n	80059ce <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80059ae:	69bb      	ldr	r3, [r7, #24]
 80059b0:	015a      	lsls	r2, r3, #5
 80059b2:	69fb      	ldr	r3, [r7, #28]
 80059b4:	4413      	add	r3, r2
 80059b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	69ba      	ldr	r2, [r7, #24]
 80059be:	0151      	lsls	r1, r2, #5
 80059c0:	69fa      	ldr	r2, [r7, #28]
 80059c2:	440a      	add	r2, r1
 80059c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80059c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80059cc:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80059ce:	68bb      	ldr	r3, [r7, #8]
 80059d0:	6919      	ldr	r1, [r3, #16]
 80059d2:	68bb      	ldr	r3, [r7, #8]
 80059d4:	781a      	ldrb	r2, [r3, #0]
 80059d6:	68bb      	ldr	r3, [r7, #8]
 80059d8:	699b      	ldr	r3, [r3, #24]
 80059da:	b298      	uxth	r0, r3
 80059dc:	79fb      	ldrb	r3, [r7, #7]
 80059de:	9300      	str	r3, [sp, #0]
 80059e0:	4603      	mov	r3, r0
 80059e2:	68f8      	ldr	r0, [r7, #12]
 80059e4:	f000 fade 	bl	8005fa4 <USB_WritePacket>
 80059e8:	e0d2      	b.n	8005b90 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80059ea:	69bb      	ldr	r3, [r7, #24]
 80059ec:	015a      	lsls	r2, r3, #5
 80059ee:	69fb      	ldr	r3, [r7, #28]
 80059f0:	4413      	add	r3, r2
 80059f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059f6:	691b      	ldr	r3, [r3, #16]
 80059f8:	69ba      	ldr	r2, [r7, #24]
 80059fa:	0151      	lsls	r1, r2, #5
 80059fc:	69fa      	ldr	r2, [r7, #28]
 80059fe:	440a      	add	r2, r1
 8005a00:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a04:	0cdb      	lsrs	r3, r3, #19
 8005a06:	04db      	lsls	r3, r3, #19
 8005a08:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005a0a:	69bb      	ldr	r3, [r7, #24]
 8005a0c:	015a      	lsls	r2, r3, #5
 8005a0e:	69fb      	ldr	r3, [r7, #28]
 8005a10:	4413      	add	r3, r2
 8005a12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a16:	691b      	ldr	r3, [r3, #16]
 8005a18:	69ba      	ldr	r2, [r7, #24]
 8005a1a:	0151      	lsls	r1, r2, #5
 8005a1c:	69fa      	ldr	r2, [r7, #28]
 8005a1e:	440a      	add	r2, r1
 8005a20:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a24:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005a28:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005a2c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8005a2e:	68bb      	ldr	r3, [r7, #8]
 8005a30:	699b      	ldr	r3, [r3, #24]
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d126      	bne.n	8005a84 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005a36:	69bb      	ldr	r3, [r7, #24]
 8005a38:	015a      	lsls	r2, r3, #5
 8005a3a:	69fb      	ldr	r3, [r7, #28]
 8005a3c:	4413      	add	r3, r2
 8005a3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a42:	691a      	ldr	r2, [r3, #16]
 8005a44:	68bb      	ldr	r3, [r7, #8]
 8005a46:	68db      	ldr	r3, [r3, #12]
 8005a48:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005a4c:	69b9      	ldr	r1, [r7, #24]
 8005a4e:	0148      	lsls	r0, r1, #5
 8005a50:	69f9      	ldr	r1, [r7, #28]
 8005a52:	4401      	add	r1, r0
 8005a54:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005a58:	4313      	orrs	r3, r2
 8005a5a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005a5c:	69bb      	ldr	r3, [r7, #24]
 8005a5e:	015a      	lsls	r2, r3, #5
 8005a60:	69fb      	ldr	r3, [r7, #28]
 8005a62:	4413      	add	r3, r2
 8005a64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a68:	691b      	ldr	r3, [r3, #16]
 8005a6a:	69ba      	ldr	r2, [r7, #24]
 8005a6c:	0151      	lsls	r1, r2, #5
 8005a6e:	69fa      	ldr	r2, [r7, #28]
 8005a70:	440a      	add	r2, r1
 8005a72:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a76:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005a7a:	6113      	str	r3, [r2, #16]
 8005a7c:	e03a      	b.n	8005af4 <USB_EPStartXfer+0x3e4>
 8005a7e:	bf00      	nop
 8005a80:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005a84:	68bb      	ldr	r3, [r7, #8]
 8005a86:	699a      	ldr	r2, [r3, #24]
 8005a88:	68bb      	ldr	r3, [r7, #8]
 8005a8a:	68db      	ldr	r3, [r3, #12]
 8005a8c:	4413      	add	r3, r2
 8005a8e:	1e5a      	subs	r2, r3, #1
 8005a90:	68bb      	ldr	r3, [r7, #8]
 8005a92:	68db      	ldr	r3, [r3, #12]
 8005a94:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a98:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8005a9a:	68bb      	ldr	r3, [r7, #8]
 8005a9c:	68db      	ldr	r3, [r3, #12]
 8005a9e:	8afa      	ldrh	r2, [r7, #22]
 8005aa0:	fb03 f202 	mul.w	r2, r3, r2
 8005aa4:	68bb      	ldr	r3, [r7, #8]
 8005aa6:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005aa8:	69bb      	ldr	r3, [r7, #24]
 8005aaa:	015a      	lsls	r2, r3, #5
 8005aac:	69fb      	ldr	r3, [r7, #28]
 8005aae:	4413      	add	r3, r2
 8005ab0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ab4:	691a      	ldr	r2, [r3, #16]
 8005ab6:	8afb      	ldrh	r3, [r7, #22]
 8005ab8:	04d9      	lsls	r1, r3, #19
 8005aba:	4b38      	ldr	r3, [pc, #224]	; (8005b9c <USB_EPStartXfer+0x48c>)
 8005abc:	400b      	ands	r3, r1
 8005abe:	69b9      	ldr	r1, [r7, #24]
 8005ac0:	0148      	lsls	r0, r1, #5
 8005ac2:	69f9      	ldr	r1, [r7, #28]
 8005ac4:	4401      	add	r1, r0
 8005ac6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005aca:	4313      	orrs	r3, r2
 8005acc:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8005ace:	69bb      	ldr	r3, [r7, #24]
 8005ad0:	015a      	lsls	r2, r3, #5
 8005ad2:	69fb      	ldr	r3, [r7, #28]
 8005ad4:	4413      	add	r3, r2
 8005ad6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ada:	691a      	ldr	r2, [r3, #16]
 8005adc:	68bb      	ldr	r3, [r7, #8]
 8005ade:	69db      	ldr	r3, [r3, #28]
 8005ae0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005ae4:	69b9      	ldr	r1, [r7, #24]
 8005ae6:	0148      	lsls	r0, r1, #5
 8005ae8:	69f9      	ldr	r1, [r7, #28]
 8005aea:	4401      	add	r1, r0
 8005aec:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005af0:	4313      	orrs	r3, r2
 8005af2:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005af4:	79fb      	ldrb	r3, [r7, #7]
 8005af6:	2b01      	cmp	r3, #1
 8005af8:	d10d      	bne.n	8005b16 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005afa:	68bb      	ldr	r3, [r7, #8]
 8005afc:	691b      	ldr	r3, [r3, #16]
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d009      	beq.n	8005b16 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005b02:	68bb      	ldr	r3, [r7, #8]
 8005b04:	6919      	ldr	r1, [r3, #16]
 8005b06:	69bb      	ldr	r3, [r7, #24]
 8005b08:	015a      	lsls	r2, r3, #5
 8005b0a:	69fb      	ldr	r3, [r7, #28]
 8005b0c:	4413      	add	r3, r2
 8005b0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b12:	460a      	mov	r2, r1
 8005b14:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005b16:	68bb      	ldr	r3, [r7, #8]
 8005b18:	791b      	ldrb	r3, [r3, #4]
 8005b1a:	2b01      	cmp	r3, #1
 8005b1c:	d128      	bne.n	8005b70 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005b1e:	69fb      	ldr	r3, [r7, #28]
 8005b20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b24:	689b      	ldr	r3, [r3, #8]
 8005b26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d110      	bne.n	8005b50 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005b2e:	69bb      	ldr	r3, [r7, #24]
 8005b30:	015a      	lsls	r2, r3, #5
 8005b32:	69fb      	ldr	r3, [r7, #28]
 8005b34:	4413      	add	r3, r2
 8005b36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	69ba      	ldr	r2, [r7, #24]
 8005b3e:	0151      	lsls	r1, r2, #5
 8005b40:	69fa      	ldr	r2, [r7, #28]
 8005b42:	440a      	add	r2, r1
 8005b44:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b48:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005b4c:	6013      	str	r3, [r2, #0]
 8005b4e:	e00f      	b.n	8005b70 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005b50:	69bb      	ldr	r3, [r7, #24]
 8005b52:	015a      	lsls	r2, r3, #5
 8005b54:	69fb      	ldr	r3, [r7, #28]
 8005b56:	4413      	add	r3, r2
 8005b58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	69ba      	ldr	r2, [r7, #24]
 8005b60:	0151      	lsls	r1, r2, #5
 8005b62:	69fa      	ldr	r2, [r7, #28]
 8005b64:	440a      	add	r2, r1
 8005b66:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b6a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b6e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005b70:	69bb      	ldr	r3, [r7, #24]
 8005b72:	015a      	lsls	r2, r3, #5
 8005b74:	69fb      	ldr	r3, [r7, #28]
 8005b76:	4413      	add	r3, r2
 8005b78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	69ba      	ldr	r2, [r7, #24]
 8005b80:	0151      	lsls	r1, r2, #5
 8005b82:	69fa      	ldr	r2, [r7, #28]
 8005b84:	440a      	add	r2, r1
 8005b86:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b8a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005b8e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005b90:	2300      	movs	r3, #0
}
 8005b92:	4618      	mov	r0, r3
 8005b94:	3720      	adds	r7, #32
 8005b96:	46bd      	mov	sp, r7
 8005b98:	bd80      	pop	{r7, pc}
 8005b9a:	bf00      	nop
 8005b9c:	1ff80000 	.word	0x1ff80000

08005ba0 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005ba0:	b480      	push	{r7}
 8005ba2:	b087      	sub	sp, #28
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	60f8      	str	r0, [r7, #12]
 8005ba8:	60b9      	str	r1, [r7, #8]
 8005baa:	4613      	mov	r3, r2
 8005bac:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8005bb2:	68bb      	ldr	r3, [r7, #8]
 8005bb4:	781b      	ldrb	r3, [r3, #0]
 8005bb6:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005bb8:	68bb      	ldr	r3, [r7, #8]
 8005bba:	785b      	ldrb	r3, [r3, #1]
 8005bbc:	2b01      	cmp	r3, #1
 8005bbe:	f040 80ce 	bne.w	8005d5e <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005bc2:	68bb      	ldr	r3, [r7, #8]
 8005bc4:	699b      	ldr	r3, [r3, #24]
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d132      	bne.n	8005c30 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005bca:	693b      	ldr	r3, [r7, #16]
 8005bcc:	015a      	lsls	r2, r3, #5
 8005bce:	697b      	ldr	r3, [r7, #20]
 8005bd0:	4413      	add	r3, r2
 8005bd2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bd6:	691b      	ldr	r3, [r3, #16]
 8005bd8:	693a      	ldr	r2, [r7, #16]
 8005bda:	0151      	lsls	r1, r2, #5
 8005bdc:	697a      	ldr	r2, [r7, #20]
 8005bde:	440a      	add	r2, r1
 8005be0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005be4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005be8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005bec:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005bee:	693b      	ldr	r3, [r7, #16]
 8005bf0:	015a      	lsls	r2, r3, #5
 8005bf2:	697b      	ldr	r3, [r7, #20]
 8005bf4:	4413      	add	r3, r2
 8005bf6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bfa:	691b      	ldr	r3, [r3, #16]
 8005bfc:	693a      	ldr	r2, [r7, #16]
 8005bfe:	0151      	lsls	r1, r2, #5
 8005c00:	697a      	ldr	r2, [r7, #20]
 8005c02:	440a      	add	r2, r1
 8005c04:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c08:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005c0c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005c0e:	693b      	ldr	r3, [r7, #16]
 8005c10:	015a      	lsls	r2, r3, #5
 8005c12:	697b      	ldr	r3, [r7, #20]
 8005c14:	4413      	add	r3, r2
 8005c16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c1a:	691b      	ldr	r3, [r3, #16]
 8005c1c:	693a      	ldr	r2, [r7, #16]
 8005c1e:	0151      	lsls	r1, r2, #5
 8005c20:	697a      	ldr	r2, [r7, #20]
 8005c22:	440a      	add	r2, r1
 8005c24:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c28:	0cdb      	lsrs	r3, r3, #19
 8005c2a:	04db      	lsls	r3, r3, #19
 8005c2c:	6113      	str	r3, [r2, #16]
 8005c2e:	e04e      	b.n	8005cce <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005c30:	693b      	ldr	r3, [r7, #16]
 8005c32:	015a      	lsls	r2, r3, #5
 8005c34:	697b      	ldr	r3, [r7, #20]
 8005c36:	4413      	add	r3, r2
 8005c38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c3c:	691b      	ldr	r3, [r3, #16]
 8005c3e:	693a      	ldr	r2, [r7, #16]
 8005c40:	0151      	lsls	r1, r2, #5
 8005c42:	697a      	ldr	r2, [r7, #20]
 8005c44:	440a      	add	r2, r1
 8005c46:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c4a:	0cdb      	lsrs	r3, r3, #19
 8005c4c:	04db      	lsls	r3, r3, #19
 8005c4e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005c50:	693b      	ldr	r3, [r7, #16]
 8005c52:	015a      	lsls	r2, r3, #5
 8005c54:	697b      	ldr	r3, [r7, #20]
 8005c56:	4413      	add	r3, r2
 8005c58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c5c:	691b      	ldr	r3, [r3, #16]
 8005c5e:	693a      	ldr	r2, [r7, #16]
 8005c60:	0151      	lsls	r1, r2, #5
 8005c62:	697a      	ldr	r2, [r7, #20]
 8005c64:	440a      	add	r2, r1
 8005c66:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c6a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005c6e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005c72:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8005c74:	68bb      	ldr	r3, [r7, #8]
 8005c76:	699a      	ldr	r2, [r3, #24]
 8005c78:	68bb      	ldr	r3, [r7, #8]
 8005c7a:	68db      	ldr	r3, [r3, #12]
 8005c7c:	429a      	cmp	r2, r3
 8005c7e:	d903      	bls.n	8005c88 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8005c80:	68bb      	ldr	r3, [r7, #8]
 8005c82:	68da      	ldr	r2, [r3, #12]
 8005c84:	68bb      	ldr	r3, [r7, #8]
 8005c86:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005c88:	693b      	ldr	r3, [r7, #16]
 8005c8a:	015a      	lsls	r2, r3, #5
 8005c8c:	697b      	ldr	r3, [r7, #20]
 8005c8e:	4413      	add	r3, r2
 8005c90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c94:	691b      	ldr	r3, [r3, #16]
 8005c96:	693a      	ldr	r2, [r7, #16]
 8005c98:	0151      	lsls	r1, r2, #5
 8005c9a:	697a      	ldr	r2, [r7, #20]
 8005c9c:	440a      	add	r2, r1
 8005c9e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ca2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005ca6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005ca8:	693b      	ldr	r3, [r7, #16]
 8005caa:	015a      	lsls	r2, r3, #5
 8005cac:	697b      	ldr	r3, [r7, #20]
 8005cae:	4413      	add	r3, r2
 8005cb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cb4:	691a      	ldr	r2, [r3, #16]
 8005cb6:	68bb      	ldr	r3, [r7, #8]
 8005cb8:	699b      	ldr	r3, [r3, #24]
 8005cba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005cbe:	6939      	ldr	r1, [r7, #16]
 8005cc0:	0148      	lsls	r0, r1, #5
 8005cc2:	6979      	ldr	r1, [r7, #20]
 8005cc4:	4401      	add	r1, r0
 8005cc6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005cca:	4313      	orrs	r3, r2
 8005ccc:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005cce:	79fb      	ldrb	r3, [r7, #7]
 8005cd0:	2b01      	cmp	r3, #1
 8005cd2:	d11e      	bne.n	8005d12 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005cd4:	68bb      	ldr	r3, [r7, #8]
 8005cd6:	695b      	ldr	r3, [r3, #20]
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d009      	beq.n	8005cf0 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005cdc:	693b      	ldr	r3, [r7, #16]
 8005cde:	015a      	lsls	r2, r3, #5
 8005ce0:	697b      	ldr	r3, [r7, #20]
 8005ce2:	4413      	add	r3, r2
 8005ce4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ce8:	461a      	mov	r2, r3
 8005cea:	68bb      	ldr	r3, [r7, #8]
 8005cec:	695b      	ldr	r3, [r3, #20]
 8005cee:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005cf0:	693b      	ldr	r3, [r7, #16]
 8005cf2:	015a      	lsls	r2, r3, #5
 8005cf4:	697b      	ldr	r3, [r7, #20]
 8005cf6:	4413      	add	r3, r2
 8005cf8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	693a      	ldr	r2, [r7, #16]
 8005d00:	0151      	lsls	r1, r2, #5
 8005d02:	697a      	ldr	r2, [r7, #20]
 8005d04:	440a      	add	r2, r1
 8005d06:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d0a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005d0e:	6013      	str	r3, [r2, #0]
 8005d10:	e097      	b.n	8005e42 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005d12:	693b      	ldr	r3, [r7, #16]
 8005d14:	015a      	lsls	r2, r3, #5
 8005d16:	697b      	ldr	r3, [r7, #20]
 8005d18:	4413      	add	r3, r2
 8005d1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	693a      	ldr	r2, [r7, #16]
 8005d22:	0151      	lsls	r1, r2, #5
 8005d24:	697a      	ldr	r2, [r7, #20]
 8005d26:	440a      	add	r2, r1
 8005d28:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d2c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005d30:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8005d32:	68bb      	ldr	r3, [r7, #8]
 8005d34:	699b      	ldr	r3, [r3, #24]
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	f000 8083 	beq.w	8005e42 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005d3c:	697b      	ldr	r3, [r7, #20]
 8005d3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d42:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005d44:	68bb      	ldr	r3, [r7, #8]
 8005d46:	781b      	ldrb	r3, [r3, #0]
 8005d48:	f003 030f 	and.w	r3, r3, #15
 8005d4c:	2101      	movs	r1, #1
 8005d4e:	fa01 f303 	lsl.w	r3, r1, r3
 8005d52:	6979      	ldr	r1, [r7, #20]
 8005d54:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005d58:	4313      	orrs	r3, r2
 8005d5a:	634b      	str	r3, [r1, #52]	; 0x34
 8005d5c:	e071      	b.n	8005e42 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005d5e:	693b      	ldr	r3, [r7, #16]
 8005d60:	015a      	lsls	r2, r3, #5
 8005d62:	697b      	ldr	r3, [r7, #20]
 8005d64:	4413      	add	r3, r2
 8005d66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d6a:	691b      	ldr	r3, [r3, #16]
 8005d6c:	693a      	ldr	r2, [r7, #16]
 8005d6e:	0151      	lsls	r1, r2, #5
 8005d70:	697a      	ldr	r2, [r7, #20]
 8005d72:	440a      	add	r2, r1
 8005d74:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d78:	0cdb      	lsrs	r3, r3, #19
 8005d7a:	04db      	lsls	r3, r3, #19
 8005d7c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005d7e:	693b      	ldr	r3, [r7, #16]
 8005d80:	015a      	lsls	r2, r3, #5
 8005d82:	697b      	ldr	r3, [r7, #20]
 8005d84:	4413      	add	r3, r2
 8005d86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d8a:	691b      	ldr	r3, [r3, #16]
 8005d8c:	693a      	ldr	r2, [r7, #16]
 8005d8e:	0151      	lsls	r1, r2, #5
 8005d90:	697a      	ldr	r2, [r7, #20]
 8005d92:	440a      	add	r2, r1
 8005d94:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d98:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005d9c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005da0:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8005da2:	68bb      	ldr	r3, [r7, #8]
 8005da4:	699b      	ldr	r3, [r3, #24]
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d003      	beq.n	8005db2 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8005daa:	68bb      	ldr	r3, [r7, #8]
 8005dac:	68da      	ldr	r2, [r3, #12]
 8005dae:	68bb      	ldr	r3, [r7, #8]
 8005db0:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8005db2:	68bb      	ldr	r3, [r7, #8]
 8005db4:	68da      	ldr	r2, [r3, #12]
 8005db6:	68bb      	ldr	r3, [r7, #8]
 8005db8:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005dba:	693b      	ldr	r3, [r7, #16]
 8005dbc:	015a      	lsls	r2, r3, #5
 8005dbe:	697b      	ldr	r3, [r7, #20]
 8005dc0:	4413      	add	r3, r2
 8005dc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dc6:	691b      	ldr	r3, [r3, #16]
 8005dc8:	693a      	ldr	r2, [r7, #16]
 8005dca:	0151      	lsls	r1, r2, #5
 8005dcc:	697a      	ldr	r2, [r7, #20]
 8005dce:	440a      	add	r2, r1
 8005dd0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005dd4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005dd8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8005dda:	693b      	ldr	r3, [r7, #16]
 8005ddc:	015a      	lsls	r2, r3, #5
 8005dde:	697b      	ldr	r3, [r7, #20]
 8005de0:	4413      	add	r3, r2
 8005de2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005de6:	691a      	ldr	r2, [r3, #16]
 8005de8:	68bb      	ldr	r3, [r7, #8]
 8005dea:	69db      	ldr	r3, [r3, #28]
 8005dec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005df0:	6939      	ldr	r1, [r7, #16]
 8005df2:	0148      	lsls	r0, r1, #5
 8005df4:	6979      	ldr	r1, [r7, #20]
 8005df6:	4401      	add	r1, r0
 8005df8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005dfc:	4313      	orrs	r3, r2
 8005dfe:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8005e00:	79fb      	ldrb	r3, [r7, #7]
 8005e02:	2b01      	cmp	r3, #1
 8005e04:	d10d      	bne.n	8005e22 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005e06:	68bb      	ldr	r3, [r7, #8]
 8005e08:	691b      	ldr	r3, [r3, #16]
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d009      	beq.n	8005e22 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005e0e:	68bb      	ldr	r3, [r7, #8]
 8005e10:	6919      	ldr	r1, [r3, #16]
 8005e12:	693b      	ldr	r3, [r7, #16]
 8005e14:	015a      	lsls	r2, r3, #5
 8005e16:	697b      	ldr	r3, [r7, #20]
 8005e18:	4413      	add	r3, r2
 8005e1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e1e:	460a      	mov	r2, r1
 8005e20:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005e22:	693b      	ldr	r3, [r7, #16]
 8005e24:	015a      	lsls	r2, r3, #5
 8005e26:	697b      	ldr	r3, [r7, #20]
 8005e28:	4413      	add	r3, r2
 8005e2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	693a      	ldr	r2, [r7, #16]
 8005e32:	0151      	lsls	r1, r2, #5
 8005e34:	697a      	ldr	r2, [r7, #20]
 8005e36:	440a      	add	r2, r1
 8005e38:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e3c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005e40:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005e42:	2300      	movs	r3, #0
}
 8005e44:	4618      	mov	r0, r3
 8005e46:	371c      	adds	r7, #28
 8005e48:	46bd      	mov	sp, r7
 8005e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4e:	4770      	bx	lr

08005e50 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005e50:	b480      	push	{r7}
 8005e52:	b087      	sub	sp, #28
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	6078      	str	r0, [r7, #4]
 8005e58:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005e5a:	2300      	movs	r3, #0
 8005e5c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8005e5e:	2300      	movs	r3, #0
 8005e60:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005e66:	683b      	ldr	r3, [r7, #0]
 8005e68:	785b      	ldrb	r3, [r3, #1]
 8005e6a:	2b01      	cmp	r3, #1
 8005e6c:	d14a      	bne.n	8005f04 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005e6e:	683b      	ldr	r3, [r7, #0]
 8005e70:	781b      	ldrb	r3, [r3, #0]
 8005e72:	015a      	lsls	r2, r3, #5
 8005e74:	693b      	ldr	r3, [r7, #16]
 8005e76:	4413      	add	r3, r2
 8005e78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005e82:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005e86:	f040 8086 	bne.w	8005f96 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8005e8a:	683b      	ldr	r3, [r7, #0]
 8005e8c:	781b      	ldrb	r3, [r3, #0]
 8005e8e:	015a      	lsls	r2, r3, #5
 8005e90:	693b      	ldr	r3, [r7, #16]
 8005e92:	4413      	add	r3, r2
 8005e94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	683a      	ldr	r2, [r7, #0]
 8005e9c:	7812      	ldrb	r2, [r2, #0]
 8005e9e:	0151      	lsls	r1, r2, #5
 8005ea0:	693a      	ldr	r2, [r7, #16]
 8005ea2:	440a      	add	r2, r1
 8005ea4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ea8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005eac:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8005eae:	683b      	ldr	r3, [r7, #0]
 8005eb0:	781b      	ldrb	r3, [r3, #0]
 8005eb2:	015a      	lsls	r2, r3, #5
 8005eb4:	693b      	ldr	r3, [r7, #16]
 8005eb6:	4413      	add	r3, r2
 8005eb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	683a      	ldr	r2, [r7, #0]
 8005ec0:	7812      	ldrb	r2, [r2, #0]
 8005ec2:	0151      	lsls	r1, r2, #5
 8005ec4:	693a      	ldr	r2, [r7, #16]
 8005ec6:	440a      	add	r2, r1
 8005ec8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ecc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005ed0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	3301      	adds	r3, #1
 8005ed6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	f242 7210 	movw	r2, #10000	; 0x2710
 8005ede:	4293      	cmp	r3, r2
 8005ee0:	d902      	bls.n	8005ee8 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8005ee2:	2301      	movs	r3, #1
 8005ee4:	75fb      	strb	r3, [r7, #23]
          break;
 8005ee6:	e056      	b.n	8005f96 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8005ee8:	683b      	ldr	r3, [r7, #0]
 8005eea:	781b      	ldrb	r3, [r3, #0]
 8005eec:	015a      	lsls	r2, r3, #5
 8005eee:	693b      	ldr	r3, [r7, #16]
 8005ef0:	4413      	add	r3, r2
 8005ef2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005efc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005f00:	d0e7      	beq.n	8005ed2 <USB_EPStopXfer+0x82>
 8005f02:	e048      	b.n	8005f96 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005f04:	683b      	ldr	r3, [r7, #0]
 8005f06:	781b      	ldrb	r3, [r3, #0]
 8005f08:	015a      	lsls	r2, r3, #5
 8005f0a:	693b      	ldr	r3, [r7, #16]
 8005f0c:	4413      	add	r3, r2
 8005f0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005f18:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005f1c:	d13b      	bne.n	8005f96 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8005f1e:	683b      	ldr	r3, [r7, #0]
 8005f20:	781b      	ldrb	r3, [r3, #0]
 8005f22:	015a      	lsls	r2, r3, #5
 8005f24:	693b      	ldr	r3, [r7, #16]
 8005f26:	4413      	add	r3, r2
 8005f28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	683a      	ldr	r2, [r7, #0]
 8005f30:	7812      	ldrb	r2, [r2, #0]
 8005f32:	0151      	lsls	r1, r2, #5
 8005f34:	693a      	ldr	r2, [r7, #16]
 8005f36:	440a      	add	r2, r1
 8005f38:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f3c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005f40:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8005f42:	683b      	ldr	r3, [r7, #0]
 8005f44:	781b      	ldrb	r3, [r3, #0]
 8005f46:	015a      	lsls	r2, r3, #5
 8005f48:	693b      	ldr	r3, [r7, #16]
 8005f4a:	4413      	add	r3, r2
 8005f4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	683a      	ldr	r2, [r7, #0]
 8005f54:	7812      	ldrb	r2, [r2, #0]
 8005f56:	0151      	lsls	r1, r2, #5
 8005f58:	693a      	ldr	r2, [r7, #16]
 8005f5a:	440a      	add	r2, r1
 8005f5c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f60:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005f64:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	3301      	adds	r3, #1
 8005f6a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	f242 7210 	movw	r2, #10000	; 0x2710
 8005f72:	4293      	cmp	r3, r2
 8005f74:	d902      	bls.n	8005f7c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8005f76:	2301      	movs	r3, #1
 8005f78:	75fb      	strb	r3, [r7, #23]
          break;
 8005f7a:	e00c      	b.n	8005f96 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8005f7c:	683b      	ldr	r3, [r7, #0]
 8005f7e:	781b      	ldrb	r3, [r3, #0]
 8005f80:	015a      	lsls	r2, r3, #5
 8005f82:	693b      	ldr	r3, [r7, #16]
 8005f84:	4413      	add	r3, r2
 8005f86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005f90:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005f94:	d0e7      	beq.n	8005f66 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8005f96:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f98:	4618      	mov	r0, r3
 8005f9a:	371c      	adds	r7, #28
 8005f9c:	46bd      	mov	sp, r7
 8005f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa2:	4770      	bx	lr

08005fa4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005fa4:	b480      	push	{r7}
 8005fa6:	b089      	sub	sp, #36	; 0x24
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	60f8      	str	r0, [r7, #12]
 8005fac:	60b9      	str	r1, [r7, #8]
 8005fae:	4611      	mov	r1, r2
 8005fb0:	461a      	mov	r2, r3
 8005fb2:	460b      	mov	r3, r1
 8005fb4:	71fb      	strb	r3, [r7, #7]
 8005fb6:	4613      	mov	r3, r2
 8005fb8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005fbe:	68bb      	ldr	r3, [r7, #8]
 8005fc0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005fc2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d123      	bne.n	8006012 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005fca:	88bb      	ldrh	r3, [r7, #4]
 8005fcc:	3303      	adds	r3, #3
 8005fce:	089b      	lsrs	r3, r3, #2
 8005fd0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005fd2:	2300      	movs	r3, #0
 8005fd4:	61bb      	str	r3, [r7, #24]
 8005fd6:	e018      	b.n	800600a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005fd8:	79fb      	ldrb	r3, [r7, #7]
 8005fda:	031a      	lsls	r2, r3, #12
 8005fdc:	697b      	ldr	r3, [r7, #20]
 8005fde:	4413      	add	r3, r2
 8005fe0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005fe4:	461a      	mov	r2, r3
 8005fe6:	69fb      	ldr	r3, [r7, #28]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005fec:	69fb      	ldr	r3, [r7, #28]
 8005fee:	3301      	adds	r3, #1
 8005ff0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005ff2:	69fb      	ldr	r3, [r7, #28]
 8005ff4:	3301      	adds	r3, #1
 8005ff6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005ff8:	69fb      	ldr	r3, [r7, #28]
 8005ffa:	3301      	adds	r3, #1
 8005ffc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005ffe:	69fb      	ldr	r3, [r7, #28]
 8006000:	3301      	adds	r3, #1
 8006002:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006004:	69bb      	ldr	r3, [r7, #24]
 8006006:	3301      	adds	r3, #1
 8006008:	61bb      	str	r3, [r7, #24]
 800600a:	69ba      	ldr	r2, [r7, #24]
 800600c:	693b      	ldr	r3, [r7, #16]
 800600e:	429a      	cmp	r2, r3
 8006010:	d3e2      	bcc.n	8005fd8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006012:	2300      	movs	r3, #0
}
 8006014:	4618      	mov	r0, r3
 8006016:	3724      	adds	r7, #36	; 0x24
 8006018:	46bd      	mov	sp, r7
 800601a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601e:	4770      	bx	lr

08006020 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006020:	b480      	push	{r7}
 8006022:	b08b      	sub	sp, #44	; 0x2c
 8006024:	af00      	add	r7, sp, #0
 8006026:	60f8      	str	r0, [r7, #12]
 8006028:	60b9      	str	r1, [r7, #8]
 800602a:	4613      	mov	r3, r2
 800602c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006032:	68bb      	ldr	r3, [r7, #8]
 8006034:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006036:	88fb      	ldrh	r3, [r7, #6]
 8006038:	089b      	lsrs	r3, r3, #2
 800603a:	b29b      	uxth	r3, r3
 800603c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800603e:	88fb      	ldrh	r3, [r7, #6]
 8006040:	f003 0303 	and.w	r3, r3, #3
 8006044:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006046:	2300      	movs	r3, #0
 8006048:	623b      	str	r3, [r7, #32]
 800604a:	e014      	b.n	8006076 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800604c:	69bb      	ldr	r3, [r7, #24]
 800604e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006052:	681a      	ldr	r2, [r3, #0]
 8006054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006056:	601a      	str	r2, [r3, #0]
    pDest++;
 8006058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800605a:	3301      	adds	r3, #1
 800605c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800605e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006060:	3301      	adds	r3, #1
 8006062:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006066:	3301      	adds	r3, #1
 8006068:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800606a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800606c:	3301      	adds	r3, #1
 800606e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8006070:	6a3b      	ldr	r3, [r7, #32]
 8006072:	3301      	adds	r3, #1
 8006074:	623b      	str	r3, [r7, #32]
 8006076:	6a3a      	ldr	r2, [r7, #32]
 8006078:	697b      	ldr	r3, [r7, #20]
 800607a:	429a      	cmp	r2, r3
 800607c:	d3e6      	bcc.n	800604c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800607e:	8bfb      	ldrh	r3, [r7, #30]
 8006080:	2b00      	cmp	r3, #0
 8006082:	d01e      	beq.n	80060c2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006084:	2300      	movs	r3, #0
 8006086:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006088:	69bb      	ldr	r3, [r7, #24]
 800608a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800608e:	461a      	mov	r2, r3
 8006090:	f107 0310 	add.w	r3, r7, #16
 8006094:	6812      	ldr	r2, [r2, #0]
 8006096:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006098:	693a      	ldr	r2, [r7, #16]
 800609a:	6a3b      	ldr	r3, [r7, #32]
 800609c:	b2db      	uxtb	r3, r3
 800609e:	00db      	lsls	r3, r3, #3
 80060a0:	fa22 f303 	lsr.w	r3, r2, r3
 80060a4:	b2da      	uxtb	r2, r3
 80060a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060a8:	701a      	strb	r2, [r3, #0]
      i++;
 80060aa:	6a3b      	ldr	r3, [r7, #32]
 80060ac:	3301      	adds	r3, #1
 80060ae:	623b      	str	r3, [r7, #32]
      pDest++;
 80060b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060b2:	3301      	adds	r3, #1
 80060b4:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80060b6:	8bfb      	ldrh	r3, [r7, #30]
 80060b8:	3b01      	subs	r3, #1
 80060ba:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80060bc:	8bfb      	ldrh	r3, [r7, #30]
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d1ea      	bne.n	8006098 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80060c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80060c4:	4618      	mov	r0, r3
 80060c6:	372c      	adds	r7, #44	; 0x2c
 80060c8:	46bd      	mov	sp, r7
 80060ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ce:	4770      	bx	lr

080060d0 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80060d0:	b480      	push	{r7}
 80060d2:	b085      	sub	sp, #20
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	6078      	str	r0, [r7, #4]
 80060d8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80060de:	683b      	ldr	r3, [r7, #0]
 80060e0:	781b      	ldrb	r3, [r3, #0]
 80060e2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80060e4:	683b      	ldr	r3, [r7, #0]
 80060e6:	785b      	ldrb	r3, [r3, #1]
 80060e8:	2b01      	cmp	r3, #1
 80060ea:	d12c      	bne.n	8006146 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80060ec:	68bb      	ldr	r3, [r7, #8]
 80060ee:	015a      	lsls	r2, r3, #5
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	4413      	add	r3, r2
 80060f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	db12      	blt.n	8006124 <USB_EPSetStall+0x54>
 80060fe:	68bb      	ldr	r3, [r7, #8]
 8006100:	2b00      	cmp	r3, #0
 8006102:	d00f      	beq.n	8006124 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006104:	68bb      	ldr	r3, [r7, #8]
 8006106:	015a      	lsls	r2, r3, #5
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	4413      	add	r3, r2
 800610c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	68ba      	ldr	r2, [r7, #8]
 8006114:	0151      	lsls	r1, r2, #5
 8006116:	68fa      	ldr	r2, [r7, #12]
 8006118:	440a      	add	r2, r1
 800611a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800611e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006122:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006124:	68bb      	ldr	r3, [r7, #8]
 8006126:	015a      	lsls	r2, r3, #5
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	4413      	add	r3, r2
 800612c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	68ba      	ldr	r2, [r7, #8]
 8006134:	0151      	lsls	r1, r2, #5
 8006136:	68fa      	ldr	r2, [r7, #12]
 8006138:	440a      	add	r2, r1
 800613a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800613e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006142:	6013      	str	r3, [r2, #0]
 8006144:	e02b      	b.n	800619e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006146:	68bb      	ldr	r3, [r7, #8]
 8006148:	015a      	lsls	r2, r3, #5
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	4413      	add	r3, r2
 800614e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	2b00      	cmp	r3, #0
 8006156:	db12      	blt.n	800617e <USB_EPSetStall+0xae>
 8006158:	68bb      	ldr	r3, [r7, #8]
 800615a:	2b00      	cmp	r3, #0
 800615c:	d00f      	beq.n	800617e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800615e:	68bb      	ldr	r3, [r7, #8]
 8006160:	015a      	lsls	r2, r3, #5
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	4413      	add	r3, r2
 8006166:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	68ba      	ldr	r2, [r7, #8]
 800616e:	0151      	lsls	r1, r2, #5
 8006170:	68fa      	ldr	r2, [r7, #12]
 8006172:	440a      	add	r2, r1
 8006174:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006178:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800617c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800617e:	68bb      	ldr	r3, [r7, #8]
 8006180:	015a      	lsls	r2, r3, #5
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	4413      	add	r3, r2
 8006186:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	68ba      	ldr	r2, [r7, #8]
 800618e:	0151      	lsls	r1, r2, #5
 8006190:	68fa      	ldr	r2, [r7, #12]
 8006192:	440a      	add	r2, r1
 8006194:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006198:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800619c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800619e:	2300      	movs	r3, #0
}
 80061a0:	4618      	mov	r0, r3
 80061a2:	3714      	adds	r7, #20
 80061a4:	46bd      	mov	sp, r7
 80061a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061aa:	4770      	bx	lr

080061ac <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80061ac:	b480      	push	{r7}
 80061ae:	b085      	sub	sp, #20
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	6078      	str	r0, [r7, #4]
 80061b4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80061ba:	683b      	ldr	r3, [r7, #0]
 80061bc:	781b      	ldrb	r3, [r3, #0]
 80061be:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80061c0:	683b      	ldr	r3, [r7, #0]
 80061c2:	785b      	ldrb	r3, [r3, #1]
 80061c4:	2b01      	cmp	r3, #1
 80061c6:	d128      	bne.n	800621a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80061c8:	68bb      	ldr	r3, [r7, #8]
 80061ca:	015a      	lsls	r2, r3, #5
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	4413      	add	r3, r2
 80061d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	68ba      	ldr	r2, [r7, #8]
 80061d8:	0151      	lsls	r1, r2, #5
 80061da:	68fa      	ldr	r2, [r7, #12]
 80061dc:	440a      	add	r2, r1
 80061de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80061e2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80061e6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80061e8:	683b      	ldr	r3, [r7, #0]
 80061ea:	791b      	ldrb	r3, [r3, #4]
 80061ec:	2b03      	cmp	r3, #3
 80061ee:	d003      	beq.n	80061f8 <USB_EPClearStall+0x4c>
 80061f0:	683b      	ldr	r3, [r7, #0]
 80061f2:	791b      	ldrb	r3, [r3, #4]
 80061f4:	2b02      	cmp	r3, #2
 80061f6:	d138      	bne.n	800626a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80061f8:	68bb      	ldr	r3, [r7, #8]
 80061fa:	015a      	lsls	r2, r3, #5
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	4413      	add	r3, r2
 8006200:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	68ba      	ldr	r2, [r7, #8]
 8006208:	0151      	lsls	r1, r2, #5
 800620a:	68fa      	ldr	r2, [r7, #12]
 800620c:	440a      	add	r2, r1
 800620e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006212:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006216:	6013      	str	r3, [r2, #0]
 8006218:	e027      	b.n	800626a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800621a:	68bb      	ldr	r3, [r7, #8]
 800621c:	015a      	lsls	r2, r3, #5
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	4413      	add	r3, r2
 8006222:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	68ba      	ldr	r2, [r7, #8]
 800622a:	0151      	lsls	r1, r2, #5
 800622c:	68fa      	ldr	r2, [r7, #12]
 800622e:	440a      	add	r2, r1
 8006230:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006234:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006238:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800623a:	683b      	ldr	r3, [r7, #0]
 800623c:	791b      	ldrb	r3, [r3, #4]
 800623e:	2b03      	cmp	r3, #3
 8006240:	d003      	beq.n	800624a <USB_EPClearStall+0x9e>
 8006242:	683b      	ldr	r3, [r7, #0]
 8006244:	791b      	ldrb	r3, [r3, #4]
 8006246:	2b02      	cmp	r3, #2
 8006248:	d10f      	bne.n	800626a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800624a:	68bb      	ldr	r3, [r7, #8]
 800624c:	015a      	lsls	r2, r3, #5
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	4413      	add	r3, r2
 8006252:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	68ba      	ldr	r2, [r7, #8]
 800625a:	0151      	lsls	r1, r2, #5
 800625c:	68fa      	ldr	r2, [r7, #12]
 800625e:	440a      	add	r2, r1
 8006260:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006264:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006268:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800626a:	2300      	movs	r3, #0
}
 800626c:	4618      	mov	r0, r3
 800626e:	3714      	adds	r7, #20
 8006270:	46bd      	mov	sp, r7
 8006272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006276:	4770      	bx	lr

08006278 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8006278:	b480      	push	{r7}
 800627a:	b085      	sub	sp, #20
 800627c:	af00      	add	r7, sp, #0
 800627e:	6078      	str	r0, [r7, #4]
 8006280:	460b      	mov	r3, r1
 8006282:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	68fa      	ldr	r2, [r7, #12]
 8006292:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006296:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800629a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062a2:	681a      	ldr	r2, [r3, #0]
 80062a4:	78fb      	ldrb	r3, [r7, #3]
 80062a6:	011b      	lsls	r3, r3, #4
 80062a8:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80062ac:	68f9      	ldr	r1, [r7, #12]
 80062ae:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80062b2:	4313      	orrs	r3, r2
 80062b4:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80062b6:	2300      	movs	r3, #0
}
 80062b8:	4618      	mov	r0, r3
 80062ba:	3714      	adds	r7, #20
 80062bc:	46bd      	mov	sp, r7
 80062be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c2:	4770      	bx	lr

080062c4 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80062c4:	b480      	push	{r7}
 80062c6:	b085      	sub	sp, #20
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	68fa      	ldr	r2, [r7, #12]
 80062da:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80062de:	f023 0303 	bic.w	r3, r3, #3
 80062e2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062ea:	685b      	ldr	r3, [r3, #4]
 80062ec:	68fa      	ldr	r2, [r7, #12]
 80062ee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80062f2:	f023 0302 	bic.w	r3, r3, #2
 80062f6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80062f8:	2300      	movs	r3, #0
}
 80062fa:	4618      	mov	r0, r3
 80062fc:	3714      	adds	r7, #20
 80062fe:	46bd      	mov	sp, r7
 8006300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006304:	4770      	bx	lr

08006306 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006306:	b480      	push	{r7}
 8006308:	b085      	sub	sp, #20
 800630a:	af00      	add	r7, sp, #0
 800630c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	68fa      	ldr	r2, [r7, #12]
 800631c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006320:	f023 0303 	bic.w	r3, r3, #3
 8006324:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800632c:	685b      	ldr	r3, [r3, #4]
 800632e:	68fa      	ldr	r2, [r7, #12]
 8006330:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006334:	f043 0302 	orr.w	r3, r3, #2
 8006338:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800633a:	2300      	movs	r3, #0
}
 800633c:	4618      	mov	r0, r3
 800633e:	3714      	adds	r7, #20
 8006340:	46bd      	mov	sp, r7
 8006342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006346:	4770      	bx	lr

08006348 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006348:	b480      	push	{r7}
 800634a:	b085      	sub	sp, #20
 800634c:	af00      	add	r7, sp, #0
 800634e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	695b      	ldr	r3, [r3, #20]
 8006354:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	699b      	ldr	r3, [r3, #24]
 800635a:	68fa      	ldr	r2, [r7, #12]
 800635c:	4013      	ands	r3, r2
 800635e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006360:	68fb      	ldr	r3, [r7, #12]
}
 8006362:	4618      	mov	r0, r3
 8006364:	3714      	adds	r7, #20
 8006366:	46bd      	mov	sp, r7
 8006368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800636c:	4770      	bx	lr

0800636e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800636e:	b480      	push	{r7}
 8006370:	b085      	sub	sp, #20
 8006372:	af00      	add	r7, sp, #0
 8006374:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006380:	699b      	ldr	r3, [r3, #24]
 8006382:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800638a:	69db      	ldr	r3, [r3, #28]
 800638c:	68ba      	ldr	r2, [r7, #8]
 800638e:	4013      	ands	r3, r2
 8006390:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8006392:	68bb      	ldr	r3, [r7, #8]
 8006394:	0c1b      	lsrs	r3, r3, #16
}
 8006396:	4618      	mov	r0, r3
 8006398:	3714      	adds	r7, #20
 800639a:	46bd      	mov	sp, r7
 800639c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a0:	4770      	bx	lr

080063a2 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80063a2:	b480      	push	{r7}
 80063a4:	b085      	sub	sp, #20
 80063a6:	af00      	add	r7, sp, #0
 80063a8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063b4:	699b      	ldr	r3, [r3, #24]
 80063b6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063be:	69db      	ldr	r3, [r3, #28]
 80063c0:	68ba      	ldr	r2, [r7, #8]
 80063c2:	4013      	ands	r3, r2
 80063c4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80063c6:	68bb      	ldr	r3, [r7, #8]
 80063c8:	b29b      	uxth	r3, r3
}
 80063ca:	4618      	mov	r0, r3
 80063cc:	3714      	adds	r7, #20
 80063ce:	46bd      	mov	sp, r7
 80063d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d4:	4770      	bx	lr

080063d6 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80063d6:	b480      	push	{r7}
 80063d8:	b085      	sub	sp, #20
 80063da:	af00      	add	r7, sp, #0
 80063dc:	6078      	str	r0, [r7, #4]
 80063de:	460b      	mov	r3, r1
 80063e0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80063e6:	78fb      	ldrb	r3, [r7, #3]
 80063e8:	015a      	lsls	r2, r3, #5
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	4413      	add	r3, r2
 80063ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063f2:	689b      	ldr	r3, [r3, #8]
 80063f4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063fc:	695b      	ldr	r3, [r3, #20]
 80063fe:	68ba      	ldr	r2, [r7, #8]
 8006400:	4013      	ands	r3, r2
 8006402:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006404:	68bb      	ldr	r3, [r7, #8]
}
 8006406:	4618      	mov	r0, r3
 8006408:	3714      	adds	r7, #20
 800640a:	46bd      	mov	sp, r7
 800640c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006410:	4770      	bx	lr

08006412 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006412:	b480      	push	{r7}
 8006414:	b087      	sub	sp, #28
 8006416:	af00      	add	r7, sp, #0
 8006418:	6078      	str	r0, [r7, #4]
 800641a:	460b      	mov	r3, r1
 800641c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006422:	697b      	ldr	r3, [r7, #20]
 8006424:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006428:	691b      	ldr	r3, [r3, #16]
 800642a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800642c:	697b      	ldr	r3, [r7, #20]
 800642e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006432:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006434:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006436:	78fb      	ldrb	r3, [r7, #3]
 8006438:	f003 030f 	and.w	r3, r3, #15
 800643c:	68fa      	ldr	r2, [r7, #12]
 800643e:	fa22 f303 	lsr.w	r3, r2, r3
 8006442:	01db      	lsls	r3, r3, #7
 8006444:	b2db      	uxtb	r3, r3
 8006446:	693a      	ldr	r2, [r7, #16]
 8006448:	4313      	orrs	r3, r2
 800644a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800644c:	78fb      	ldrb	r3, [r7, #3]
 800644e:	015a      	lsls	r2, r3, #5
 8006450:	697b      	ldr	r3, [r7, #20]
 8006452:	4413      	add	r3, r2
 8006454:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006458:	689b      	ldr	r3, [r3, #8]
 800645a:	693a      	ldr	r2, [r7, #16]
 800645c:	4013      	ands	r3, r2
 800645e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006460:	68bb      	ldr	r3, [r7, #8]
}
 8006462:	4618      	mov	r0, r3
 8006464:	371c      	adds	r7, #28
 8006466:	46bd      	mov	sp, r7
 8006468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646c:	4770      	bx	lr

0800646e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800646e:	b480      	push	{r7}
 8006470:	b083      	sub	sp, #12
 8006472:	af00      	add	r7, sp, #0
 8006474:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	695b      	ldr	r3, [r3, #20]
 800647a:	f003 0301 	and.w	r3, r3, #1
}
 800647e:	4618      	mov	r0, r3
 8006480:	370c      	adds	r7, #12
 8006482:	46bd      	mov	sp, r7
 8006484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006488:	4770      	bx	lr

0800648a <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800648a:	b480      	push	{r7}
 800648c:	b085      	sub	sp, #20
 800648e:	af00      	add	r7, sp, #0
 8006490:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	68fa      	ldr	r2, [r7, #12]
 80064a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80064a4:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80064a8:	f023 0307 	bic.w	r3, r3, #7
 80064ac:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064b4:	685b      	ldr	r3, [r3, #4]
 80064b6:	68fa      	ldr	r2, [r7, #12]
 80064b8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80064bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80064c0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80064c2:	2300      	movs	r3, #0
}
 80064c4:	4618      	mov	r0, r3
 80064c6:	3714      	adds	r7, #20
 80064c8:	46bd      	mov	sp, r7
 80064ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ce:	4770      	bx	lr

080064d0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80064d0:	b480      	push	{r7}
 80064d2:	b087      	sub	sp, #28
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	60f8      	str	r0, [r7, #12]
 80064d8:	460b      	mov	r3, r1
 80064da:	607a      	str	r2, [r7, #4]
 80064dc:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	333c      	adds	r3, #60	; 0x3c
 80064e6:	3304      	adds	r3, #4
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80064ec:	693b      	ldr	r3, [r7, #16]
 80064ee:	4a26      	ldr	r2, [pc, #152]	; (8006588 <USB_EP0_OutStart+0xb8>)
 80064f0:	4293      	cmp	r3, r2
 80064f2:	d90a      	bls.n	800650a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80064f4:	697b      	ldr	r3, [r7, #20]
 80064f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006500:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006504:	d101      	bne.n	800650a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8006506:	2300      	movs	r3, #0
 8006508:	e037      	b.n	800657a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800650a:	697b      	ldr	r3, [r7, #20]
 800650c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006510:	461a      	mov	r2, r3
 8006512:	2300      	movs	r3, #0
 8006514:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006516:	697b      	ldr	r3, [r7, #20]
 8006518:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800651c:	691b      	ldr	r3, [r3, #16]
 800651e:	697a      	ldr	r2, [r7, #20]
 8006520:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006524:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006528:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800652a:	697b      	ldr	r3, [r7, #20]
 800652c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006530:	691b      	ldr	r3, [r3, #16]
 8006532:	697a      	ldr	r2, [r7, #20]
 8006534:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006538:	f043 0318 	orr.w	r3, r3, #24
 800653c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800653e:	697b      	ldr	r3, [r7, #20]
 8006540:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006544:	691b      	ldr	r3, [r3, #16]
 8006546:	697a      	ldr	r2, [r7, #20]
 8006548:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800654c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8006550:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8006552:	7afb      	ldrb	r3, [r7, #11]
 8006554:	2b01      	cmp	r3, #1
 8006556:	d10f      	bne.n	8006578 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006558:	697b      	ldr	r3, [r7, #20]
 800655a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800655e:	461a      	mov	r2, r3
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006564:	697b      	ldr	r3, [r7, #20]
 8006566:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	697a      	ldr	r2, [r7, #20]
 800656e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006572:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8006576:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006578:	2300      	movs	r3, #0
}
 800657a:	4618      	mov	r0, r3
 800657c:	371c      	adds	r7, #28
 800657e:	46bd      	mov	sp, r7
 8006580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006584:	4770      	bx	lr
 8006586:	bf00      	nop
 8006588:	4f54300a 	.word	0x4f54300a

0800658c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800658c:	b480      	push	{r7}
 800658e:	b085      	sub	sp, #20
 8006590:	af00      	add	r7, sp, #0
 8006592:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006594:	2300      	movs	r3, #0
 8006596:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	3301      	adds	r3, #1
 800659c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	4a13      	ldr	r2, [pc, #76]	; (80065f0 <USB_CoreReset+0x64>)
 80065a2:	4293      	cmp	r3, r2
 80065a4:	d901      	bls.n	80065aa <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80065a6:	2303      	movs	r3, #3
 80065a8:	e01b      	b.n	80065e2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	691b      	ldr	r3, [r3, #16]
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	daf2      	bge.n	8006598 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80065b2:	2300      	movs	r3, #0
 80065b4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	691b      	ldr	r3, [r3, #16]
 80065ba:	f043 0201 	orr.w	r2, r3, #1
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	3301      	adds	r3, #1
 80065c6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	4a09      	ldr	r2, [pc, #36]	; (80065f0 <USB_CoreReset+0x64>)
 80065cc:	4293      	cmp	r3, r2
 80065ce:	d901      	bls.n	80065d4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80065d0:	2303      	movs	r3, #3
 80065d2:	e006      	b.n	80065e2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	691b      	ldr	r3, [r3, #16]
 80065d8:	f003 0301 	and.w	r3, r3, #1
 80065dc:	2b01      	cmp	r3, #1
 80065de:	d0f0      	beq.n	80065c2 <USB_CoreReset+0x36>

  return HAL_OK;
 80065e0:	2300      	movs	r3, #0
}
 80065e2:	4618      	mov	r0, r3
 80065e4:	3714      	adds	r7, #20
 80065e6:	46bd      	mov	sp, r7
 80065e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ec:	4770      	bx	lr
 80065ee:	bf00      	nop
 80065f0:	00030d40 	.word	0x00030d40

080065f4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80065f4:	b580      	push	{r7, lr}
 80065f6:	b084      	sub	sp, #16
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	6078      	str	r0, [r7, #4]
 80065fc:	460b      	mov	r3, r1
 80065fe:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006600:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006604:	f002 fc94 	bl	8008f30 <USBD_static_malloc>
 8006608:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	2b00      	cmp	r3, #0
 800660e:	d109      	bne.n	8006624 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	32b0      	adds	r2, #176	; 0xb0
 800661a:	2100      	movs	r1, #0
 800661c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8006620:	2302      	movs	r3, #2
 8006622:	e0d4      	b.n	80067ce <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8006624:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8006628:	2100      	movs	r1, #0
 800662a:	68f8      	ldr	r0, [r7, #12]
 800662c:	f002 fcee 	bl	800900c <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	32b0      	adds	r2, #176	; 0xb0
 800663a:	68f9      	ldr	r1, [r7, #12]
 800663c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	32b0      	adds	r2, #176	; 0xb0
 800664a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	7c1b      	ldrb	r3, [r3, #16]
 8006658:	2b00      	cmp	r3, #0
 800665a:	d138      	bne.n	80066ce <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800665c:	4b5e      	ldr	r3, [pc, #376]	; (80067d8 <USBD_CDC_Init+0x1e4>)
 800665e:	7819      	ldrb	r1, [r3, #0]
 8006660:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006664:	2202      	movs	r2, #2
 8006666:	6878      	ldr	r0, [r7, #4]
 8006668:	f002 fb3f 	bl	8008cea <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800666c:	4b5a      	ldr	r3, [pc, #360]	; (80067d8 <USBD_CDC_Init+0x1e4>)
 800666e:	781b      	ldrb	r3, [r3, #0]
 8006670:	f003 020f 	and.w	r2, r3, #15
 8006674:	6879      	ldr	r1, [r7, #4]
 8006676:	4613      	mov	r3, r2
 8006678:	009b      	lsls	r3, r3, #2
 800667a:	4413      	add	r3, r2
 800667c:	009b      	lsls	r3, r3, #2
 800667e:	440b      	add	r3, r1
 8006680:	3324      	adds	r3, #36	; 0x24
 8006682:	2201      	movs	r2, #1
 8006684:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006686:	4b55      	ldr	r3, [pc, #340]	; (80067dc <USBD_CDC_Init+0x1e8>)
 8006688:	7819      	ldrb	r1, [r3, #0]
 800668a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800668e:	2202      	movs	r2, #2
 8006690:	6878      	ldr	r0, [r7, #4]
 8006692:	f002 fb2a 	bl	8008cea <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006696:	4b51      	ldr	r3, [pc, #324]	; (80067dc <USBD_CDC_Init+0x1e8>)
 8006698:	781b      	ldrb	r3, [r3, #0]
 800669a:	f003 020f 	and.w	r2, r3, #15
 800669e:	6879      	ldr	r1, [r7, #4]
 80066a0:	4613      	mov	r3, r2
 80066a2:	009b      	lsls	r3, r3, #2
 80066a4:	4413      	add	r3, r2
 80066a6:	009b      	lsls	r3, r3, #2
 80066a8:	440b      	add	r3, r1
 80066aa:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80066ae:	2201      	movs	r2, #1
 80066b0:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80066b2:	4b4b      	ldr	r3, [pc, #300]	; (80067e0 <USBD_CDC_Init+0x1ec>)
 80066b4:	781b      	ldrb	r3, [r3, #0]
 80066b6:	f003 020f 	and.w	r2, r3, #15
 80066ba:	6879      	ldr	r1, [r7, #4]
 80066bc:	4613      	mov	r3, r2
 80066be:	009b      	lsls	r3, r3, #2
 80066c0:	4413      	add	r3, r2
 80066c2:	009b      	lsls	r3, r3, #2
 80066c4:	440b      	add	r3, r1
 80066c6:	3326      	adds	r3, #38	; 0x26
 80066c8:	2210      	movs	r2, #16
 80066ca:	801a      	strh	r2, [r3, #0]
 80066cc:	e035      	b.n	800673a <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80066ce:	4b42      	ldr	r3, [pc, #264]	; (80067d8 <USBD_CDC_Init+0x1e4>)
 80066d0:	7819      	ldrb	r1, [r3, #0]
 80066d2:	2340      	movs	r3, #64	; 0x40
 80066d4:	2202      	movs	r2, #2
 80066d6:	6878      	ldr	r0, [r7, #4]
 80066d8:	f002 fb07 	bl	8008cea <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80066dc:	4b3e      	ldr	r3, [pc, #248]	; (80067d8 <USBD_CDC_Init+0x1e4>)
 80066de:	781b      	ldrb	r3, [r3, #0]
 80066e0:	f003 020f 	and.w	r2, r3, #15
 80066e4:	6879      	ldr	r1, [r7, #4]
 80066e6:	4613      	mov	r3, r2
 80066e8:	009b      	lsls	r3, r3, #2
 80066ea:	4413      	add	r3, r2
 80066ec:	009b      	lsls	r3, r3, #2
 80066ee:	440b      	add	r3, r1
 80066f0:	3324      	adds	r3, #36	; 0x24
 80066f2:	2201      	movs	r2, #1
 80066f4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80066f6:	4b39      	ldr	r3, [pc, #228]	; (80067dc <USBD_CDC_Init+0x1e8>)
 80066f8:	7819      	ldrb	r1, [r3, #0]
 80066fa:	2340      	movs	r3, #64	; 0x40
 80066fc:	2202      	movs	r2, #2
 80066fe:	6878      	ldr	r0, [r7, #4]
 8006700:	f002 faf3 	bl	8008cea <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006704:	4b35      	ldr	r3, [pc, #212]	; (80067dc <USBD_CDC_Init+0x1e8>)
 8006706:	781b      	ldrb	r3, [r3, #0]
 8006708:	f003 020f 	and.w	r2, r3, #15
 800670c:	6879      	ldr	r1, [r7, #4]
 800670e:	4613      	mov	r3, r2
 8006710:	009b      	lsls	r3, r3, #2
 8006712:	4413      	add	r3, r2
 8006714:	009b      	lsls	r3, r3, #2
 8006716:	440b      	add	r3, r1
 8006718:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800671c:	2201      	movs	r2, #1
 800671e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8006720:	4b2f      	ldr	r3, [pc, #188]	; (80067e0 <USBD_CDC_Init+0x1ec>)
 8006722:	781b      	ldrb	r3, [r3, #0]
 8006724:	f003 020f 	and.w	r2, r3, #15
 8006728:	6879      	ldr	r1, [r7, #4]
 800672a:	4613      	mov	r3, r2
 800672c:	009b      	lsls	r3, r3, #2
 800672e:	4413      	add	r3, r2
 8006730:	009b      	lsls	r3, r3, #2
 8006732:	440b      	add	r3, r1
 8006734:	3326      	adds	r3, #38	; 0x26
 8006736:	2210      	movs	r2, #16
 8006738:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800673a:	4b29      	ldr	r3, [pc, #164]	; (80067e0 <USBD_CDC_Init+0x1ec>)
 800673c:	7819      	ldrb	r1, [r3, #0]
 800673e:	2308      	movs	r3, #8
 8006740:	2203      	movs	r2, #3
 8006742:	6878      	ldr	r0, [r7, #4]
 8006744:	f002 fad1 	bl	8008cea <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8006748:	4b25      	ldr	r3, [pc, #148]	; (80067e0 <USBD_CDC_Init+0x1ec>)
 800674a:	781b      	ldrb	r3, [r3, #0]
 800674c:	f003 020f 	and.w	r2, r3, #15
 8006750:	6879      	ldr	r1, [r7, #4]
 8006752:	4613      	mov	r3, r2
 8006754:	009b      	lsls	r3, r3, #2
 8006756:	4413      	add	r3, r2
 8006758:	009b      	lsls	r3, r3, #2
 800675a:	440b      	add	r3, r1
 800675c:	3324      	adds	r3, #36	; 0x24
 800675e:	2201      	movs	r2, #1
 8006760:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	2200      	movs	r2, #0
 8006766:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006770:	687a      	ldr	r2, [r7, #4]
 8006772:	33b0      	adds	r3, #176	; 0xb0
 8006774:	009b      	lsls	r3, r3, #2
 8006776:	4413      	add	r3, r2
 8006778:	685b      	ldr	r3, [r3, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	2200      	movs	r2, #0
 8006782:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	2200      	movs	r2, #0
 800678a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8006794:	2b00      	cmp	r3, #0
 8006796:	d101      	bne.n	800679c <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8006798:	2302      	movs	r3, #2
 800679a:	e018      	b.n	80067ce <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	7c1b      	ldrb	r3, [r3, #16]
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d10a      	bne.n	80067ba <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80067a4:	4b0d      	ldr	r3, [pc, #52]	; (80067dc <USBD_CDC_Init+0x1e8>)
 80067a6:	7819      	ldrb	r1, [r3, #0]
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80067ae:	f44f 7300 	mov.w	r3, #512	; 0x200
 80067b2:	6878      	ldr	r0, [r7, #4]
 80067b4:	f002 fb88 	bl	8008ec8 <USBD_LL_PrepareReceive>
 80067b8:	e008      	b.n	80067cc <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80067ba:	4b08      	ldr	r3, [pc, #32]	; (80067dc <USBD_CDC_Init+0x1e8>)
 80067bc:	7819      	ldrb	r1, [r3, #0]
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80067c4:	2340      	movs	r3, #64	; 0x40
 80067c6:	6878      	ldr	r0, [r7, #4]
 80067c8:	f002 fb7e 	bl	8008ec8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80067cc:	2300      	movs	r3, #0
}
 80067ce:	4618      	mov	r0, r3
 80067d0:	3710      	adds	r7, #16
 80067d2:	46bd      	mov	sp, r7
 80067d4:	bd80      	pop	{r7, pc}
 80067d6:	bf00      	nop
 80067d8:	20000693 	.word	0x20000693
 80067dc:	20000694 	.word	0x20000694
 80067e0:	20000695 	.word	0x20000695

080067e4 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80067e4:	b580      	push	{r7, lr}
 80067e6:	b082      	sub	sp, #8
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	6078      	str	r0, [r7, #4]
 80067ec:	460b      	mov	r3, r1
 80067ee:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80067f0:	4b3a      	ldr	r3, [pc, #232]	; (80068dc <USBD_CDC_DeInit+0xf8>)
 80067f2:	781b      	ldrb	r3, [r3, #0]
 80067f4:	4619      	mov	r1, r3
 80067f6:	6878      	ldr	r0, [r7, #4]
 80067f8:	f002 fa9d 	bl	8008d36 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80067fc:	4b37      	ldr	r3, [pc, #220]	; (80068dc <USBD_CDC_DeInit+0xf8>)
 80067fe:	781b      	ldrb	r3, [r3, #0]
 8006800:	f003 020f 	and.w	r2, r3, #15
 8006804:	6879      	ldr	r1, [r7, #4]
 8006806:	4613      	mov	r3, r2
 8006808:	009b      	lsls	r3, r3, #2
 800680a:	4413      	add	r3, r2
 800680c:	009b      	lsls	r3, r3, #2
 800680e:	440b      	add	r3, r1
 8006810:	3324      	adds	r3, #36	; 0x24
 8006812:	2200      	movs	r2, #0
 8006814:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8006816:	4b32      	ldr	r3, [pc, #200]	; (80068e0 <USBD_CDC_DeInit+0xfc>)
 8006818:	781b      	ldrb	r3, [r3, #0]
 800681a:	4619      	mov	r1, r3
 800681c:	6878      	ldr	r0, [r7, #4]
 800681e:	f002 fa8a 	bl	8008d36 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8006822:	4b2f      	ldr	r3, [pc, #188]	; (80068e0 <USBD_CDC_DeInit+0xfc>)
 8006824:	781b      	ldrb	r3, [r3, #0]
 8006826:	f003 020f 	and.w	r2, r3, #15
 800682a:	6879      	ldr	r1, [r7, #4]
 800682c:	4613      	mov	r3, r2
 800682e:	009b      	lsls	r3, r3, #2
 8006830:	4413      	add	r3, r2
 8006832:	009b      	lsls	r3, r3, #2
 8006834:	440b      	add	r3, r1
 8006836:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800683a:	2200      	movs	r2, #0
 800683c:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800683e:	4b29      	ldr	r3, [pc, #164]	; (80068e4 <USBD_CDC_DeInit+0x100>)
 8006840:	781b      	ldrb	r3, [r3, #0]
 8006842:	4619      	mov	r1, r3
 8006844:	6878      	ldr	r0, [r7, #4]
 8006846:	f002 fa76 	bl	8008d36 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800684a:	4b26      	ldr	r3, [pc, #152]	; (80068e4 <USBD_CDC_DeInit+0x100>)
 800684c:	781b      	ldrb	r3, [r3, #0]
 800684e:	f003 020f 	and.w	r2, r3, #15
 8006852:	6879      	ldr	r1, [r7, #4]
 8006854:	4613      	mov	r3, r2
 8006856:	009b      	lsls	r3, r3, #2
 8006858:	4413      	add	r3, r2
 800685a:	009b      	lsls	r3, r3, #2
 800685c:	440b      	add	r3, r1
 800685e:	3324      	adds	r3, #36	; 0x24
 8006860:	2200      	movs	r2, #0
 8006862:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8006864:	4b1f      	ldr	r3, [pc, #124]	; (80068e4 <USBD_CDC_DeInit+0x100>)
 8006866:	781b      	ldrb	r3, [r3, #0]
 8006868:	f003 020f 	and.w	r2, r3, #15
 800686c:	6879      	ldr	r1, [r7, #4]
 800686e:	4613      	mov	r3, r2
 8006870:	009b      	lsls	r3, r3, #2
 8006872:	4413      	add	r3, r2
 8006874:	009b      	lsls	r3, r3, #2
 8006876:	440b      	add	r3, r1
 8006878:	3326      	adds	r3, #38	; 0x26
 800687a:	2200      	movs	r2, #0
 800687c:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	32b0      	adds	r2, #176	; 0xb0
 8006888:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800688c:	2b00      	cmp	r3, #0
 800688e:	d01f      	beq.n	80068d0 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006896:	687a      	ldr	r2, [r7, #4]
 8006898:	33b0      	adds	r3, #176	; 0xb0
 800689a:	009b      	lsls	r3, r3, #2
 800689c:	4413      	add	r3, r2
 800689e:	685b      	ldr	r3, [r3, #4]
 80068a0:	685b      	ldr	r3, [r3, #4]
 80068a2:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	32b0      	adds	r2, #176	; 0xb0
 80068ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068b2:	4618      	mov	r0, r3
 80068b4:	f002 fb4a 	bl	8008f4c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	32b0      	adds	r2, #176	; 0xb0
 80068c2:	2100      	movs	r1, #0
 80068c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	2200      	movs	r2, #0
 80068cc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80068d0:	2300      	movs	r3, #0
}
 80068d2:	4618      	mov	r0, r3
 80068d4:	3708      	adds	r7, #8
 80068d6:	46bd      	mov	sp, r7
 80068d8:	bd80      	pop	{r7, pc}
 80068da:	bf00      	nop
 80068dc:	20000693 	.word	0x20000693
 80068e0:	20000694 	.word	0x20000694
 80068e4:	20000695 	.word	0x20000695

080068e8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80068e8:	b580      	push	{r7, lr}
 80068ea:	b086      	sub	sp, #24
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	6078      	str	r0, [r7, #4]
 80068f0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	32b0      	adds	r2, #176	; 0xb0
 80068fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006900:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8006902:	2300      	movs	r3, #0
 8006904:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8006906:	2300      	movs	r3, #0
 8006908:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800690a:	2300      	movs	r3, #0
 800690c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800690e:	693b      	ldr	r3, [r7, #16]
 8006910:	2b00      	cmp	r3, #0
 8006912:	d101      	bne.n	8006918 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8006914:	2303      	movs	r3, #3
 8006916:	e0bf      	b.n	8006a98 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006918:	683b      	ldr	r3, [r7, #0]
 800691a:	781b      	ldrb	r3, [r3, #0]
 800691c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006920:	2b00      	cmp	r3, #0
 8006922:	d050      	beq.n	80069c6 <USBD_CDC_Setup+0xde>
 8006924:	2b20      	cmp	r3, #32
 8006926:	f040 80af 	bne.w	8006a88 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800692a:	683b      	ldr	r3, [r7, #0]
 800692c:	88db      	ldrh	r3, [r3, #6]
 800692e:	2b00      	cmp	r3, #0
 8006930:	d03a      	beq.n	80069a8 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8006932:	683b      	ldr	r3, [r7, #0]
 8006934:	781b      	ldrb	r3, [r3, #0]
 8006936:	b25b      	sxtb	r3, r3
 8006938:	2b00      	cmp	r3, #0
 800693a:	da1b      	bge.n	8006974 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006942:	687a      	ldr	r2, [r7, #4]
 8006944:	33b0      	adds	r3, #176	; 0xb0
 8006946:	009b      	lsls	r3, r3, #2
 8006948:	4413      	add	r3, r2
 800694a:	685b      	ldr	r3, [r3, #4]
 800694c:	689b      	ldr	r3, [r3, #8]
 800694e:	683a      	ldr	r2, [r7, #0]
 8006950:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8006952:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006954:	683a      	ldr	r2, [r7, #0]
 8006956:	88d2      	ldrh	r2, [r2, #6]
 8006958:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800695a:	683b      	ldr	r3, [r7, #0]
 800695c:	88db      	ldrh	r3, [r3, #6]
 800695e:	2b07      	cmp	r3, #7
 8006960:	bf28      	it	cs
 8006962:	2307      	movcs	r3, #7
 8006964:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8006966:	693b      	ldr	r3, [r7, #16]
 8006968:	89fa      	ldrh	r2, [r7, #14]
 800696a:	4619      	mov	r1, r3
 800696c:	6878      	ldr	r0, [r7, #4]
 800696e:	f001 fd89 	bl	8008484 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8006972:	e090      	b.n	8006a96 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8006974:	683b      	ldr	r3, [r7, #0]
 8006976:	785a      	ldrb	r2, [r3, #1]
 8006978:	693b      	ldr	r3, [r7, #16]
 800697a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800697e:	683b      	ldr	r3, [r7, #0]
 8006980:	88db      	ldrh	r3, [r3, #6]
 8006982:	2b3f      	cmp	r3, #63	; 0x3f
 8006984:	d803      	bhi.n	800698e <USBD_CDC_Setup+0xa6>
 8006986:	683b      	ldr	r3, [r7, #0]
 8006988:	88db      	ldrh	r3, [r3, #6]
 800698a:	b2da      	uxtb	r2, r3
 800698c:	e000      	b.n	8006990 <USBD_CDC_Setup+0xa8>
 800698e:	2240      	movs	r2, #64	; 0x40
 8006990:	693b      	ldr	r3, [r7, #16]
 8006992:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8006996:	6939      	ldr	r1, [r7, #16]
 8006998:	693b      	ldr	r3, [r7, #16]
 800699a:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800699e:	461a      	mov	r2, r3
 80069a0:	6878      	ldr	r0, [r7, #4]
 80069a2:	f001 fd9b 	bl	80084dc <USBD_CtlPrepareRx>
      break;
 80069a6:	e076      	b.n	8006a96 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80069ae:	687a      	ldr	r2, [r7, #4]
 80069b0:	33b0      	adds	r3, #176	; 0xb0
 80069b2:	009b      	lsls	r3, r3, #2
 80069b4:	4413      	add	r3, r2
 80069b6:	685b      	ldr	r3, [r3, #4]
 80069b8:	689b      	ldr	r3, [r3, #8]
 80069ba:	683a      	ldr	r2, [r7, #0]
 80069bc:	7850      	ldrb	r0, [r2, #1]
 80069be:	2200      	movs	r2, #0
 80069c0:	6839      	ldr	r1, [r7, #0]
 80069c2:	4798      	blx	r3
      break;
 80069c4:	e067      	b.n	8006a96 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80069c6:	683b      	ldr	r3, [r7, #0]
 80069c8:	785b      	ldrb	r3, [r3, #1]
 80069ca:	2b0b      	cmp	r3, #11
 80069cc:	d851      	bhi.n	8006a72 <USBD_CDC_Setup+0x18a>
 80069ce:	a201      	add	r2, pc, #4	; (adr r2, 80069d4 <USBD_CDC_Setup+0xec>)
 80069d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069d4:	08006a05 	.word	0x08006a05
 80069d8:	08006a81 	.word	0x08006a81
 80069dc:	08006a73 	.word	0x08006a73
 80069e0:	08006a73 	.word	0x08006a73
 80069e4:	08006a73 	.word	0x08006a73
 80069e8:	08006a73 	.word	0x08006a73
 80069ec:	08006a73 	.word	0x08006a73
 80069f0:	08006a73 	.word	0x08006a73
 80069f4:	08006a73 	.word	0x08006a73
 80069f8:	08006a73 	.word	0x08006a73
 80069fc:	08006a2f 	.word	0x08006a2f
 8006a00:	08006a59 	.word	0x08006a59
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a0a:	b2db      	uxtb	r3, r3
 8006a0c:	2b03      	cmp	r3, #3
 8006a0e:	d107      	bne.n	8006a20 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006a10:	f107 030a 	add.w	r3, r7, #10
 8006a14:	2202      	movs	r2, #2
 8006a16:	4619      	mov	r1, r3
 8006a18:	6878      	ldr	r0, [r7, #4]
 8006a1a:	f001 fd33 	bl	8008484 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006a1e:	e032      	b.n	8006a86 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006a20:	6839      	ldr	r1, [r7, #0]
 8006a22:	6878      	ldr	r0, [r7, #4]
 8006a24:	f001 fcbd 	bl	80083a2 <USBD_CtlError>
            ret = USBD_FAIL;
 8006a28:	2303      	movs	r3, #3
 8006a2a:	75fb      	strb	r3, [r7, #23]
          break;
 8006a2c:	e02b      	b.n	8006a86 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a34:	b2db      	uxtb	r3, r3
 8006a36:	2b03      	cmp	r3, #3
 8006a38:	d107      	bne.n	8006a4a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8006a3a:	f107 030d 	add.w	r3, r7, #13
 8006a3e:	2201      	movs	r2, #1
 8006a40:	4619      	mov	r1, r3
 8006a42:	6878      	ldr	r0, [r7, #4]
 8006a44:	f001 fd1e 	bl	8008484 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006a48:	e01d      	b.n	8006a86 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006a4a:	6839      	ldr	r1, [r7, #0]
 8006a4c:	6878      	ldr	r0, [r7, #4]
 8006a4e:	f001 fca8 	bl	80083a2 <USBD_CtlError>
            ret = USBD_FAIL;
 8006a52:	2303      	movs	r3, #3
 8006a54:	75fb      	strb	r3, [r7, #23]
          break;
 8006a56:	e016      	b.n	8006a86 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a5e:	b2db      	uxtb	r3, r3
 8006a60:	2b03      	cmp	r3, #3
 8006a62:	d00f      	beq.n	8006a84 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8006a64:	6839      	ldr	r1, [r7, #0]
 8006a66:	6878      	ldr	r0, [r7, #4]
 8006a68:	f001 fc9b 	bl	80083a2 <USBD_CtlError>
            ret = USBD_FAIL;
 8006a6c:	2303      	movs	r3, #3
 8006a6e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006a70:	e008      	b.n	8006a84 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8006a72:	6839      	ldr	r1, [r7, #0]
 8006a74:	6878      	ldr	r0, [r7, #4]
 8006a76:	f001 fc94 	bl	80083a2 <USBD_CtlError>
          ret = USBD_FAIL;
 8006a7a:	2303      	movs	r3, #3
 8006a7c:	75fb      	strb	r3, [r7, #23]
          break;
 8006a7e:	e002      	b.n	8006a86 <USBD_CDC_Setup+0x19e>
          break;
 8006a80:	bf00      	nop
 8006a82:	e008      	b.n	8006a96 <USBD_CDC_Setup+0x1ae>
          break;
 8006a84:	bf00      	nop
      }
      break;
 8006a86:	e006      	b.n	8006a96 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8006a88:	6839      	ldr	r1, [r7, #0]
 8006a8a:	6878      	ldr	r0, [r7, #4]
 8006a8c:	f001 fc89 	bl	80083a2 <USBD_CtlError>
      ret = USBD_FAIL;
 8006a90:	2303      	movs	r3, #3
 8006a92:	75fb      	strb	r3, [r7, #23]
      break;
 8006a94:	bf00      	nop
  }

  return (uint8_t)ret;
 8006a96:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a98:	4618      	mov	r0, r3
 8006a9a:	3718      	adds	r7, #24
 8006a9c:	46bd      	mov	sp, r7
 8006a9e:	bd80      	pop	{r7, pc}

08006aa0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006aa0:	b580      	push	{r7, lr}
 8006aa2:	b084      	sub	sp, #16
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	6078      	str	r0, [r7, #4]
 8006aa8:	460b      	mov	r3, r1
 8006aaa:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006ab2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	32b0      	adds	r2, #176	; 0xb0
 8006abe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d101      	bne.n	8006aca <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8006ac6:	2303      	movs	r3, #3
 8006ac8:	e065      	b.n	8006b96 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	32b0      	adds	r2, #176	; 0xb0
 8006ad4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ad8:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006ada:	78fb      	ldrb	r3, [r7, #3]
 8006adc:	f003 020f 	and.w	r2, r3, #15
 8006ae0:	6879      	ldr	r1, [r7, #4]
 8006ae2:	4613      	mov	r3, r2
 8006ae4:	009b      	lsls	r3, r3, #2
 8006ae6:	4413      	add	r3, r2
 8006ae8:	009b      	lsls	r3, r3, #2
 8006aea:	440b      	add	r3, r1
 8006aec:	3318      	adds	r3, #24
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d02f      	beq.n	8006b54 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8006af4:	78fb      	ldrb	r3, [r7, #3]
 8006af6:	f003 020f 	and.w	r2, r3, #15
 8006afa:	6879      	ldr	r1, [r7, #4]
 8006afc:	4613      	mov	r3, r2
 8006afe:	009b      	lsls	r3, r3, #2
 8006b00:	4413      	add	r3, r2
 8006b02:	009b      	lsls	r3, r3, #2
 8006b04:	440b      	add	r3, r1
 8006b06:	3318      	adds	r3, #24
 8006b08:	681a      	ldr	r2, [r3, #0]
 8006b0a:	78fb      	ldrb	r3, [r7, #3]
 8006b0c:	f003 010f 	and.w	r1, r3, #15
 8006b10:	68f8      	ldr	r0, [r7, #12]
 8006b12:	460b      	mov	r3, r1
 8006b14:	00db      	lsls	r3, r3, #3
 8006b16:	440b      	add	r3, r1
 8006b18:	009b      	lsls	r3, r3, #2
 8006b1a:	4403      	add	r3, r0
 8006b1c:	3348      	adds	r3, #72	; 0x48
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	fbb2 f1f3 	udiv	r1, r2, r3
 8006b24:	fb01 f303 	mul.w	r3, r1, r3
 8006b28:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d112      	bne.n	8006b54 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8006b2e:	78fb      	ldrb	r3, [r7, #3]
 8006b30:	f003 020f 	and.w	r2, r3, #15
 8006b34:	6879      	ldr	r1, [r7, #4]
 8006b36:	4613      	mov	r3, r2
 8006b38:	009b      	lsls	r3, r3, #2
 8006b3a:	4413      	add	r3, r2
 8006b3c:	009b      	lsls	r3, r3, #2
 8006b3e:	440b      	add	r3, r1
 8006b40:	3318      	adds	r3, #24
 8006b42:	2200      	movs	r2, #0
 8006b44:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006b46:	78f9      	ldrb	r1, [r7, #3]
 8006b48:	2300      	movs	r3, #0
 8006b4a:	2200      	movs	r2, #0
 8006b4c:	6878      	ldr	r0, [r7, #4]
 8006b4e:	f002 f99a 	bl	8008e86 <USBD_LL_Transmit>
 8006b52:	e01f      	b.n	8006b94 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8006b54:	68bb      	ldr	r3, [r7, #8]
 8006b56:	2200      	movs	r2, #0
 8006b58:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006b62:	687a      	ldr	r2, [r7, #4]
 8006b64:	33b0      	adds	r3, #176	; 0xb0
 8006b66:	009b      	lsls	r3, r3, #2
 8006b68:	4413      	add	r3, r2
 8006b6a:	685b      	ldr	r3, [r3, #4]
 8006b6c:	691b      	ldr	r3, [r3, #16]
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d010      	beq.n	8006b94 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006b78:	687a      	ldr	r2, [r7, #4]
 8006b7a:	33b0      	adds	r3, #176	; 0xb0
 8006b7c:	009b      	lsls	r3, r3, #2
 8006b7e:	4413      	add	r3, r2
 8006b80:	685b      	ldr	r3, [r3, #4]
 8006b82:	691b      	ldr	r3, [r3, #16]
 8006b84:	68ba      	ldr	r2, [r7, #8]
 8006b86:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8006b8a:	68ba      	ldr	r2, [r7, #8]
 8006b8c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8006b90:	78fa      	ldrb	r2, [r7, #3]
 8006b92:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8006b94:	2300      	movs	r3, #0
}
 8006b96:	4618      	mov	r0, r3
 8006b98:	3710      	adds	r7, #16
 8006b9a:	46bd      	mov	sp, r7
 8006b9c:	bd80      	pop	{r7, pc}

08006b9e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006b9e:	b580      	push	{r7, lr}
 8006ba0:	b084      	sub	sp, #16
 8006ba2:	af00      	add	r7, sp, #0
 8006ba4:	6078      	str	r0, [r7, #4]
 8006ba6:	460b      	mov	r3, r1
 8006ba8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	32b0      	adds	r2, #176	; 0xb0
 8006bb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006bb8:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	32b0      	adds	r2, #176	; 0xb0
 8006bc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d101      	bne.n	8006bd0 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8006bcc:	2303      	movs	r3, #3
 8006bce:	e01a      	b.n	8006c06 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006bd0:	78fb      	ldrb	r3, [r7, #3]
 8006bd2:	4619      	mov	r1, r3
 8006bd4:	6878      	ldr	r0, [r7, #4]
 8006bd6:	f002 f998 	bl	8008f0a <USBD_LL_GetRxDataSize>
 8006bda:	4602      	mov	r2, r0
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006be8:	687a      	ldr	r2, [r7, #4]
 8006bea:	33b0      	adds	r3, #176	; 0xb0
 8006bec:	009b      	lsls	r3, r3, #2
 8006bee:	4413      	add	r3, r2
 8006bf0:	685b      	ldr	r3, [r3, #4]
 8006bf2:	68db      	ldr	r3, [r3, #12]
 8006bf4:	68fa      	ldr	r2, [r7, #12]
 8006bf6:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006bfa:	68fa      	ldr	r2, [r7, #12]
 8006bfc:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006c00:	4611      	mov	r1, r2
 8006c02:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8006c04:	2300      	movs	r3, #0
}
 8006c06:	4618      	mov	r0, r3
 8006c08:	3710      	adds	r7, #16
 8006c0a:	46bd      	mov	sp, r7
 8006c0c:	bd80      	pop	{r7, pc}

08006c0e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006c0e:	b580      	push	{r7, lr}
 8006c10:	b084      	sub	sp, #16
 8006c12:	af00      	add	r7, sp, #0
 8006c14:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	32b0      	adds	r2, #176	; 0xb0
 8006c20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c24:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d101      	bne.n	8006c30 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006c2c:	2303      	movs	r3, #3
 8006c2e:	e025      	b.n	8006c7c <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006c36:	687a      	ldr	r2, [r7, #4]
 8006c38:	33b0      	adds	r3, #176	; 0xb0
 8006c3a:	009b      	lsls	r3, r3, #2
 8006c3c:	4413      	add	r3, r2
 8006c3e:	685b      	ldr	r3, [r3, #4]
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d01a      	beq.n	8006c7a <USBD_CDC_EP0_RxReady+0x6c>
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006c4a:	2bff      	cmp	r3, #255	; 0xff
 8006c4c:	d015      	beq.n	8006c7a <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006c54:	687a      	ldr	r2, [r7, #4]
 8006c56:	33b0      	adds	r3, #176	; 0xb0
 8006c58:	009b      	lsls	r3, r3, #2
 8006c5a:	4413      	add	r3, r2
 8006c5c:	685b      	ldr	r3, [r3, #4]
 8006c5e:	689b      	ldr	r3, [r3, #8]
 8006c60:	68fa      	ldr	r2, [r7, #12]
 8006c62:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8006c66:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8006c68:	68fa      	ldr	r2, [r7, #12]
 8006c6a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006c6e:	b292      	uxth	r2, r2
 8006c70:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	22ff      	movs	r2, #255	; 0xff
 8006c76:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8006c7a:	2300      	movs	r3, #0
}
 8006c7c:	4618      	mov	r0, r3
 8006c7e:	3710      	adds	r7, #16
 8006c80:	46bd      	mov	sp, r7
 8006c82:	bd80      	pop	{r7, pc}

08006c84 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006c84:	b580      	push	{r7, lr}
 8006c86:	b086      	sub	sp, #24
 8006c88:	af00      	add	r7, sp, #0
 8006c8a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006c8c:	2182      	movs	r1, #130	; 0x82
 8006c8e:	4818      	ldr	r0, [pc, #96]	; (8006cf0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006c90:	f000 fd4f 	bl	8007732 <USBD_GetEpDesc>
 8006c94:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006c96:	2101      	movs	r1, #1
 8006c98:	4815      	ldr	r0, [pc, #84]	; (8006cf0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006c9a:	f000 fd4a 	bl	8007732 <USBD_GetEpDesc>
 8006c9e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006ca0:	2181      	movs	r1, #129	; 0x81
 8006ca2:	4813      	ldr	r0, [pc, #76]	; (8006cf0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006ca4:	f000 fd45 	bl	8007732 <USBD_GetEpDesc>
 8006ca8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006caa:	697b      	ldr	r3, [r7, #20]
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d002      	beq.n	8006cb6 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006cb0:	697b      	ldr	r3, [r7, #20]
 8006cb2:	2210      	movs	r2, #16
 8006cb4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006cb6:	693b      	ldr	r3, [r7, #16]
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d006      	beq.n	8006cca <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006cbc:	693b      	ldr	r3, [r7, #16]
 8006cbe:	2200      	movs	r2, #0
 8006cc0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006cc4:	711a      	strb	r2, [r3, #4]
 8006cc6:	2200      	movs	r2, #0
 8006cc8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d006      	beq.n	8006cde <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	2200      	movs	r2, #0
 8006cd4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006cd8:	711a      	strb	r2, [r3, #4]
 8006cda:	2200      	movs	r2, #0
 8006cdc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	2243      	movs	r2, #67	; 0x43
 8006ce2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006ce4:	4b02      	ldr	r3, [pc, #8]	; (8006cf0 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8006ce6:	4618      	mov	r0, r3
 8006ce8:	3718      	adds	r7, #24
 8006cea:	46bd      	mov	sp, r7
 8006cec:	bd80      	pop	{r7, pc}
 8006cee:	bf00      	nop
 8006cf0:	20000650 	.word	0x20000650

08006cf4 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006cf4:	b580      	push	{r7, lr}
 8006cf6:	b086      	sub	sp, #24
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006cfc:	2182      	movs	r1, #130	; 0x82
 8006cfe:	4818      	ldr	r0, [pc, #96]	; (8006d60 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006d00:	f000 fd17 	bl	8007732 <USBD_GetEpDesc>
 8006d04:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006d06:	2101      	movs	r1, #1
 8006d08:	4815      	ldr	r0, [pc, #84]	; (8006d60 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006d0a:	f000 fd12 	bl	8007732 <USBD_GetEpDesc>
 8006d0e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006d10:	2181      	movs	r1, #129	; 0x81
 8006d12:	4813      	ldr	r0, [pc, #76]	; (8006d60 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006d14:	f000 fd0d 	bl	8007732 <USBD_GetEpDesc>
 8006d18:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006d1a:	697b      	ldr	r3, [r7, #20]
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d002      	beq.n	8006d26 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8006d20:	697b      	ldr	r3, [r7, #20]
 8006d22:	2210      	movs	r2, #16
 8006d24:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006d26:	693b      	ldr	r3, [r7, #16]
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d006      	beq.n	8006d3a <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006d2c:	693b      	ldr	r3, [r7, #16]
 8006d2e:	2200      	movs	r2, #0
 8006d30:	711a      	strb	r2, [r3, #4]
 8006d32:	2200      	movs	r2, #0
 8006d34:	f042 0202 	orr.w	r2, r2, #2
 8006d38:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d006      	beq.n	8006d4e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	2200      	movs	r2, #0
 8006d44:	711a      	strb	r2, [r3, #4]
 8006d46:	2200      	movs	r2, #0
 8006d48:	f042 0202 	orr.w	r2, r2, #2
 8006d4c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	2243      	movs	r2, #67	; 0x43
 8006d52:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006d54:	4b02      	ldr	r3, [pc, #8]	; (8006d60 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8006d56:	4618      	mov	r0, r3
 8006d58:	3718      	adds	r7, #24
 8006d5a:	46bd      	mov	sp, r7
 8006d5c:	bd80      	pop	{r7, pc}
 8006d5e:	bf00      	nop
 8006d60:	20000650 	.word	0x20000650

08006d64 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006d64:	b580      	push	{r7, lr}
 8006d66:	b086      	sub	sp, #24
 8006d68:	af00      	add	r7, sp, #0
 8006d6a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006d6c:	2182      	movs	r1, #130	; 0x82
 8006d6e:	4818      	ldr	r0, [pc, #96]	; (8006dd0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006d70:	f000 fcdf 	bl	8007732 <USBD_GetEpDesc>
 8006d74:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006d76:	2101      	movs	r1, #1
 8006d78:	4815      	ldr	r0, [pc, #84]	; (8006dd0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006d7a:	f000 fcda 	bl	8007732 <USBD_GetEpDesc>
 8006d7e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006d80:	2181      	movs	r1, #129	; 0x81
 8006d82:	4813      	ldr	r0, [pc, #76]	; (8006dd0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006d84:	f000 fcd5 	bl	8007732 <USBD_GetEpDesc>
 8006d88:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006d8a:	697b      	ldr	r3, [r7, #20]
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d002      	beq.n	8006d96 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006d90:	697b      	ldr	r3, [r7, #20]
 8006d92:	2210      	movs	r2, #16
 8006d94:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006d96:	693b      	ldr	r3, [r7, #16]
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d006      	beq.n	8006daa <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006d9c:	693b      	ldr	r3, [r7, #16]
 8006d9e:	2200      	movs	r2, #0
 8006da0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006da4:	711a      	strb	r2, [r3, #4]
 8006da6:	2200      	movs	r2, #0
 8006da8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d006      	beq.n	8006dbe <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	2200      	movs	r2, #0
 8006db4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006db8:	711a      	strb	r2, [r3, #4]
 8006dba:	2200      	movs	r2, #0
 8006dbc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	2243      	movs	r2, #67	; 0x43
 8006dc2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006dc4:	4b02      	ldr	r3, [pc, #8]	; (8006dd0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8006dc6:	4618      	mov	r0, r3
 8006dc8:	3718      	adds	r7, #24
 8006dca:	46bd      	mov	sp, r7
 8006dcc:	bd80      	pop	{r7, pc}
 8006dce:	bf00      	nop
 8006dd0:	20000650 	.word	0x20000650

08006dd4 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006dd4:	b480      	push	{r7}
 8006dd6:	b083      	sub	sp, #12
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	220a      	movs	r2, #10
 8006de0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8006de2:	4b03      	ldr	r3, [pc, #12]	; (8006df0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006de4:	4618      	mov	r0, r3
 8006de6:	370c      	adds	r7, #12
 8006de8:	46bd      	mov	sp, r7
 8006dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dee:	4770      	bx	lr
 8006df0:	2000060c 	.word	0x2000060c

08006df4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8006df4:	b480      	push	{r7}
 8006df6:	b083      	sub	sp, #12
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	6078      	str	r0, [r7, #4]
 8006dfc:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8006dfe:	683b      	ldr	r3, [r7, #0]
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d101      	bne.n	8006e08 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006e04:	2303      	movs	r3, #3
 8006e06:	e009      	b.n	8006e1c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006e0e:	687a      	ldr	r2, [r7, #4]
 8006e10:	33b0      	adds	r3, #176	; 0xb0
 8006e12:	009b      	lsls	r3, r3, #2
 8006e14:	4413      	add	r3, r2
 8006e16:	683a      	ldr	r2, [r7, #0]
 8006e18:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8006e1a:	2300      	movs	r3, #0
}
 8006e1c:	4618      	mov	r0, r3
 8006e1e:	370c      	adds	r7, #12
 8006e20:	46bd      	mov	sp, r7
 8006e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e26:	4770      	bx	lr

08006e28 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8006e28:	b480      	push	{r7}
 8006e2a:	b087      	sub	sp, #28
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	60f8      	str	r0, [r7, #12]
 8006e30:	60b9      	str	r1, [r7, #8]
 8006e32:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	32b0      	adds	r2, #176	; 0xb0
 8006e3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e42:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8006e44:	697b      	ldr	r3, [r7, #20]
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d101      	bne.n	8006e4e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8006e4a:	2303      	movs	r3, #3
 8006e4c:	e008      	b.n	8006e60 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8006e4e:	697b      	ldr	r3, [r7, #20]
 8006e50:	68ba      	ldr	r2, [r7, #8]
 8006e52:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8006e56:	697b      	ldr	r3, [r7, #20]
 8006e58:	687a      	ldr	r2, [r7, #4]
 8006e5a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8006e5e:	2300      	movs	r3, #0
}
 8006e60:	4618      	mov	r0, r3
 8006e62:	371c      	adds	r7, #28
 8006e64:	46bd      	mov	sp, r7
 8006e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e6a:	4770      	bx	lr

08006e6c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8006e6c:	b480      	push	{r7}
 8006e6e:	b085      	sub	sp, #20
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	6078      	str	r0, [r7, #4]
 8006e74:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	32b0      	adds	r2, #176	; 0xb0
 8006e80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e84:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d101      	bne.n	8006e90 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8006e8c:	2303      	movs	r3, #3
 8006e8e:	e004      	b.n	8006e9a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	683a      	ldr	r2, [r7, #0]
 8006e94:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8006e98:	2300      	movs	r3, #0
}
 8006e9a:	4618      	mov	r0, r3
 8006e9c:	3714      	adds	r7, #20
 8006e9e:	46bd      	mov	sp, r7
 8006ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea4:	4770      	bx	lr
	...

08006ea8 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8006ea8:	b580      	push	{r7, lr}
 8006eaa:	b084      	sub	sp, #16
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	32b0      	adds	r2, #176	; 0xb0
 8006eba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ebe:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8006ec0:	2301      	movs	r3, #1
 8006ec2:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	32b0      	adds	r2, #176	; 0xb0
 8006ece:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d101      	bne.n	8006eda <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8006ed6:	2303      	movs	r3, #3
 8006ed8:	e025      	b.n	8006f26 <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 8006eda:	68bb      	ldr	r3, [r7, #8]
 8006edc:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d11f      	bne.n	8006f24 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8006ee4:	68bb      	ldr	r3, [r7, #8]
 8006ee6:	2201      	movs	r2, #1
 8006ee8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8006eec:	4b10      	ldr	r3, [pc, #64]	; (8006f30 <USBD_CDC_TransmitPacket+0x88>)
 8006eee:	781b      	ldrb	r3, [r3, #0]
 8006ef0:	f003 020f 	and.w	r2, r3, #15
 8006ef4:	68bb      	ldr	r3, [r7, #8]
 8006ef6:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8006efa:	6878      	ldr	r0, [r7, #4]
 8006efc:	4613      	mov	r3, r2
 8006efe:	009b      	lsls	r3, r3, #2
 8006f00:	4413      	add	r3, r2
 8006f02:	009b      	lsls	r3, r3, #2
 8006f04:	4403      	add	r3, r0
 8006f06:	3318      	adds	r3, #24
 8006f08:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8006f0a:	4b09      	ldr	r3, [pc, #36]	; (8006f30 <USBD_CDC_TransmitPacket+0x88>)
 8006f0c:	7819      	ldrb	r1, [r3, #0]
 8006f0e:	68bb      	ldr	r3, [r7, #8]
 8006f10:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8006f14:	68bb      	ldr	r3, [r7, #8]
 8006f16:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8006f1a:	6878      	ldr	r0, [r7, #4]
 8006f1c:	f001 ffb3 	bl	8008e86 <USBD_LL_Transmit>

    ret = USBD_OK;
 8006f20:	2300      	movs	r3, #0
 8006f22:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8006f24:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f26:	4618      	mov	r0, r3
 8006f28:	3710      	adds	r7, #16
 8006f2a:	46bd      	mov	sp, r7
 8006f2c:	bd80      	pop	{r7, pc}
 8006f2e:	bf00      	nop
 8006f30:	20000693 	.word	0x20000693

08006f34 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006f34:	b580      	push	{r7, lr}
 8006f36:	b084      	sub	sp, #16
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	32b0      	adds	r2, #176	; 0xb0
 8006f46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f4a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	32b0      	adds	r2, #176	; 0xb0
 8006f56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d101      	bne.n	8006f62 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8006f5e:	2303      	movs	r3, #3
 8006f60:	e018      	b.n	8006f94 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	7c1b      	ldrb	r3, [r3, #16]
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d10a      	bne.n	8006f80 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006f6a:	4b0c      	ldr	r3, [pc, #48]	; (8006f9c <USBD_CDC_ReceivePacket+0x68>)
 8006f6c:	7819      	ldrb	r1, [r3, #0]
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006f74:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006f78:	6878      	ldr	r0, [r7, #4]
 8006f7a:	f001 ffa5 	bl	8008ec8 <USBD_LL_PrepareReceive>
 8006f7e:	e008      	b.n	8006f92 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006f80:	4b06      	ldr	r3, [pc, #24]	; (8006f9c <USBD_CDC_ReceivePacket+0x68>)
 8006f82:	7819      	ldrb	r1, [r3, #0]
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006f8a:	2340      	movs	r3, #64	; 0x40
 8006f8c:	6878      	ldr	r0, [r7, #4]
 8006f8e:	f001 ff9b 	bl	8008ec8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006f92:	2300      	movs	r3, #0
}
 8006f94:	4618      	mov	r0, r3
 8006f96:	3710      	adds	r7, #16
 8006f98:	46bd      	mov	sp, r7
 8006f9a:	bd80      	pop	{r7, pc}
 8006f9c:	20000694 	.word	0x20000694

08006fa0 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006fa0:	b580      	push	{r7, lr}
 8006fa2:	b086      	sub	sp, #24
 8006fa4:	af00      	add	r7, sp, #0
 8006fa6:	60f8      	str	r0, [r7, #12]
 8006fa8:	60b9      	str	r1, [r7, #8]
 8006faa:	4613      	mov	r3, r2
 8006fac:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d101      	bne.n	8006fb8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006fb4:	2303      	movs	r3, #3
 8006fb6:	e01f      	b.n	8006ff8 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	2200      	movs	r2, #0
 8006fbc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	2200      	movs	r2, #0
 8006fc4:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	2200      	movs	r2, #0
 8006fcc:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006fd0:	68bb      	ldr	r3, [r7, #8]
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d003      	beq.n	8006fde <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	68ba      	ldr	r2, [r7, #8]
 8006fda:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	2201      	movs	r2, #1
 8006fe2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	79fa      	ldrb	r2, [r7, #7]
 8006fea:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006fec:	68f8      	ldr	r0, [r7, #12]
 8006fee:	f001 fe15 	bl	8008c1c <USBD_LL_Init>
 8006ff2:	4603      	mov	r3, r0
 8006ff4:	75fb      	strb	r3, [r7, #23]

  return ret;
 8006ff6:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ff8:	4618      	mov	r0, r3
 8006ffa:	3718      	adds	r7, #24
 8006ffc:	46bd      	mov	sp, r7
 8006ffe:	bd80      	pop	{r7, pc}

08007000 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007000:	b580      	push	{r7, lr}
 8007002:	b084      	sub	sp, #16
 8007004:	af00      	add	r7, sp, #0
 8007006:	6078      	str	r0, [r7, #4]
 8007008:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800700a:	2300      	movs	r3, #0
 800700c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800700e:	683b      	ldr	r3, [r7, #0]
 8007010:	2b00      	cmp	r3, #0
 8007012:	d101      	bne.n	8007018 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007014:	2303      	movs	r3, #3
 8007016:	e025      	b.n	8007064 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	683a      	ldr	r2, [r7, #0]
 800701c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	32ae      	adds	r2, #174	; 0xae
 800702a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800702e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007030:	2b00      	cmp	r3, #0
 8007032:	d00f      	beq.n	8007054 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	32ae      	adds	r2, #174	; 0xae
 800703e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007042:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007044:	f107 020e 	add.w	r2, r7, #14
 8007048:	4610      	mov	r0, r2
 800704a:	4798      	blx	r3
 800704c:	4602      	mov	r2, r0
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800705a:	1c5a      	adds	r2, r3, #1
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8007062:	2300      	movs	r3, #0
}
 8007064:	4618      	mov	r0, r3
 8007066:	3710      	adds	r7, #16
 8007068:	46bd      	mov	sp, r7
 800706a:	bd80      	pop	{r7, pc}

0800706c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800706c:	b580      	push	{r7, lr}
 800706e:	b082      	sub	sp, #8
 8007070:	af00      	add	r7, sp, #0
 8007072:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007074:	6878      	ldr	r0, [r7, #4]
 8007076:	f001 fe1d 	bl	8008cb4 <USBD_LL_Start>
 800707a:	4603      	mov	r3, r0
}
 800707c:	4618      	mov	r0, r3
 800707e:	3708      	adds	r7, #8
 8007080:	46bd      	mov	sp, r7
 8007082:	bd80      	pop	{r7, pc}

08007084 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8007084:	b480      	push	{r7}
 8007086:	b083      	sub	sp, #12
 8007088:	af00      	add	r7, sp, #0
 800708a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800708c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800708e:	4618      	mov	r0, r3
 8007090:	370c      	adds	r7, #12
 8007092:	46bd      	mov	sp, r7
 8007094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007098:	4770      	bx	lr

0800709a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800709a:	b580      	push	{r7, lr}
 800709c:	b084      	sub	sp, #16
 800709e:	af00      	add	r7, sp, #0
 80070a0:	6078      	str	r0, [r7, #4]
 80070a2:	460b      	mov	r3, r1
 80070a4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80070a6:	2300      	movs	r3, #0
 80070a8:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d009      	beq.n	80070c8 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	78fa      	ldrb	r2, [r7, #3]
 80070be:	4611      	mov	r1, r2
 80070c0:	6878      	ldr	r0, [r7, #4]
 80070c2:	4798      	blx	r3
 80070c4:	4603      	mov	r3, r0
 80070c6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80070c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80070ca:	4618      	mov	r0, r3
 80070cc:	3710      	adds	r7, #16
 80070ce:	46bd      	mov	sp, r7
 80070d0:	bd80      	pop	{r7, pc}

080070d2 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80070d2:	b580      	push	{r7, lr}
 80070d4:	b084      	sub	sp, #16
 80070d6:	af00      	add	r7, sp, #0
 80070d8:	6078      	str	r0, [r7, #4]
 80070da:	460b      	mov	r3, r1
 80070dc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80070de:	2300      	movs	r3, #0
 80070e0:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070e8:	685b      	ldr	r3, [r3, #4]
 80070ea:	78fa      	ldrb	r2, [r7, #3]
 80070ec:	4611      	mov	r1, r2
 80070ee:	6878      	ldr	r0, [r7, #4]
 80070f0:	4798      	blx	r3
 80070f2:	4603      	mov	r3, r0
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d001      	beq.n	80070fc <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80070f8:	2303      	movs	r3, #3
 80070fa:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80070fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80070fe:	4618      	mov	r0, r3
 8007100:	3710      	adds	r7, #16
 8007102:	46bd      	mov	sp, r7
 8007104:	bd80      	pop	{r7, pc}

08007106 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007106:	b580      	push	{r7, lr}
 8007108:	b084      	sub	sp, #16
 800710a:	af00      	add	r7, sp, #0
 800710c:	6078      	str	r0, [r7, #4]
 800710e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007116:	6839      	ldr	r1, [r7, #0]
 8007118:	4618      	mov	r0, r3
 800711a:	f001 f908 	bl	800832e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	2201      	movs	r2, #1
 8007122:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800712c:	461a      	mov	r2, r3
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800713a:	f003 031f 	and.w	r3, r3, #31
 800713e:	2b02      	cmp	r3, #2
 8007140:	d01a      	beq.n	8007178 <USBD_LL_SetupStage+0x72>
 8007142:	2b02      	cmp	r3, #2
 8007144:	d822      	bhi.n	800718c <USBD_LL_SetupStage+0x86>
 8007146:	2b00      	cmp	r3, #0
 8007148:	d002      	beq.n	8007150 <USBD_LL_SetupStage+0x4a>
 800714a:	2b01      	cmp	r3, #1
 800714c:	d00a      	beq.n	8007164 <USBD_LL_SetupStage+0x5e>
 800714e:	e01d      	b.n	800718c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007156:	4619      	mov	r1, r3
 8007158:	6878      	ldr	r0, [r7, #4]
 800715a:	f000 fb5f 	bl	800781c <USBD_StdDevReq>
 800715e:	4603      	mov	r3, r0
 8007160:	73fb      	strb	r3, [r7, #15]
      break;
 8007162:	e020      	b.n	80071a6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800716a:	4619      	mov	r1, r3
 800716c:	6878      	ldr	r0, [r7, #4]
 800716e:	f000 fbc7 	bl	8007900 <USBD_StdItfReq>
 8007172:	4603      	mov	r3, r0
 8007174:	73fb      	strb	r3, [r7, #15]
      break;
 8007176:	e016      	b.n	80071a6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800717e:	4619      	mov	r1, r3
 8007180:	6878      	ldr	r0, [r7, #4]
 8007182:	f000 fc29 	bl	80079d8 <USBD_StdEPReq>
 8007186:	4603      	mov	r3, r0
 8007188:	73fb      	strb	r3, [r7, #15]
      break;
 800718a:	e00c      	b.n	80071a6 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007192:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007196:	b2db      	uxtb	r3, r3
 8007198:	4619      	mov	r1, r3
 800719a:	6878      	ldr	r0, [r7, #4]
 800719c:	f001 fdea 	bl	8008d74 <USBD_LL_StallEP>
 80071a0:	4603      	mov	r3, r0
 80071a2:	73fb      	strb	r3, [r7, #15]
      break;
 80071a4:	bf00      	nop
  }

  return ret;
 80071a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80071a8:	4618      	mov	r0, r3
 80071aa:	3710      	adds	r7, #16
 80071ac:	46bd      	mov	sp, r7
 80071ae:	bd80      	pop	{r7, pc}

080071b0 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80071b0:	b580      	push	{r7, lr}
 80071b2:	b086      	sub	sp, #24
 80071b4:	af00      	add	r7, sp, #0
 80071b6:	60f8      	str	r0, [r7, #12]
 80071b8:	460b      	mov	r3, r1
 80071ba:	607a      	str	r2, [r7, #4]
 80071bc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80071be:	2300      	movs	r3, #0
 80071c0:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80071c2:	7afb      	ldrb	r3, [r7, #11]
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d16e      	bne.n	80072a6 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80071ce:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80071d6:	2b03      	cmp	r3, #3
 80071d8:	f040 8098 	bne.w	800730c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80071dc:	693b      	ldr	r3, [r7, #16]
 80071de:	689a      	ldr	r2, [r3, #8]
 80071e0:	693b      	ldr	r3, [r7, #16]
 80071e2:	68db      	ldr	r3, [r3, #12]
 80071e4:	429a      	cmp	r2, r3
 80071e6:	d913      	bls.n	8007210 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80071e8:	693b      	ldr	r3, [r7, #16]
 80071ea:	689a      	ldr	r2, [r3, #8]
 80071ec:	693b      	ldr	r3, [r7, #16]
 80071ee:	68db      	ldr	r3, [r3, #12]
 80071f0:	1ad2      	subs	r2, r2, r3
 80071f2:	693b      	ldr	r3, [r7, #16]
 80071f4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80071f6:	693b      	ldr	r3, [r7, #16]
 80071f8:	68da      	ldr	r2, [r3, #12]
 80071fa:	693b      	ldr	r3, [r7, #16]
 80071fc:	689b      	ldr	r3, [r3, #8]
 80071fe:	4293      	cmp	r3, r2
 8007200:	bf28      	it	cs
 8007202:	4613      	movcs	r3, r2
 8007204:	461a      	mov	r2, r3
 8007206:	6879      	ldr	r1, [r7, #4]
 8007208:	68f8      	ldr	r0, [r7, #12]
 800720a:	f001 f984 	bl	8008516 <USBD_CtlContinueRx>
 800720e:	e07d      	b.n	800730c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007216:	f003 031f 	and.w	r3, r3, #31
 800721a:	2b02      	cmp	r3, #2
 800721c:	d014      	beq.n	8007248 <USBD_LL_DataOutStage+0x98>
 800721e:	2b02      	cmp	r3, #2
 8007220:	d81d      	bhi.n	800725e <USBD_LL_DataOutStage+0xae>
 8007222:	2b00      	cmp	r3, #0
 8007224:	d002      	beq.n	800722c <USBD_LL_DataOutStage+0x7c>
 8007226:	2b01      	cmp	r3, #1
 8007228:	d003      	beq.n	8007232 <USBD_LL_DataOutStage+0x82>
 800722a:	e018      	b.n	800725e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800722c:	2300      	movs	r3, #0
 800722e:	75bb      	strb	r3, [r7, #22]
            break;
 8007230:	e018      	b.n	8007264 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007238:	b2db      	uxtb	r3, r3
 800723a:	4619      	mov	r1, r3
 800723c:	68f8      	ldr	r0, [r7, #12]
 800723e:	f000 fa5e 	bl	80076fe <USBD_CoreFindIF>
 8007242:	4603      	mov	r3, r0
 8007244:	75bb      	strb	r3, [r7, #22]
            break;
 8007246:	e00d      	b.n	8007264 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800724e:	b2db      	uxtb	r3, r3
 8007250:	4619      	mov	r1, r3
 8007252:	68f8      	ldr	r0, [r7, #12]
 8007254:	f000 fa60 	bl	8007718 <USBD_CoreFindEP>
 8007258:	4603      	mov	r3, r0
 800725a:	75bb      	strb	r3, [r7, #22]
            break;
 800725c:	e002      	b.n	8007264 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800725e:	2300      	movs	r3, #0
 8007260:	75bb      	strb	r3, [r7, #22]
            break;
 8007262:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8007264:	7dbb      	ldrb	r3, [r7, #22]
 8007266:	2b00      	cmp	r3, #0
 8007268:	d119      	bne.n	800729e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007270:	b2db      	uxtb	r3, r3
 8007272:	2b03      	cmp	r3, #3
 8007274:	d113      	bne.n	800729e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8007276:	7dba      	ldrb	r2, [r7, #22]
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	32ae      	adds	r2, #174	; 0xae
 800727c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007280:	691b      	ldr	r3, [r3, #16]
 8007282:	2b00      	cmp	r3, #0
 8007284:	d00b      	beq.n	800729e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8007286:	7dba      	ldrb	r2, [r7, #22]
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800728e:	7dba      	ldrb	r2, [r7, #22]
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	32ae      	adds	r2, #174	; 0xae
 8007294:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007298:	691b      	ldr	r3, [r3, #16]
 800729a:	68f8      	ldr	r0, [r7, #12]
 800729c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800729e:	68f8      	ldr	r0, [r7, #12]
 80072a0:	f001 f94a 	bl	8008538 <USBD_CtlSendStatus>
 80072a4:	e032      	b.n	800730c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80072a6:	7afb      	ldrb	r3, [r7, #11]
 80072a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80072ac:	b2db      	uxtb	r3, r3
 80072ae:	4619      	mov	r1, r3
 80072b0:	68f8      	ldr	r0, [r7, #12]
 80072b2:	f000 fa31 	bl	8007718 <USBD_CoreFindEP>
 80072b6:	4603      	mov	r3, r0
 80072b8:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80072ba:	7dbb      	ldrb	r3, [r7, #22]
 80072bc:	2bff      	cmp	r3, #255	; 0xff
 80072be:	d025      	beq.n	800730c <USBD_LL_DataOutStage+0x15c>
 80072c0:	7dbb      	ldrb	r3, [r7, #22]
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d122      	bne.n	800730c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80072cc:	b2db      	uxtb	r3, r3
 80072ce:	2b03      	cmp	r3, #3
 80072d0:	d117      	bne.n	8007302 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80072d2:	7dba      	ldrb	r2, [r7, #22]
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	32ae      	adds	r2, #174	; 0xae
 80072d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072dc:	699b      	ldr	r3, [r3, #24]
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d00f      	beq.n	8007302 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80072e2:	7dba      	ldrb	r2, [r7, #22]
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80072ea:	7dba      	ldrb	r2, [r7, #22]
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	32ae      	adds	r2, #174	; 0xae
 80072f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072f4:	699b      	ldr	r3, [r3, #24]
 80072f6:	7afa      	ldrb	r2, [r7, #11]
 80072f8:	4611      	mov	r1, r2
 80072fa:	68f8      	ldr	r0, [r7, #12]
 80072fc:	4798      	blx	r3
 80072fe:	4603      	mov	r3, r0
 8007300:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8007302:	7dfb      	ldrb	r3, [r7, #23]
 8007304:	2b00      	cmp	r3, #0
 8007306:	d001      	beq.n	800730c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8007308:	7dfb      	ldrb	r3, [r7, #23]
 800730a:	e000      	b.n	800730e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800730c:	2300      	movs	r3, #0
}
 800730e:	4618      	mov	r0, r3
 8007310:	3718      	adds	r7, #24
 8007312:	46bd      	mov	sp, r7
 8007314:	bd80      	pop	{r7, pc}

08007316 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007316:	b580      	push	{r7, lr}
 8007318:	b086      	sub	sp, #24
 800731a:	af00      	add	r7, sp, #0
 800731c:	60f8      	str	r0, [r7, #12]
 800731e:	460b      	mov	r3, r1
 8007320:	607a      	str	r2, [r7, #4]
 8007322:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8007324:	7afb      	ldrb	r3, [r7, #11]
 8007326:	2b00      	cmp	r3, #0
 8007328:	d16f      	bne.n	800740a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	3314      	adds	r3, #20
 800732e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007336:	2b02      	cmp	r3, #2
 8007338:	d15a      	bne.n	80073f0 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800733a:	693b      	ldr	r3, [r7, #16]
 800733c:	689a      	ldr	r2, [r3, #8]
 800733e:	693b      	ldr	r3, [r7, #16]
 8007340:	68db      	ldr	r3, [r3, #12]
 8007342:	429a      	cmp	r2, r3
 8007344:	d914      	bls.n	8007370 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007346:	693b      	ldr	r3, [r7, #16]
 8007348:	689a      	ldr	r2, [r3, #8]
 800734a:	693b      	ldr	r3, [r7, #16]
 800734c:	68db      	ldr	r3, [r3, #12]
 800734e:	1ad2      	subs	r2, r2, r3
 8007350:	693b      	ldr	r3, [r7, #16]
 8007352:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007354:	693b      	ldr	r3, [r7, #16]
 8007356:	689b      	ldr	r3, [r3, #8]
 8007358:	461a      	mov	r2, r3
 800735a:	6879      	ldr	r1, [r7, #4]
 800735c:	68f8      	ldr	r0, [r7, #12]
 800735e:	f001 f8ac 	bl	80084ba <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007362:	2300      	movs	r3, #0
 8007364:	2200      	movs	r2, #0
 8007366:	2100      	movs	r1, #0
 8007368:	68f8      	ldr	r0, [r7, #12]
 800736a:	f001 fdad 	bl	8008ec8 <USBD_LL_PrepareReceive>
 800736e:	e03f      	b.n	80073f0 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007370:	693b      	ldr	r3, [r7, #16]
 8007372:	68da      	ldr	r2, [r3, #12]
 8007374:	693b      	ldr	r3, [r7, #16]
 8007376:	689b      	ldr	r3, [r3, #8]
 8007378:	429a      	cmp	r2, r3
 800737a:	d11c      	bne.n	80073b6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800737c:	693b      	ldr	r3, [r7, #16]
 800737e:	685a      	ldr	r2, [r3, #4]
 8007380:	693b      	ldr	r3, [r7, #16]
 8007382:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007384:	429a      	cmp	r2, r3
 8007386:	d316      	bcc.n	80073b6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007388:	693b      	ldr	r3, [r7, #16]
 800738a:	685a      	ldr	r2, [r3, #4]
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007392:	429a      	cmp	r2, r3
 8007394:	d20f      	bcs.n	80073b6 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007396:	2200      	movs	r2, #0
 8007398:	2100      	movs	r1, #0
 800739a:	68f8      	ldr	r0, [r7, #12]
 800739c:	f001 f88d 	bl	80084ba <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	2200      	movs	r2, #0
 80073a4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80073a8:	2300      	movs	r3, #0
 80073aa:	2200      	movs	r2, #0
 80073ac:	2100      	movs	r1, #0
 80073ae:	68f8      	ldr	r0, [r7, #12]
 80073b0:	f001 fd8a 	bl	8008ec8 <USBD_LL_PrepareReceive>
 80073b4:	e01c      	b.n	80073f0 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80073bc:	b2db      	uxtb	r3, r3
 80073be:	2b03      	cmp	r3, #3
 80073c0:	d10f      	bne.n	80073e2 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80073c8:	68db      	ldr	r3, [r3, #12]
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d009      	beq.n	80073e2 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	2200      	movs	r2, #0
 80073d2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80073dc:	68db      	ldr	r3, [r3, #12]
 80073de:	68f8      	ldr	r0, [r7, #12]
 80073e0:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80073e2:	2180      	movs	r1, #128	; 0x80
 80073e4:	68f8      	ldr	r0, [r7, #12]
 80073e6:	f001 fcc5 	bl	8008d74 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80073ea:	68f8      	ldr	r0, [r7, #12]
 80073ec:	f001 f8b7 	bl	800855e <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d03a      	beq.n	8007470 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80073fa:	68f8      	ldr	r0, [r7, #12]
 80073fc:	f7ff fe42 	bl	8007084 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	2200      	movs	r2, #0
 8007404:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007408:	e032      	b.n	8007470 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800740a:	7afb      	ldrb	r3, [r7, #11]
 800740c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007410:	b2db      	uxtb	r3, r3
 8007412:	4619      	mov	r1, r3
 8007414:	68f8      	ldr	r0, [r7, #12]
 8007416:	f000 f97f 	bl	8007718 <USBD_CoreFindEP>
 800741a:	4603      	mov	r3, r0
 800741c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800741e:	7dfb      	ldrb	r3, [r7, #23]
 8007420:	2bff      	cmp	r3, #255	; 0xff
 8007422:	d025      	beq.n	8007470 <USBD_LL_DataInStage+0x15a>
 8007424:	7dfb      	ldrb	r3, [r7, #23]
 8007426:	2b00      	cmp	r3, #0
 8007428:	d122      	bne.n	8007470 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007430:	b2db      	uxtb	r3, r3
 8007432:	2b03      	cmp	r3, #3
 8007434:	d11c      	bne.n	8007470 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8007436:	7dfa      	ldrb	r2, [r7, #23]
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	32ae      	adds	r2, #174	; 0xae
 800743c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007440:	695b      	ldr	r3, [r3, #20]
 8007442:	2b00      	cmp	r3, #0
 8007444:	d014      	beq.n	8007470 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8007446:	7dfa      	ldrb	r2, [r7, #23]
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800744e:	7dfa      	ldrb	r2, [r7, #23]
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	32ae      	adds	r2, #174	; 0xae
 8007454:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007458:	695b      	ldr	r3, [r3, #20]
 800745a:	7afa      	ldrb	r2, [r7, #11]
 800745c:	4611      	mov	r1, r2
 800745e:	68f8      	ldr	r0, [r7, #12]
 8007460:	4798      	blx	r3
 8007462:	4603      	mov	r3, r0
 8007464:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8007466:	7dbb      	ldrb	r3, [r7, #22]
 8007468:	2b00      	cmp	r3, #0
 800746a:	d001      	beq.n	8007470 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800746c:	7dbb      	ldrb	r3, [r7, #22]
 800746e:	e000      	b.n	8007472 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8007470:	2300      	movs	r3, #0
}
 8007472:	4618      	mov	r0, r3
 8007474:	3718      	adds	r7, #24
 8007476:	46bd      	mov	sp, r7
 8007478:	bd80      	pop	{r7, pc}

0800747a <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800747a:	b580      	push	{r7, lr}
 800747c:	b084      	sub	sp, #16
 800747e:	af00      	add	r7, sp, #0
 8007480:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8007482:	2300      	movs	r3, #0
 8007484:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	2201      	movs	r2, #1
 800748a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	2200      	movs	r2, #0
 8007492:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	2200      	movs	r2, #0
 800749a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	2200      	movs	r2, #0
 80074a0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	2200      	movs	r2, #0
 80074a8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d014      	beq.n	80074e0 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80074bc:	685b      	ldr	r3, [r3, #4]
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d00e      	beq.n	80074e0 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80074c8:	685b      	ldr	r3, [r3, #4]
 80074ca:	687a      	ldr	r2, [r7, #4]
 80074cc:	6852      	ldr	r2, [r2, #4]
 80074ce:	b2d2      	uxtb	r2, r2
 80074d0:	4611      	mov	r1, r2
 80074d2:	6878      	ldr	r0, [r7, #4]
 80074d4:	4798      	blx	r3
 80074d6:	4603      	mov	r3, r0
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d001      	beq.n	80074e0 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80074dc:	2303      	movs	r3, #3
 80074de:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80074e0:	2340      	movs	r3, #64	; 0x40
 80074e2:	2200      	movs	r2, #0
 80074e4:	2100      	movs	r1, #0
 80074e6:	6878      	ldr	r0, [r7, #4]
 80074e8:	f001 fbff 	bl	8008cea <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	2201      	movs	r2, #1
 80074f0:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	2240      	movs	r2, #64	; 0x40
 80074f8:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80074fc:	2340      	movs	r3, #64	; 0x40
 80074fe:	2200      	movs	r2, #0
 8007500:	2180      	movs	r1, #128	; 0x80
 8007502:	6878      	ldr	r0, [r7, #4]
 8007504:	f001 fbf1 	bl	8008cea <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	2201      	movs	r2, #1
 800750c:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	2240      	movs	r2, #64	; 0x40
 8007512:	621a      	str	r2, [r3, #32]

  return ret;
 8007514:	7bfb      	ldrb	r3, [r7, #15]
}
 8007516:	4618      	mov	r0, r3
 8007518:	3710      	adds	r7, #16
 800751a:	46bd      	mov	sp, r7
 800751c:	bd80      	pop	{r7, pc}

0800751e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800751e:	b480      	push	{r7}
 8007520:	b083      	sub	sp, #12
 8007522:	af00      	add	r7, sp, #0
 8007524:	6078      	str	r0, [r7, #4]
 8007526:	460b      	mov	r3, r1
 8007528:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	78fa      	ldrb	r2, [r7, #3]
 800752e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007530:	2300      	movs	r3, #0
}
 8007532:	4618      	mov	r0, r3
 8007534:	370c      	adds	r7, #12
 8007536:	46bd      	mov	sp, r7
 8007538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800753c:	4770      	bx	lr

0800753e <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800753e:	b480      	push	{r7}
 8007540:	b083      	sub	sp, #12
 8007542:	af00      	add	r7, sp, #0
 8007544:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800754c:	b2da      	uxtb	r2, r3
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	2204      	movs	r2, #4
 8007558:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800755c:	2300      	movs	r3, #0
}
 800755e:	4618      	mov	r0, r3
 8007560:	370c      	adds	r7, #12
 8007562:	46bd      	mov	sp, r7
 8007564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007568:	4770      	bx	lr

0800756a <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800756a:	b480      	push	{r7}
 800756c:	b083      	sub	sp, #12
 800756e:	af00      	add	r7, sp, #0
 8007570:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007578:	b2db      	uxtb	r3, r3
 800757a:	2b04      	cmp	r3, #4
 800757c:	d106      	bne.n	800758c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8007584:	b2da      	uxtb	r2, r3
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800758c:	2300      	movs	r3, #0
}
 800758e:	4618      	mov	r0, r3
 8007590:	370c      	adds	r7, #12
 8007592:	46bd      	mov	sp, r7
 8007594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007598:	4770      	bx	lr

0800759a <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800759a:	b580      	push	{r7, lr}
 800759c:	b082      	sub	sp, #8
 800759e:	af00      	add	r7, sp, #0
 80075a0:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80075a8:	b2db      	uxtb	r3, r3
 80075aa:	2b03      	cmp	r3, #3
 80075ac:	d110      	bne.n	80075d0 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d00b      	beq.n	80075d0 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80075be:	69db      	ldr	r3, [r3, #28]
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d005      	beq.n	80075d0 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80075ca:	69db      	ldr	r3, [r3, #28]
 80075cc:	6878      	ldr	r0, [r7, #4]
 80075ce:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80075d0:	2300      	movs	r3, #0
}
 80075d2:	4618      	mov	r0, r3
 80075d4:	3708      	adds	r7, #8
 80075d6:	46bd      	mov	sp, r7
 80075d8:	bd80      	pop	{r7, pc}

080075da <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80075da:	b580      	push	{r7, lr}
 80075dc:	b082      	sub	sp, #8
 80075de:	af00      	add	r7, sp, #0
 80075e0:	6078      	str	r0, [r7, #4]
 80075e2:	460b      	mov	r3, r1
 80075e4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	32ae      	adds	r2, #174	; 0xae
 80075f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d101      	bne.n	80075fc <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80075f8:	2303      	movs	r3, #3
 80075fa:	e01c      	b.n	8007636 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007602:	b2db      	uxtb	r3, r3
 8007604:	2b03      	cmp	r3, #3
 8007606:	d115      	bne.n	8007634 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	32ae      	adds	r2, #174	; 0xae
 8007612:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007616:	6a1b      	ldr	r3, [r3, #32]
 8007618:	2b00      	cmp	r3, #0
 800761a:	d00b      	beq.n	8007634 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	32ae      	adds	r2, #174	; 0xae
 8007626:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800762a:	6a1b      	ldr	r3, [r3, #32]
 800762c:	78fa      	ldrb	r2, [r7, #3]
 800762e:	4611      	mov	r1, r2
 8007630:	6878      	ldr	r0, [r7, #4]
 8007632:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007634:	2300      	movs	r3, #0
}
 8007636:	4618      	mov	r0, r3
 8007638:	3708      	adds	r7, #8
 800763a:	46bd      	mov	sp, r7
 800763c:	bd80      	pop	{r7, pc}

0800763e <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800763e:	b580      	push	{r7, lr}
 8007640:	b082      	sub	sp, #8
 8007642:	af00      	add	r7, sp, #0
 8007644:	6078      	str	r0, [r7, #4]
 8007646:	460b      	mov	r3, r1
 8007648:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	32ae      	adds	r2, #174	; 0xae
 8007654:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007658:	2b00      	cmp	r3, #0
 800765a:	d101      	bne.n	8007660 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800765c:	2303      	movs	r3, #3
 800765e:	e01c      	b.n	800769a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007666:	b2db      	uxtb	r3, r3
 8007668:	2b03      	cmp	r3, #3
 800766a:	d115      	bne.n	8007698 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	32ae      	adds	r2, #174	; 0xae
 8007676:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800767a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800767c:	2b00      	cmp	r3, #0
 800767e:	d00b      	beq.n	8007698 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	32ae      	adds	r2, #174	; 0xae
 800768a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800768e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007690:	78fa      	ldrb	r2, [r7, #3]
 8007692:	4611      	mov	r1, r2
 8007694:	6878      	ldr	r0, [r7, #4]
 8007696:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007698:	2300      	movs	r3, #0
}
 800769a:	4618      	mov	r0, r3
 800769c:	3708      	adds	r7, #8
 800769e:	46bd      	mov	sp, r7
 80076a0:	bd80      	pop	{r7, pc}

080076a2 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80076a2:	b480      	push	{r7}
 80076a4:	b083      	sub	sp, #12
 80076a6:	af00      	add	r7, sp, #0
 80076a8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80076aa:	2300      	movs	r3, #0
}
 80076ac:	4618      	mov	r0, r3
 80076ae:	370c      	adds	r7, #12
 80076b0:	46bd      	mov	sp, r7
 80076b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b6:	4770      	bx	lr

080076b8 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80076b8:	b580      	push	{r7, lr}
 80076ba:	b084      	sub	sp, #16
 80076bc:	af00      	add	r7, sp, #0
 80076be:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80076c0:	2300      	movs	r3, #0
 80076c2:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	2201      	movs	r2, #1
 80076c8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d00e      	beq.n	80076f4 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80076dc:	685b      	ldr	r3, [r3, #4]
 80076de:	687a      	ldr	r2, [r7, #4]
 80076e0:	6852      	ldr	r2, [r2, #4]
 80076e2:	b2d2      	uxtb	r2, r2
 80076e4:	4611      	mov	r1, r2
 80076e6:	6878      	ldr	r0, [r7, #4]
 80076e8:	4798      	blx	r3
 80076ea:	4603      	mov	r3, r0
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d001      	beq.n	80076f4 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80076f0:	2303      	movs	r3, #3
 80076f2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80076f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80076f6:	4618      	mov	r0, r3
 80076f8:	3710      	adds	r7, #16
 80076fa:	46bd      	mov	sp, r7
 80076fc:	bd80      	pop	{r7, pc}

080076fe <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80076fe:	b480      	push	{r7}
 8007700:	b083      	sub	sp, #12
 8007702:	af00      	add	r7, sp, #0
 8007704:	6078      	str	r0, [r7, #4]
 8007706:	460b      	mov	r3, r1
 8007708:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800770a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800770c:	4618      	mov	r0, r3
 800770e:	370c      	adds	r7, #12
 8007710:	46bd      	mov	sp, r7
 8007712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007716:	4770      	bx	lr

08007718 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007718:	b480      	push	{r7}
 800771a:	b083      	sub	sp, #12
 800771c:	af00      	add	r7, sp, #0
 800771e:	6078      	str	r0, [r7, #4]
 8007720:	460b      	mov	r3, r1
 8007722:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007724:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007726:	4618      	mov	r0, r3
 8007728:	370c      	adds	r7, #12
 800772a:	46bd      	mov	sp, r7
 800772c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007730:	4770      	bx	lr

08007732 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8007732:	b580      	push	{r7, lr}
 8007734:	b086      	sub	sp, #24
 8007736:	af00      	add	r7, sp, #0
 8007738:	6078      	str	r0, [r7, #4]
 800773a:	460b      	mov	r3, r1
 800773c:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8007746:	2300      	movs	r3, #0
 8007748:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	885b      	ldrh	r3, [r3, #2]
 800774e:	b29a      	uxth	r2, r3
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	781b      	ldrb	r3, [r3, #0]
 8007754:	b29b      	uxth	r3, r3
 8007756:	429a      	cmp	r2, r3
 8007758:	d920      	bls.n	800779c <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	781b      	ldrb	r3, [r3, #0]
 800775e:	b29b      	uxth	r3, r3
 8007760:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8007762:	e013      	b.n	800778c <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8007764:	f107 030a 	add.w	r3, r7, #10
 8007768:	4619      	mov	r1, r3
 800776a:	6978      	ldr	r0, [r7, #20]
 800776c:	f000 f81b 	bl	80077a6 <USBD_GetNextDesc>
 8007770:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8007772:	697b      	ldr	r3, [r7, #20]
 8007774:	785b      	ldrb	r3, [r3, #1]
 8007776:	2b05      	cmp	r3, #5
 8007778:	d108      	bne.n	800778c <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800777a:	697b      	ldr	r3, [r7, #20]
 800777c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800777e:	693b      	ldr	r3, [r7, #16]
 8007780:	789b      	ldrb	r3, [r3, #2]
 8007782:	78fa      	ldrb	r2, [r7, #3]
 8007784:	429a      	cmp	r2, r3
 8007786:	d008      	beq.n	800779a <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8007788:	2300      	movs	r3, #0
 800778a:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	885b      	ldrh	r3, [r3, #2]
 8007790:	b29a      	uxth	r2, r3
 8007792:	897b      	ldrh	r3, [r7, #10]
 8007794:	429a      	cmp	r2, r3
 8007796:	d8e5      	bhi.n	8007764 <USBD_GetEpDesc+0x32>
 8007798:	e000      	b.n	800779c <USBD_GetEpDesc+0x6a>
          break;
 800779a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800779c:	693b      	ldr	r3, [r7, #16]
}
 800779e:	4618      	mov	r0, r3
 80077a0:	3718      	adds	r7, #24
 80077a2:	46bd      	mov	sp, r7
 80077a4:	bd80      	pop	{r7, pc}

080077a6 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80077a6:	b480      	push	{r7}
 80077a8:	b085      	sub	sp, #20
 80077aa:	af00      	add	r7, sp, #0
 80077ac:	6078      	str	r0, [r7, #4]
 80077ae:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80077b4:	683b      	ldr	r3, [r7, #0]
 80077b6:	881a      	ldrh	r2, [r3, #0]
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	781b      	ldrb	r3, [r3, #0]
 80077bc:	b29b      	uxth	r3, r3
 80077be:	4413      	add	r3, r2
 80077c0:	b29a      	uxth	r2, r3
 80077c2:	683b      	ldr	r3, [r7, #0]
 80077c4:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	781b      	ldrb	r3, [r3, #0]
 80077ca:	461a      	mov	r2, r3
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	4413      	add	r3, r2
 80077d0:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80077d2:	68fb      	ldr	r3, [r7, #12]
}
 80077d4:	4618      	mov	r0, r3
 80077d6:	3714      	adds	r7, #20
 80077d8:	46bd      	mov	sp, r7
 80077da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077de:	4770      	bx	lr

080077e0 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80077e0:	b480      	push	{r7}
 80077e2:	b087      	sub	sp, #28
 80077e4:	af00      	add	r7, sp, #0
 80077e6:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80077ec:	697b      	ldr	r3, [r7, #20]
 80077ee:	781b      	ldrb	r3, [r3, #0]
 80077f0:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80077f2:	697b      	ldr	r3, [r7, #20]
 80077f4:	3301      	adds	r3, #1
 80077f6:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80077f8:	697b      	ldr	r3, [r7, #20]
 80077fa:	781b      	ldrb	r3, [r3, #0]
 80077fc:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80077fe:	8a3b      	ldrh	r3, [r7, #16]
 8007800:	021b      	lsls	r3, r3, #8
 8007802:	b21a      	sxth	r2, r3
 8007804:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007808:	4313      	orrs	r3, r2
 800780a:	b21b      	sxth	r3, r3
 800780c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800780e:	89fb      	ldrh	r3, [r7, #14]
}
 8007810:	4618      	mov	r0, r3
 8007812:	371c      	adds	r7, #28
 8007814:	46bd      	mov	sp, r7
 8007816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800781a:	4770      	bx	lr

0800781c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800781c:	b580      	push	{r7, lr}
 800781e:	b084      	sub	sp, #16
 8007820:	af00      	add	r7, sp, #0
 8007822:	6078      	str	r0, [r7, #4]
 8007824:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007826:	2300      	movs	r3, #0
 8007828:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800782a:	683b      	ldr	r3, [r7, #0]
 800782c:	781b      	ldrb	r3, [r3, #0]
 800782e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007832:	2b40      	cmp	r3, #64	; 0x40
 8007834:	d005      	beq.n	8007842 <USBD_StdDevReq+0x26>
 8007836:	2b40      	cmp	r3, #64	; 0x40
 8007838:	d857      	bhi.n	80078ea <USBD_StdDevReq+0xce>
 800783a:	2b00      	cmp	r3, #0
 800783c:	d00f      	beq.n	800785e <USBD_StdDevReq+0x42>
 800783e:	2b20      	cmp	r3, #32
 8007840:	d153      	bne.n	80078ea <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	32ae      	adds	r2, #174	; 0xae
 800784c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007850:	689b      	ldr	r3, [r3, #8]
 8007852:	6839      	ldr	r1, [r7, #0]
 8007854:	6878      	ldr	r0, [r7, #4]
 8007856:	4798      	blx	r3
 8007858:	4603      	mov	r3, r0
 800785a:	73fb      	strb	r3, [r7, #15]
      break;
 800785c:	e04a      	b.n	80078f4 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800785e:	683b      	ldr	r3, [r7, #0]
 8007860:	785b      	ldrb	r3, [r3, #1]
 8007862:	2b09      	cmp	r3, #9
 8007864:	d83b      	bhi.n	80078de <USBD_StdDevReq+0xc2>
 8007866:	a201      	add	r2, pc, #4	; (adr r2, 800786c <USBD_StdDevReq+0x50>)
 8007868:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800786c:	080078c1 	.word	0x080078c1
 8007870:	080078d5 	.word	0x080078d5
 8007874:	080078df 	.word	0x080078df
 8007878:	080078cb 	.word	0x080078cb
 800787c:	080078df 	.word	0x080078df
 8007880:	0800789f 	.word	0x0800789f
 8007884:	08007895 	.word	0x08007895
 8007888:	080078df 	.word	0x080078df
 800788c:	080078b7 	.word	0x080078b7
 8007890:	080078a9 	.word	0x080078a9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007894:	6839      	ldr	r1, [r7, #0]
 8007896:	6878      	ldr	r0, [r7, #4]
 8007898:	f000 fa3c 	bl	8007d14 <USBD_GetDescriptor>
          break;
 800789c:	e024      	b.n	80078e8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800789e:	6839      	ldr	r1, [r7, #0]
 80078a0:	6878      	ldr	r0, [r7, #4]
 80078a2:	f000 fba1 	bl	8007fe8 <USBD_SetAddress>
          break;
 80078a6:	e01f      	b.n	80078e8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80078a8:	6839      	ldr	r1, [r7, #0]
 80078aa:	6878      	ldr	r0, [r7, #4]
 80078ac:	f000 fbe0 	bl	8008070 <USBD_SetConfig>
 80078b0:	4603      	mov	r3, r0
 80078b2:	73fb      	strb	r3, [r7, #15]
          break;
 80078b4:	e018      	b.n	80078e8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80078b6:	6839      	ldr	r1, [r7, #0]
 80078b8:	6878      	ldr	r0, [r7, #4]
 80078ba:	f000 fc83 	bl	80081c4 <USBD_GetConfig>
          break;
 80078be:	e013      	b.n	80078e8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80078c0:	6839      	ldr	r1, [r7, #0]
 80078c2:	6878      	ldr	r0, [r7, #4]
 80078c4:	f000 fcb4 	bl	8008230 <USBD_GetStatus>
          break;
 80078c8:	e00e      	b.n	80078e8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80078ca:	6839      	ldr	r1, [r7, #0]
 80078cc:	6878      	ldr	r0, [r7, #4]
 80078ce:	f000 fce3 	bl	8008298 <USBD_SetFeature>
          break;
 80078d2:	e009      	b.n	80078e8 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80078d4:	6839      	ldr	r1, [r7, #0]
 80078d6:	6878      	ldr	r0, [r7, #4]
 80078d8:	f000 fd07 	bl	80082ea <USBD_ClrFeature>
          break;
 80078dc:	e004      	b.n	80078e8 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80078de:	6839      	ldr	r1, [r7, #0]
 80078e0:	6878      	ldr	r0, [r7, #4]
 80078e2:	f000 fd5e 	bl	80083a2 <USBD_CtlError>
          break;
 80078e6:	bf00      	nop
      }
      break;
 80078e8:	e004      	b.n	80078f4 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80078ea:	6839      	ldr	r1, [r7, #0]
 80078ec:	6878      	ldr	r0, [r7, #4]
 80078ee:	f000 fd58 	bl	80083a2 <USBD_CtlError>
      break;
 80078f2:	bf00      	nop
  }

  return ret;
 80078f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80078f6:	4618      	mov	r0, r3
 80078f8:	3710      	adds	r7, #16
 80078fa:	46bd      	mov	sp, r7
 80078fc:	bd80      	pop	{r7, pc}
 80078fe:	bf00      	nop

08007900 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007900:	b580      	push	{r7, lr}
 8007902:	b084      	sub	sp, #16
 8007904:	af00      	add	r7, sp, #0
 8007906:	6078      	str	r0, [r7, #4]
 8007908:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800790a:	2300      	movs	r3, #0
 800790c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800790e:	683b      	ldr	r3, [r7, #0]
 8007910:	781b      	ldrb	r3, [r3, #0]
 8007912:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007916:	2b40      	cmp	r3, #64	; 0x40
 8007918:	d005      	beq.n	8007926 <USBD_StdItfReq+0x26>
 800791a:	2b40      	cmp	r3, #64	; 0x40
 800791c:	d852      	bhi.n	80079c4 <USBD_StdItfReq+0xc4>
 800791e:	2b00      	cmp	r3, #0
 8007920:	d001      	beq.n	8007926 <USBD_StdItfReq+0x26>
 8007922:	2b20      	cmp	r3, #32
 8007924:	d14e      	bne.n	80079c4 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800792c:	b2db      	uxtb	r3, r3
 800792e:	3b01      	subs	r3, #1
 8007930:	2b02      	cmp	r3, #2
 8007932:	d840      	bhi.n	80079b6 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007934:	683b      	ldr	r3, [r7, #0]
 8007936:	889b      	ldrh	r3, [r3, #4]
 8007938:	b2db      	uxtb	r3, r3
 800793a:	2b01      	cmp	r3, #1
 800793c:	d836      	bhi.n	80079ac <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800793e:	683b      	ldr	r3, [r7, #0]
 8007940:	889b      	ldrh	r3, [r3, #4]
 8007942:	b2db      	uxtb	r3, r3
 8007944:	4619      	mov	r1, r3
 8007946:	6878      	ldr	r0, [r7, #4]
 8007948:	f7ff fed9 	bl	80076fe <USBD_CoreFindIF>
 800794c:	4603      	mov	r3, r0
 800794e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007950:	7bbb      	ldrb	r3, [r7, #14]
 8007952:	2bff      	cmp	r3, #255	; 0xff
 8007954:	d01d      	beq.n	8007992 <USBD_StdItfReq+0x92>
 8007956:	7bbb      	ldrb	r3, [r7, #14]
 8007958:	2b00      	cmp	r3, #0
 800795a:	d11a      	bne.n	8007992 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800795c:	7bba      	ldrb	r2, [r7, #14]
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	32ae      	adds	r2, #174	; 0xae
 8007962:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007966:	689b      	ldr	r3, [r3, #8]
 8007968:	2b00      	cmp	r3, #0
 800796a:	d00f      	beq.n	800798c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800796c:	7bba      	ldrb	r2, [r7, #14]
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007974:	7bba      	ldrb	r2, [r7, #14]
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	32ae      	adds	r2, #174	; 0xae
 800797a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800797e:	689b      	ldr	r3, [r3, #8]
 8007980:	6839      	ldr	r1, [r7, #0]
 8007982:	6878      	ldr	r0, [r7, #4]
 8007984:	4798      	blx	r3
 8007986:	4603      	mov	r3, r0
 8007988:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800798a:	e004      	b.n	8007996 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800798c:	2303      	movs	r3, #3
 800798e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007990:	e001      	b.n	8007996 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8007992:	2303      	movs	r3, #3
 8007994:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007996:	683b      	ldr	r3, [r7, #0]
 8007998:	88db      	ldrh	r3, [r3, #6]
 800799a:	2b00      	cmp	r3, #0
 800799c:	d110      	bne.n	80079c0 <USBD_StdItfReq+0xc0>
 800799e:	7bfb      	ldrb	r3, [r7, #15]
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d10d      	bne.n	80079c0 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80079a4:	6878      	ldr	r0, [r7, #4]
 80079a6:	f000 fdc7 	bl	8008538 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80079aa:	e009      	b.n	80079c0 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80079ac:	6839      	ldr	r1, [r7, #0]
 80079ae:	6878      	ldr	r0, [r7, #4]
 80079b0:	f000 fcf7 	bl	80083a2 <USBD_CtlError>
          break;
 80079b4:	e004      	b.n	80079c0 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80079b6:	6839      	ldr	r1, [r7, #0]
 80079b8:	6878      	ldr	r0, [r7, #4]
 80079ba:	f000 fcf2 	bl	80083a2 <USBD_CtlError>
          break;
 80079be:	e000      	b.n	80079c2 <USBD_StdItfReq+0xc2>
          break;
 80079c0:	bf00      	nop
      }
      break;
 80079c2:	e004      	b.n	80079ce <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80079c4:	6839      	ldr	r1, [r7, #0]
 80079c6:	6878      	ldr	r0, [r7, #4]
 80079c8:	f000 fceb 	bl	80083a2 <USBD_CtlError>
      break;
 80079cc:	bf00      	nop
  }

  return ret;
 80079ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80079d0:	4618      	mov	r0, r3
 80079d2:	3710      	adds	r7, #16
 80079d4:	46bd      	mov	sp, r7
 80079d6:	bd80      	pop	{r7, pc}

080079d8 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80079d8:	b580      	push	{r7, lr}
 80079da:	b084      	sub	sp, #16
 80079dc:	af00      	add	r7, sp, #0
 80079de:	6078      	str	r0, [r7, #4]
 80079e0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80079e2:	2300      	movs	r3, #0
 80079e4:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80079e6:	683b      	ldr	r3, [r7, #0]
 80079e8:	889b      	ldrh	r3, [r3, #4]
 80079ea:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80079ec:	683b      	ldr	r3, [r7, #0]
 80079ee:	781b      	ldrb	r3, [r3, #0]
 80079f0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80079f4:	2b40      	cmp	r3, #64	; 0x40
 80079f6:	d007      	beq.n	8007a08 <USBD_StdEPReq+0x30>
 80079f8:	2b40      	cmp	r3, #64	; 0x40
 80079fa:	f200 817f 	bhi.w	8007cfc <USBD_StdEPReq+0x324>
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d02a      	beq.n	8007a58 <USBD_StdEPReq+0x80>
 8007a02:	2b20      	cmp	r3, #32
 8007a04:	f040 817a 	bne.w	8007cfc <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8007a08:	7bbb      	ldrb	r3, [r7, #14]
 8007a0a:	4619      	mov	r1, r3
 8007a0c:	6878      	ldr	r0, [r7, #4]
 8007a0e:	f7ff fe83 	bl	8007718 <USBD_CoreFindEP>
 8007a12:	4603      	mov	r3, r0
 8007a14:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007a16:	7b7b      	ldrb	r3, [r7, #13]
 8007a18:	2bff      	cmp	r3, #255	; 0xff
 8007a1a:	f000 8174 	beq.w	8007d06 <USBD_StdEPReq+0x32e>
 8007a1e:	7b7b      	ldrb	r3, [r7, #13]
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	f040 8170 	bne.w	8007d06 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8007a26:	7b7a      	ldrb	r2, [r7, #13]
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8007a2e:	7b7a      	ldrb	r2, [r7, #13]
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	32ae      	adds	r2, #174	; 0xae
 8007a34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a38:	689b      	ldr	r3, [r3, #8]
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	f000 8163 	beq.w	8007d06 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8007a40:	7b7a      	ldrb	r2, [r7, #13]
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	32ae      	adds	r2, #174	; 0xae
 8007a46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a4a:	689b      	ldr	r3, [r3, #8]
 8007a4c:	6839      	ldr	r1, [r7, #0]
 8007a4e:	6878      	ldr	r0, [r7, #4]
 8007a50:	4798      	blx	r3
 8007a52:	4603      	mov	r3, r0
 8007a54:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007a56:	e156      	b.n	8007d06 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007a58:	683b      	ldr	r3, [r7, #0]
 8007a5a:	785b      	ldrb	r3, [r3, #1]
 8007a5c:	2b03      	cmp	r3, #3
 8007a5e:	d008      	beq.n	8007a72 <USBD_StdEPReq+0x9a>
 8007a60:	2b03      	cmp	r3, #3
 8007a62:	f300 8145 	bgt.w	8007cf0 <USBD_StdEPReq+0x318>
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	f000 809b 	beq.w	8007ba2 <USBD_StdEPReq+0x1ca>
 8007a6c:	2b01      	cmp	r3, #1
 8007a6e:	d03c      	beq.n	8007aea <USBD_StdEPReq+0x112>
 8007a70:	e13e      	b.n	8007cf0 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a78:	b2db      	uxtb	r3, r3
 8007a7a:	2b02      	cmp	r3, #2
 8007a7c:	d002      	beq.n	8007a84 <USBD_StdEPReq+0xac>
 8007a7e:	2b03      	cmp	r3, #3
 8007a80:	d016      	beq.n	8007ab0 <USBD_StdEPReq+0xd8>
 8007a82:	e02c      	b.n	8007ade <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007a84:	7bbb      	ldrb	r3, [r7, #14]
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d00d      	beq.n	8007aa6 <USBD_StdEPReq+0xce>
 8007a8a:	7bbb      	ldrb	r3, [r7, #14]
 8007a8c:	2b80      	cmp	r3, #128	; 0x80
 8007a8e:	d00a      	beq.n	8007aa6 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007a90:	7bbb      	ldrb	r3, [r7, #14]
 8007a92:	4619      	mov	r1, r3
 8007a94:	6878      	ldr	r0, [r7, #4]
 8007a96:	f001 f96d 	bl	8008d74 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007a9a:	2180      	movs	r1, #128	; 0x80
 8007a9c:	6878      	ldr	r0, [r7, #4]
 8007a9e:	f001 f969 	bl	8008d74 <USBD_LL_StallEP>
 8007aa2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007aa4:	e020      	b.n	8007ae8 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8007aa6:	6839      	ldr	r1, [r7, #0]
 8007aa8:	6878      	ldr	r0, [r7, #4]
 8007aaa:	f000 fc7a 	bl	80083a2 <USBD_CtlError>
              break;
 8007aae:	e01b      	b.n	8007ae8 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007ab0:	683b      	ldr	r3, [r7, #0]
 8007ab2:	885b      	ldrh	r3, [r3, #2]
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d10e      	bne.n	8007ad6 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007ab8:	7bbb      	ldrb	r3, [r7, #14]
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d00b      	beq.n	8007ad6 <USBD_StdEPReq+0xfe>
 8007abe:	7bbb      	ldrb	r3, [r7, #14]
 8007ac0:	2b80      	cmp	r3, #128	; 0x80
 8007ac2:	d008      	beq.n	8007ad6 <USBD_StdEPReq+0xfe>
 8007ac4:	683b      	ldr	r3, [r7, #0]
 8007ac6:	88db      	ldrh	r3, [r3, #6]
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d104      	bne.n	8007ad6 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007acc:	7bbb      	ldrb	r3, [r7, #14]
 8007ace:	4619      	mov	r1, r3
 8007ad0:	6878      	ldr	r0, [r7, #4]
 8007ad2:	f001 f94f 	bl	8008d74 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8007ad6:	6878      	ldr	r0, [r7, #4]
 8007ad8:	f000 fd2e 	bl	8008538 <USBD_CtlSendStatus>

              break;
 8007adc:	e004      	b.n	8007ae8 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8007ade:	6839      	ldr	r1, [r7, #0]
 8007ae0:	6878      	ldr	r0, [r7, #4]
 8007ae2:	f000 fc5e 	bl	80083a2 <USBD_CtlError>
              break;
 8007ae6:	bf00      	nop
          }
          break;
 8007ae8:	e107      	b.n	8007cfa <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007af0:	b2db      	uxtb	r3, r3
 8007af2:	2b02      	cmp	r3, #2
 8007af4:	d002      	beq.n	8007afc <USBD_StdEPReq+0x124>
 8007af6:	2b03      	cmp	r3, #3
 8007af8:	d016      	beq.n	8007b28 <USBD_StdEPReq+0x150>
 8007afa:	e04b      	b.n	8007b94 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007afc:	7bbb      	ldrb	r3, [r7, #14]
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d00d      	beq.n	8007b1e <USBD_StdEPReq+0x146>
 8007b02:	7bbb      	ldrb	r3, [r7, #14]
 8007b04:	2b80      	cmp	r3, #128	; 0x80
 8007b06:	d00a      	beq.n	8007b1e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007b08:	7bbb      	ldrb	r3, [r7, #14]
 8007b0a:	4619      	mov	r1, r3
 8007b0c:	6878      	ldr	r0, [r7, #4]
 8007b0e:	f001 f931 	bl	8008d74 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007b12:	2180      	movs	r1, #128	; 0x80
 8007b14:	6878      	ldr	r0, [r7, #4]
 8007b16:	f001 f92d 	bl	8008d74 <USBD_LL_StallEP>
 8007b1a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007b1c:	e040      	b.n	8007ba0 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8007b1e:	6839      	ldr	r1, [r7, #0]
 8007b20:	6878      	ldr	r0, [r7, #4]
 8007b22:	f000 fc3e 	bl	80083a2 <USBD_CtlError>
              break;
 8007b26:	e03b      	b.n	8007ba0 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007b28:	683b      	ldr	r3, [r7, #0]
 8007b2a:	885b      	ldrh	r3, [r3, #2]
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d136      	bne.n	8007b9e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007b30:	7bbb      	ldrb	r3, [r7, #14]
 8007b32:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d004      	beq.n	8007b44 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007b3a:	7bbb      	ldrb	r3, [r7, #14]
 8007b3c:	4619      	mov	r1, r3
 8007b3e:	6878      	ldr	r0, [r7, #4]
 8007b40:	f001 f937 	bl	8008db2 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007b44:	6878      	ldr	r0, [r7, #4]
 8007b46:	f000 fcf7 	bl	8008538 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8007b4a:	7bbb      	ldrb	r3, [r7, #14]
 8007b4c:	4619      	mov	r1, r3
 8007b4e:	6878      	ldr	r0, [r7, #4]
 8007b50:	f7ff fde2 	bl	8007718 <USBD_CoreFindEP>
 8007b54:	4603      	mov	r3, r0
 8007b56:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007b58:	7b7b      	ldrb	r3, [r7, #13]
 8007b5a:	2bff      	cmp	r3, #255	; 0xff
 8007b5c:	d01f      	beq.n	8007b9e <USBD_StdEPReq+0x1c6>
 8007b5e:	7b7b      	ldrb	r3, [r7, #13]
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d11c      	bne.n	8007b9e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8007b64:	7b7a      	ldrb	r2, [r7, #13]
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8007b6c:	7b7a      	ldrb	r2, [r7, #13]
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	32ae      	adds	r2, #174	; 0xae
 8007b72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b76:	689b      	ldr	r3, [r3, #8]
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d010      	beq.n	8007b9e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007b7c:	7b7a      	ldrb	r2, [r7, #13]
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	32ae      	adds	r2, #174	; 0xae
 8007b82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b86:	689b      	ldr	r3, [r3, #8]
 8007b88:	6839      	ldr	r1, [r7, #0]
 8007b8a:	6878      	ldr	r0, [r7, #4]
 8007b8c:	4798      	blx	r3
 8007b8e:	4603      	mov	r3, r0
 8007b90:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8007b92:	e004      	b.n	8007b9e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8007b94:	6839      	ldr	r1, [r7, #0]
 8007b96:	6878      	ldr	r0, [r7, #4]
 8007b98:	f000 fc03 	bl	80083a2 <USBD_CtlError>
              break;
 8007b9c:	e000      	b.n	8007ba0 <USBD_StdEPReq+0x1c8>
              break;
 8007b9e:	bf00      	nop
          }
          break;
 8007ba0:	e0ab      	b.n	8007cfa <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ba8:	b2db      	uxtb	r3, r3
 8007baa:	2b02      	cmp	r3, #2
 8007bac:	d002      	beq.n	8007bb4 <USBD_StdEPReq+0x1dc>
 8007bae:	2b03      	cmp	r3, #3
 8007bb0:	d032      	beq.n	8007c18 <USBD_StdEPReq+0x240>
 8007bb2:	e097      	b.n	8007ce4 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007bb4:	7bbb      	ldrb	r3, [r7, #14]
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d007      	beq.n	8007bca <USBD_StdEPReq+0x1f2>
 8007bba:	7bbb      	ldrb	r3, [r7, #14]
 8007bbc:	2b80      	cmp	r3, #128	; 0x80
 8007bbe:	d004      	beq.n	8007bca <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8007bc0:	6839      	ldr	r1, [r7, #0]
 8007bc2:	6878      	ldr	r0, [r7, #4]
 8007bc4:	f000 fbed 	bl	80083a2 <USBD_CtlError>
                break;
 8007bc8:	e091      	b.n	8007cee <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007bca:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	da0b      	bge.n	8007bea <USBD_StdEPReq+0x212>
 8007bd2:	7bbb      	ldrb	r3, [r7, #14]
 8007bd4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007bd8:	4613      	mov	r3, r2
 8007bda:	009b      	lsls	r3, r3, #2
 8007bdc:	4413      	add	r3, r2
 8007bde:	009b      	lsls	r3, r3, #2
 8007be0:	3310      	adds	r3, #16
 8007be2:	687a      	ldr	r2, [r7, #4]
 8007be4:	4413      	add	r3, r2
 8007be6:	3304      	adds	r3, #4
 8007be8:	e00b      	b.n	8007c02 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007bea:	7bbb      	ldrb	r3, [r7, #14]
 8007bec:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007bf0:	4613      	mov	r3, r2
 8007bf2:	009b      	lsls	r3, r3, #2
 8007bf4:	4413      	add	r3, r2
 8007bf6:	009b      	lsls	r3, r3, #2
 8007bf8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007bfc:	687a      	ldr	r2, [r7, #4]
 8007bfe:	4413      	add	r3, r2
 8007c00:	3304      	adds	r3, #4
 8007c02:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007c04:	68bb      	ldr	r3, [r7, #8]
 8007c06:	2200      	movs	r2, #0
 8007c08:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007c0a:	68bb      	ldr	r3, [r7, #8]
 8007c0c:	2202      	movs	r2, #2
 8007c0e:	4619      	mov	r1, r3
 8007c10:	6878      	ldr	r0, [r7, #4]
 8007c12:	f000 fc37 	bl	8008484 <USBD_CtlSendData>
              break;
 8007c16:	e06a      	b.n	8007cee <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007c18:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	da11      	bge.n	8007c44 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007c20:	7bbb      	ldrb	r3, [r7, #14]
 8007c22:	f003 020f 	and.w	r2, r3, #15
 8007c26:	6879      	ldr	r1, [r7, #4]
 8007c28:	4613      	mov	r3, r2
 8007c2a:	009b      	lsls	r3, r3, #2
 8007c2c:	4413      	add	r3, r2
 8007c2e:	009b      	lsls	r3, r3, #2
 8007c30:	440b      	add	r3, r1
 8007c32:	3324      	adds	r3, #36	; 0x24
 8007c34:	881b      	ldrh	r3, [r3, #0]
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d117      	bne.n	8007c6a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007c3a:	6839      	ldr	r1, [r7, #0]
 8007c3c:	6878      	ldr	r0, [r7, #4]
 8007c3e:	f000 fbb0 	bl	80083a2 <USBD_CtlError>
                  break;
 8007c42:	e054      	b.n	8007cee <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007c44:	7bbb      	ldrb	r3, [r7, #14]
 8007c46:	f003 020f 	and.w	r2, r3, #15
 8007c4a:	6879      	ldr	r1, [r7, #4]
 8007c4c:	4613      	mov	r3, r2
 8007c4e:	009b      	lsls	r3, r3, #2
 8007c50:	4413      	add	r3, r2
 8007c52:	009b      	lsls	r3, r3, #2
 8007c54:	440b      	add	r3, r1
 8007c56:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007c5a:	881b      	ldrh	r3, [r3, #0]
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d104      	bne.n	8007c6a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007c60:	6839      	ldr	r1, [r7, #0]
 8007c62:	6878      	ldr	r0, [r7, #4]
 8007c64:	f000 fb9d 	bl	80083a2 <USBD_CtlError>
                  break;
 8007c68:	e041      	b.n	8007cee <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007c6a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	da0b      	bge.n	8007c8a <USBD_StdEPReq+0x2b2>
 8007c72:	7bbb      	ldrb	r3, [r7, #14]
 8007c74:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007c78:	4613      	mov	r3, r2
 8007c7a:	009b      	lsls	r3, r3, #2
 8007c7c:	4413      	add	r3, r2
 8007c7e:	009b      	lsls	r3, r3, #2
 8007c80:	3310      	adds	r3, #16
 8007c82:	687a      	ldr	r2, [r7, #4]
 8007c84:	4413      	add	r3, r2
 8007c86:	3304      	adds	r3, #4
 8007c88:	e00b      	b.n	8007ca2 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007c8a:	7bbb      	ldrb	r3, [r7, #14]
 8007c8c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007c90:	4613      	mov	r3, r2
 8007c92:	009b      	lsls	r3, r3, #2
 8007c94:	4413      	add	r3, r2
 8007c96:	009b      	lsls	r3, r3, #2
 8007c98:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007c9c:	687a      	ldr	r2, [r7, #4]
 8007c9e:	4413      	add	r3, r2
 8007ca0:	3304      	adds	r3, #4
 8007ca2:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007ca4:	7bbb      	ldrb	r3, [r7, #14]
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d002      	beq.n	8007cb0 <USBD_StdEPReq+0x2d8>
 8007caa:	7bbb      	ldrb	r3, [r7, #14]
 8007cac:	2b80      	cmp	r3, #128	; 0x80
 8007cae:	d103      	bne.n	8007cb8 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8007cb0:	68bb      	ldr	r3, [r7, #8]
 8007cb2:	2200      	movs	r2, #0
 8007cb4:	601a      	str	r2, [r3, #0]
 8007cb6:	e00e      	b.n	8007cd6 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007cb8:	7bbb      	ldrb	r3, [r7, #14]
 8007cba:	4619      	mov	r1, r3
 8007cbc:	6878      	ldr	r0, [r7, #4]
 8007cbe:	f001 f897 	bl	8008df0 <USBD_LL_IsStallEP>
 8007cc2:	4603      	mov	r3, r0
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d003      	beq.n	8007cd0 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8007cc8:	68bb      	ldr	r3, [r7, #8]
 8007cca:	2201      	movs	r2, #1
 8007ccc:	601a      	str	r2, [r3, #0]
 8007cce:	e002      	b.n	8007cd6 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8007cd0:	68bb      	ldr	r3, [r7, #8]
 8007cd2:	2200      	movs	r2, #0
 8007cd4:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007cd6:	68bb      	ldr	r3, [r7, #8]
 8007cd8:	2202      	movs	r2, #2
 8007cda:	4619      	mov	r1, r3
 8007cdc:	6878      	ldr	r0, [r7, #4]
 8007cde:	f000 fbd1 	bl	8008484 <USBD_CtlSendData>
              break;
 8007ce2:	e004      	b.n	8007cee <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8007ce4:	6839      	ldr	r1, [r7, #0]
 8007ce6:	6878      	ldr	r0, [r7, #4]
 8007ce8:	f000 fb5b 	bl	80083a2 <USBD_CtlError>
              break;
 8007cec:	bf00      	nop
          }
          break;
 8007cee:	e004      	b.n	8007cfa <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8007cf0:	6839      	ldr	r1, [r7, #0]
 8007cf2:	6878      	ldr	r0, [r7, #4]
 8007cf4:	f000 fb55 	bl	80083a2 <USBD_CtlError>
          break;
 8007cf8:	bf00      	nop
      }
      break;
 8007cfa:	e005      	b.n	8007d08 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8007cfc:	6839      	ldr	r1, [r7, #0]
 8007cfe:	6878      	ldr	r0, [r7, #4]
 8007d00:	f000 fb4f 	bl	80083a2 <USBD_CtlError>
      break;
 8007d04:	e000      	b.n	8007d08 <USBD_StdEPReq+0x330>
      break;
 8007d06:	bf00      	nop
  }

  return ret;
 8007d08:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d0a:	4618      	mov	r0, r3
 8007d0c:	3710      	adds	r7, #16
 8007d0e:	46bd      	mov	sp, r7
 8007d10:	bd80      	pop	{r7, pc}
	...

08007d14 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007d14:	b580      	push	{r7, lr}
 8007d16:	b084      	sub	sp, #16
 8007d18:	af00      	add	r7, sp, #0
 8007d1a:	6078      	str	r0, [r7, #4]
 8007d1c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007d1e:	2300      	movs	r3, #0
 8007d20:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007d22:	2300      	movs	r3, #0
 8007d24:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007d26:	2300      	movs	r3, #0
 8007d28:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007d2a:	683b      	ldr	r3, [r7, #0]
 8007d2c:	885b      	ldrh	r3, [r3, #2]
 8007d2e:	0a1b      	lsrs	r3, r3, #8
 8007d30:	b29b      	uxth	r3, r3
 8007d32:	3b01      	subs	r3, #1
 8007d34:	2b06      	cmp	r3, #6
 8007d36:	f200 8128 	bhi.w	8007f8a <USBD_GetDescriptor+0x276>
 8007d3a:	a201      	add	r2, pc, #4	; (adr r2, 8007d40 <USBD_GetDescriptor+0x2c>)
 8007d3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d40:	08007d5d 	.word	0x08007d5d
 8007d44:	08007d75 	.word	0x08007d75
 8007d48:	08007db5 	.word	0x08007db5
 8007d4c:	08007f8b 	.word	0x08007f8b
 8007d50:	08007f8b 	.word	0x08007f8b
 8007d54:	08007f2b 	.word	0x08007f2b
 8007d58:	08007f57 	.word	0x08007f57
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	687a      	ldr	r2, [r7, #4]
 8007d66:	7c12      	ldrb	r2, [r2, #16]
 8007d68:	f107 0108 	add.w	r1, r7, #8
 8007d6c:	4610      	mov	r0, r2
 8007d6e:	4798      	blx	r3
 8007d70:	60f8      	str	r0, [r7, #12]
      break;
 8007d72:	e112      	b.n	8007f9a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	7c1b      	ldrb	r3, [r3, #16]
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d10d      	bne.n	8007d98 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d84:	f107 0208 	add.w	r2, r7, #8
 8007d88:	4610      	mov	r0, r2
 8007d8a:	4798      	blx	r3
 8007d8c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	3301      	adds	r3, #1
 8007d92:	2202      	movs	r2, #2
 8007d94:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007d96:	e100      	b.n	8007f9a <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007da0:	f107 0208 	add.w	r2, r7, #8
 8007da4:	4610      	mov	r0, r2
 8007da6:	4798      	blx	r3
 8007da8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	3301      	adds	r3, #1
 8007dae:	2202      	movs	r2, #2
 8007db0:	701a      	strb	r2, [r3, #0]
      break;
 8007db2:	e0f2      	b.n	8007f9a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007db4:	683b      	ldr	r3, [r7, #0]
 8007db6:	885b      	ldrh	r3, [r3, #2]
 8007db8:	b2db      	uxtb	r3, r3
 8007dba:	2b05      	cmp	r3, #5
 8007dbc:	f200 80ac 	bhi.w	8007f18 <USBD_GetDescriptor+0x204>
 8007dc0:	a201      	add	r2, pc, #4	; (adr r2, 8007dc8 <USBD_GetDescriptor+0xb4>)
 8007dc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007dc6:	bf00      	nop
 8007dc8:	08007de1 	.word	0x08007de1
 8007dcc:	08007e15 	.word	0x08007e15
 8007dd0:	08007e49 	.word	0x08007e49
 8007dd4:	08007e7d 	.word	0x08007e7d
 8007dd8:	08007eb1 	.word	0x08007eb1
 8007ddc:	08007ee5 	.word	0x08007ee5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007de6:	685b      	ldr	r3, [r3, #4]
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d00b      	beq.n	8007e04 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007df2:	685b      	ldr	r3, [r3, #4]
 8007df4:	687a      	ldr	r2, [r7, #4]
 8007df6:	7c12      	ldrb	r2, [r2, #16]
 8007df8:	f107 0108 	add.w	r1, r7, #8
 8007dfc:	4610      	mov	r0, r2
 8007dfe:	4798      	blx	r3
 8007e00:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007e02:	e091      	b.n	8007f28 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007e04:	6839      	ldr	r1, [r7, #0]
 8007e06:	6878      	ldr	r0, [r7, #4]
 8007e08:	f000 facb 	bl	80083a2 <USBD_CtlError>
            err++;
 8007e0c:	7afb      	ldrb	r3, [r7, #11]
 8007e0e:	3301      	adds	r3, #1
 8007e10:	72fb      	strb	r3, [r7, #11]
          break;
 8007e12:	e089      	b.n	8007f28 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e1a:	689b      	ldr	r3, [r3, #8]
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d00b      	beq.n	8007e38 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e26:	689b      	ldr	r3, [r3, #8]
 8007e28:	687a      	ldr	r2, [r7, #4]
 8007e2a:	7c12      	ldrb	r2, [r2, #16]
 8007e2c:	f107 0108 	add.w	r1, r7, #8
 8007e30:	4610      	mov	r0, r2
 8007e32:	4798      	blx	r3
 8007e34:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007e36:	e077      	b.n	8007f28 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007e38:	6839      	ldr	r1, [r7, #0]
 8007e3a:	6878      	ldr	r0, [r7, #4]
 8007e3c:	f000 fab1 	bl	80083a2 <USBD_CtlError>
            err++;
 8007e40:	7afb      	ldrb	r3, [r7, #11]
 8007e42:	3301      	adds	r3, #1
 8007e44:	72fb      	strb	r3, [r7, #11]
          break;
 8007e46:	e06f      	b.n	8007f28 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e4e:	68db      	ldr	r3, [r3, #12]
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d00b      	beq.n	8007e6c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e5a:	68db      	ldr	r3, [r3, #12]
 8007e5c:	687a      	ldr	r2, [r7, #4]
 8007e5e:	7c12      	ldrb	r2, [r2, #16]
 8007e60:	f107 0108 	add.w	r1, r7, #8
 8007e64:	4610      	mov	r0, r2
 8007e66:	4798      	blx	r3
 8007e68:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007e6a:	e05d      	b.n	8007f28 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007e6c:	6839      	ldr	r1, [r7, #0]
 8007e6e:	6878      	ldr	r0, [r7, #4]
 8007e70:	f000 fa97 	bl	80083a2 <USBD_CtlError>
            err++;
 8007e74:	7afb      	ldrb	r3, [r7, #11]
 8007e76:	3301      	adds	r3, #1
 8007e78:	72fb      	strb	r3, [r7, #11]
          break;
 8007e7a:	e055      	b.n	8007f28 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e82:	691b      	ldr	r3, [r3, #16]
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d00b      	beq.n	8007ea0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e8e:	691b      	ldr	r3, [r3, #16]
 8007e90:	687a      	ldr	r2, [r7, #4]
 8007e92:	7c12      	ldrb	r2, [r2, #16]
 8007e94:	f107 0108 	add.w	r1, r7, #8
 8007e98:	4610      	mov	r0, r2
 8007e9a:	4798      	blx	r3
 8007e9c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007e9e:	e043      	b.n	8007f28 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007ea0:	6839      	ldr	r1, [r7, #0]
 8007ea2:	6878      	ldr	r0, [r7, #4]
 8007ea4:	f000 fa7d 	bl	80083a2 <USBD_CtlError>
            err++;
 8007ea8:	7afb      	ldrb	r3, [r7, #11]
 8007eaa:	3301      	adds	r3, #1
 8007eac:	72fb      	strb	r3, [r7, #11]
          break;
 8007eae:	e03b      	b.n	8007f28 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007eb6:	695b      	ldr	r3, [r3, #20]
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d00b      	beq.n	8007ed4 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ec2:	695b      	ldr	r3, [r3, #20]
 8007ec4:	687a      	ldr	r2, [r7, #4]
 8007ec6:	7c12      	ldrb	r2, [r2, #16]
 8007ec8:	f107 0108 	add.w	r1, r7, #8
 8007ecc:	4610      	mov	r0, r2
 8007ece:	4798      	blx	r3
 8007ed0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007ed2:	e029      	b.n	8007f28 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007ed4:	6839      	ldr	r1, [r7, #0]
 8007ed6:	6878      	ldr	r0, [r7, #4]
 8007ed8:	f000 fa63 	bl	80083a2 <USBD_CtlError>
            err++;
 8007edc:	7afb      	ldrb	r3, [r7, #11]
 8007ede:	3301      	adds	r3, #1
 8007ee0:	72fb      	strb	r3, [r7, #11]
          break;
 8007ee2:	e021      	b.n	8007f28 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007eea:	699b      	ldr	r3, [r3, #24]
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d00b      	beq.n	8007f08 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ef6:	699b      	ldr	r3, [r3, #24]
 8007ef8:	687a      	ldr	r2, [r7, #4]
 8007efa:	7c12      	ldrb	r2, [r2, #16]
 8007efc:	f107 0108 	add.w	r1, r7, #8
 8007f00:	4610      	mov	r0, r2
 8007f02:	4798      	blx	r3
 8007f04:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007f06:	e00f      	b.n	8007f28 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007f08:	6839      	ldr	r1, [r7, #0]
 8007f0a:	6878      	ldr	r0, [r7, #4]
 8007f0c:	f000 fa49 	bl	80083a2 <USBD_CtlError>
            err++;
 8007f10:	7afb      	ldrb	r3, [r7, #11]
 8007f12:	3301      	adds	r3, #1
 8007f14:	72fb      	strb	r3, [r7, #11]
          break;
 8007f16:	e007      	b.n	8007f28 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007f18:	6839      	ldr	r1, [r7, #0]
 8007f1a:	6878      	ldr	r0, [r7, #4]
 8007f1c:	f000 fa41 	bl	80083a2 <USBD_CtlError>
          err++;
 8007f20:	7afb      	ldrb	r3, [r7, #11]
 8007f22:	3301      	adds	r3, #1
 8007f24:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8007f26:	bf00      	nop
      }
      break;
 8007f28:	e037      	b.n	8007f9a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	7c1b      	ldrb	r3, [r3, #16]
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d109      	bne.n	8007f46 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f3a:	f107 0208 	add.w	r2, r7, #8
 8007f3e:	4610      	mov	r0, r2
 8007f40:	4798      	blx	r3
 8007f42:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007f44:	e029      	b.n	8007f9a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007f46:	6839      	ldr	r1, [r7, #0]
 8007f48:	6878      	ldr	r0, [r7, #4]
 8007f4a:	f000 fa2a 	bl	80083a2 <USBD_CtlError>
        err++;
 8007f4e:	7afb      	ldrb	r3, [r7, #11]
 8007f50:	3301      	adds	r3, #1
 8007f52:	72fb      	strb	r3, [r7, #11]
      break;
 8007f54:	e021      	b.n	8007f9a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	7c1b      	ldrb	r3, [r3, #16]
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d10d      	bne.n	8007f7a <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f66:	f107 0208 	add.w	r2, r7, #8
 8007f6a:	4610      	mov	r0, r2
 8007f6c:	4798      	blx	r3
 8007f6e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	3301      	adds	r3, #1
 8007f74:	2207      	movs	r2, #7
 8007f76:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007f78:	e00f      	b.n	8007f9a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007f7a:	6839      	ldr	r1, [r7, #0]
 8007f7c:	6878      	ldr	r0, [r7, #4]
 8007f7e:	f000 fa10 	bl	80083a2 <USBD_CtlError>
        err++;
 8007f82:	7afb      	ldrb	r3, [r7, #11]
 8007f84:	3301      	adds	r3, #1
 8007f86:	72fb      	strb	r3, [r7, #11]
      break;
 8007f88:	e007      	b.n	8007f9a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007f8a:	6839      	ldr	r1, [r7, #0]
 8007f8c:	6878      	ldr	r0, [r7, #4]
 8007f8e:	f000 fa08 	bl	80083a2 <USBD_CtlError>
      err++;
 8007f92:	7afb      	ldrb	r3, [r7, #11]
 8007f94:	3301      	adds	r3, #1
 8007f96:	72fb      	strb	r3, [r7, #11]
      break;
 8007f98:	bf00      	nop
  }

  if (err != 0U)
 8007f9a:	7afb      	ldrb	r3, [r7, #11]
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d11e      	bne.n	8007fde <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8007fa0:	683b      	ldr	r3, [r7, #0]
 8007fa2:	88db      	ldrh	r3, [r3, #6]
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d016      	beq.n	8007fd6 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8007fa8:	893b      	ldrh	r3, [r7, #8]
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d00e      	beq.n	8007fcc <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8007fae:	683b      	ldr	r3, [r7, #0]
 8007fb0:	88da      	ldrh	r2, [r3, #6]
 8007fb2:	893b      	ldrh	r3, [r7, #8]
 8007fb4:	4293      	cmp	r3, r2
 8007fb6:	bf28      	it	cs
 8007fb8:	4613      	movcs	r3, r2
 8007fba:	b29b      	uxth	r3, r3
 8007fbc:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007fbe:	893b      	ldrh	r3, [r7, #8]
 8007fc0:	461a      	mov	r2, r3
 8007fc2:	68f9      	ldr	r1, [r7, #12]
 8007fc4:	6878      	ldr	r0, [r7, #4]
 8007fc6:	f000 fa5d 	bl	8008484 <USBD_CtlSendData>
 8007fca:	e009      	b.n	8007fe0 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8007fcc:	6839      	ldr	r1, [r7, #0]
 8007fce:	6878      	ldr	r0, [r7, #4]
 8007fd0:	f000 f9e7 	bl	80083a2 <USBD_CtlError>
 8007fd4:	e004      	b.n	8007fe0 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8007fd6:	6878      	ldr	r0, [r7, #4]
 8007fd8:	f000 faae 	bl	8008538 <USBD_CtlSendStatus>
 8007fdc:	e000      	b.n	8007fe0 <USBD_GetDescriptor+0x2cc>
    return;
 8007fde:	bf00      	nop
  }
}
 8007fe0:	3710      	adds	r7, #16
 8007fe2:	46bd      	mov	sp, r7
 8007fe4:	bd80      	pop	{r7, pc}
 8007fe6:	bf00      	nop

08007fe8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007fe8:	b580      	push	{r7, lr}
 8007fea:	b084      	sub	sp, #16
 8007fec:	af00      	add	r7, sp, #0
 8007fee:	6078      	str	r0, [r7, #4]
 8007ff0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007ff2:	683b      	ldr	r3, [r7, #0]
 8007ff4:	889b      	ldrh	r3, [r3, #4]
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d131      	bne.n	800805e <USBD_SetAddress+0x76>
 8007ffa:	683b      	ldr	r3, [r7, #0]
 8007ffc:	88db      	ldrh	r3, [r3, #6]
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d12d      	bne.n	800805e <USBD_SetAddress+0x76>
 8008002:	683b      	ldr	r3, [r7, #0]
 8008004:	885b      	ldrh	r3, [r3, #2]
 8008006:	2b7f      	cmp	r3, #127	; 0x7f
 8008008:	d829      	bhi.n	800805e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800800a:	683b      	ldr	r3, [r7, #0]
 800800c:	885b      	ldrh	r3, [r3, #2]
 800800e:	b2db      	uxtb	r3, r3
 8008010:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008014:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800801c:	b2db      	uxtb	r3, r3
 800801e:	2b03      	cmp	r3, #3
 8008020:	d104      	bne.n	800802c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8008022:	6839      	ldr	r1, [r7, #0]
 8008024:	6878      	ldr	r0, [r7, #4]
 8008026:	f000 f9bc 	bl	80083a2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800802a:	e01d      	b.n	8008068 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	7bfa      	ldrb	r2, [r7, #15]
 8008030:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008034:	7bfb      	ldrb	r3, [r7, #15]
 8008036:	4619      	mov	r1, r3
 8008038:	6878      	ldr	r0, [r7, #4]
 800803a:	f000 ff05 	bl	8008e48 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800803e:	6878      	ldr	r0, [r7, #4]
 8008040:	f000 fa7a 	bl	8008538 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008044:	7bfb      	ldrb	r3, [r7, #15]
 8008046:	2b00      	cmp	r3, #0
 8008048:	d004      	beq.n	8008054 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	2202      	movs	r2, #2
 800804e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008052:	e009      	b.n	8008068 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	2201      	movs	r2, #1
 8008058:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800805c:	e004      	b.n	8008068 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800805e:	6839      	ldr	r1, [r7, #0]
 8008060:	6878      	ldr	r0, [r7, #4]
 8008062:	f000 f99e 	bl	80083a2 <USBD_CtlError>
  }
}
 8008066:	bf00      	nop
 8008068:	bf00      	nop
 800806a:	3710      	adds	r7, #16
 800806c:	46bd      	mov	sp, r7
 800806e:	bd80      	pop	{r7, pc}

08008070 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008070:	b580      	push	{r7, lr}
 8008072:	b084      	sub	sp, #16
 8008074:	af00      	add	r7, sp, #0
 8008076:	6078      	str	r0, [r7, #4]
 8008078:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800807a:	2300      	movs	r3, #0
 800807c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800807e:	683b      	ldr	r3, [r7, #0]
 8008080:	885b      	ldrh	r3, [r3, #2]
 8008082:	b2da      	uxtb	r2, r3
 8008084:	4b4e      	ldr	r3, [pc, #312]	; (80081c0 <USBD_SetConfig+0x150>)
 8008086:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008088:	4b4d      	ldr	r3, [pc, #308]	; (80081c0 <USBD_SetConfig+0x150>)
 800808a:	781b      	ldrb	r3, [r3, #0]
 800808c:	2b01      	cmp	r3, #1
 800808e:	d905      	bls.n	800809c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008090:	6839      	ldr	r1, [r7, #0]
 8008092:	6878      	ldr	r0, [r7, #4]
 8008094:	f000 f985 	bl	80083a2 <USBD_CtlError>
    return USBD_FAIL;
 8008098:	2303      	movs	r3, #3
 800809a:	e08c      	b.n	80081b6 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80080a2:	b2db      	uxtb	r3, r3
 80080a4:	2b02      	cmp	r3, #2
 80080a6:	d002      	beq.n	80080ae <USBD_SetConfig+0x3e>
 80080a8:	2b03      	cmp	r3, #3
 80080aa:	d029      	beq.n	8008100 <USBD_SetConfig+0x90>
 80080ac:	e075      	b.n	800819a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80080ae:	4b44      	ldr	r3, [pc, #272]	; (80081c0 <USBD_SetConfig+0x150>)
 80080b0:	781b      	ldrb	r3, [r3, #0]
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d020      	beq.n	80080f8 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80080b6:	4b42      	ldr	r3, [pc, #264]	; (80081c0 <USBD_SetConfig+0x150>)
 80080b8:	781b      	ldrb	r3, [r3, #0]
 80080ba:	461a      	mov	r2, r3
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80080c0:	4b3f      	ldr	r3, [pc, #252]	; (80081c0 <USBD_SetConfig+0x150>)
 80080c2:	781b      	ldrb	r3, [r3, #0]
 80080c4:	4619      	mov	r1, r3
 80080c6:	6878      	ldr	r0, [r7, #4]
 80080c8:	f7fe ffe7 	bl	800709a <USBD_SetClassConfig>
 80080cc:	4603      	mov	r3, r0
 80080ce:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80080d0:	7bfb      	ldrb	r3, [r7, #15]
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d008      	beq.n	80080e8 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80080d6:	6839      	ldr	r1, [r7, #0]
 80080d8:	6878      	ldr	r0, [r7, #4]
 80080da:	f000 f962 	bl	80083a2 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	2202      	movs	r2, #2
 80080e2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80080e6:	e065      	b.n	80081b4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80080e8:	6878      	ldr	r0, [r7, #4]
 80080ea:	f000 fa25 	bl	8008538 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	2203      	movs	r2, #3
 80080f2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80080f6:	e05d      	b.n	80081b4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80080f8:	6878      	ldr	r0, [r7, #4]
 80080fa:	f000 fa1d 	bl	8008538 <USBD_CtlSendStatus>
      break;
 80080fe:	e059      	b.n	80081b4 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8008100:	4b2f      	ldr	r3, [pc, #188]	; (80081c0 <USBD_SetConfig+0x150>)
 8008102:	781b      	ldrb	r3, [r3, #0]
 8008104:	2b00      	cmp	r3, #0
 8008106:	d112      	bne.n	800812e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	2202      	movs	r2, #2
 800810c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8008110:	4b2b      	ldr	r3, [pc, #172]	; (80081c0 <USBD_SetConfig+0x150>)
 8008112:	781b      	ldrb	r3, [r3, #0]
 8008114:	461a      	mov	r2, r3
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800811a:	4b29      	ldr	r3, [pc, #164]	; (80081c0 <USBD_SetConfig+0x150>)
 800811c:	781b      	ldrb	r3, [r3, #0]
 800811e:	4619      	mov	r1, r3
 8008120:	6878      	ldr	r0, [r7, #4]
 8008122:	f7fe ffd6 	bl	80070d2 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8008126:	6878      	ldr	r0, [r7, #4]
 8008128:	f000 fa06 	bl	8008538 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800812c:	e042      	b.n	80081b4 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800812e:	4b24      	ldr	r3, [pc, #144]	; (80081c0 <USBD_SetConfig+0x150>)
 8008130:	781b      	ldrb	r3, [r3, #0]
 8008132:	461a      	mov	r2, r3
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	685b      	ldr	r3, [r3, #4]
 8008138:	429a      	cmp	r2, r3
 800813a:	d02a      	beq.n	8008192 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	685b      	ldr	r3, [r3, #4]
 8008140:	b2db      	uxtb	r3, r3
 8008142:	4619      	mov	r1, r3
 8008144:	6878      	ldr	r0, [r7, #4]
 8008146:	f7fe ffc4 	bl	80070d2 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800814a:	4b1d      	ldr	r3, [pc, #116]	; (80081c0 <USBD_SetConfig+0x150>)
 800814c:	781b      	ldrb	r3, [r3, #0]
 800814e:	461a      	mov	r2, r3
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008154:	4b1a      	ldr	r3, [pc, #104]	; (80081c0 <USBD_SetConfig+0x150>)
 8008156:	781b      	ldrb	r3, [r3, #0]
 8008158:	4619      	mov	r1, r3
 800815a:	6878      	ldr	r0, [r7, #4]
 800815c:	f7fe ff9d 	bl	800709a <USBD_SetClassConfig>
 8008160:	4603      	mov	r3, r0
 8008162:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8008164:	7bfb      	ldrb	r3, [r7, #15]
 8008166:	2b00      	cmp	r3, #0
 8008168:	d00f      	beq.n	800818a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800816a:	6839      	ldr	r1, [r7, #0]
 800816c:	6878      	ldr	r0, [r7, #4]
 800816e:	f000 f918 	bl	80083a2 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	685b      	ldr	r3, [r3, #4]
 8008176:	b2db      	uxtb	r3, r3
 8008178:	4619      	mov	r1, r3
 800817a:	6878      	ldr	r0, [r7, #4]
 800817c:	f7fe ffa9 	bl	80070d2 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	2202      	movs	r2, #2
 8008184:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008188:	e014      	b.n	80081b4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800818a:	6878      	ldr	r0, [r7, #4]
 800818c:	f000 f9d4 	bl	8008538 <USBD_CtlSendStatus>
      break;
 8008190:	e010      	b.n	80081b4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008192:	6878      	ldr	r0, [r7, #4]
 8008194:	f000 f9d0 	bl	8008538 <USBD_CtlSendStatus>
      break;
 8008198:	e00c      	b.n	80081b4 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800819a:	6839      	ldr	r1, [r7, #0]
 800819c:	6878      	ldr	r0, [r7, #4]
 800819e:	f000 f900 	bl	80083a2 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80081a2:	4b07      	ldr	r3, [pc, #28]	; (80081c0 <USBD_SetConfig+0x150>)
 80081a4:	781b      	ldrb	r3, [r3, #0]
 80081a6:	4619      	mov	r1, r3
 80081a8:	6878      	ldr	r0, [r7, #4]
 80081aa:	f7fe ff92 	bl	80070d2 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80081ae:	2303      	movs	r3, #3
 80081b0:	73fb      	strb	r3, [r7, #15]
      break;
 80081b2:	bf00      	nop
  }

  return ret;
 80081b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80081b6:	4618      	mov	r0, r3
 80081b8:	3710      	adds	r7, #16
 80081ba:	46bd      	mov	sp, r7
 80081bc:	bd80      	pop	{r7, pc}
 80081be:	bf00      	nop
 80081c0:	200008cc 	.word	0x200008cc

080081c4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80081c4:	b580      	push	{r7, lr}
 80081c6:	b082      	sub	sp, #8
 80081c8:	af00      	add	r7, sp, #0
 80081ca:	6078      	str	r0, [r7, #4]
 80081cc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80081ce:	683b      	ldr	r3, [r7, #0]
 80081d0:	88db      	ldrh	r3, [r3, #6]
 80081d2:	2b01      	cmp	r3, #1
 80081d4:	d004      	beq.n	80081e0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80081d6:	6839      	ldr	r1, [r7, #0]
 80081d8:	6878      	ldr	r0, [r7, #4]
 80081da:	f000 f8e2 	bl	80083a2 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80081de:	e023      	b.n	8008228 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80081e6:	b2db      	uxtb	r3, r3
 80081e8:	2b02      	cmp	r3, #2
 80081ea:	dc02      	bgt.n	80081f2 <USBD_GetConfig+0x2e>
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	dc03      	bgt.n	80081f8 <USBD_GetConfig+0x34>
 80081f0:	e015      	b.n	800821e <USBD_GetConfig+0x5a>
 80081f2:	2b03      	cmp	r3, #3
 80081f4:	d00b      	beq.n	800820e <USBD_GetConfig+0x4a>
 80081f6:	e012      	b.n	800821e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	2200      	movs	r2, #0
 80081fc:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	3308      	adds	r3, #8
 8008202:	2201      	movs	r2, #1
 8008204:	4619      	mov	r1, r3
 8008206:	6878      	ldr	r0, [r7, #4]
 8008208:	f000 f93c 	bl	8008484 <USBD_CtlSendData>
        break;
 800820c:	e00c      	b.n	8008228 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	3304      	adds	r3, #4
 8008212:	2201      	movs	r2, #1
 8008214:	4619      	mov	r1, r3
 8008216:	6878      	ldr	r0, [r7, #4]
 8008218:	f000 f934 	bl	8008484 <USBD_CtlSendData>
        break;
 800821c:	e004      	b.n	8008228 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800821e:	6839      	ldr	r1, [r7, #0]
 8008220:	6878      	ldr	r0, [r7, #4]
 8008222:	f000 f8be 	bl	80083a2 <USBD_CtlError>
        break;
 8008226:	bf00      	nop
}
 8008228:	bf00      	nop
 800822a:	3708      	adds	r7, #8
 800822c:	46bd      	mov	sp, r7
 800822e:	bd80      	pop	{r7, pc}

08008230 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008230:	b580      	push	{r7, lr}
 8008232:	b082      	sub	sp, #8
 8008234:	af00      	add	r7, sp, #0
 8008236:	6078      	str	r0, [r7, #4]
 8008238:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008240:	b2db      	uxtb	r3, r3
 8008242:	3b01      	subs	r3, #1
 8008244:	2b02      	cmp	r3, #2
 8008246:	d81e      	bhi.n	8008286 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008248:	683b      	ldr	r3, [r7, #0]
 800824a:	88db      	ldrh	r3, [r3, #6]
 800824c:	2b02      	cmp	r3, #2
 800824e:	d004      	beq.n	800825a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008250:	6839      	ldr	r1, [r7, #0]
 8008252:	6878      	ldr	r0, [r7, #4]
 8008254:	f000 f8a5 	bl	80083a2 <USBD_CtlError>
        break;
 8008258:	e01a      	b.n	8008290 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	2201      	movs	r2, #1
 800825e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008266:	2b00      	cmp	r3, #0
 8008268:	d005      	beq.n	8008276 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	68db      	ldr	r3, [r3, #12]
 800826e:	f043 0202 	orr.w	r2, r3, #2
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	330c      	adds	r3, #12
 800827a:	2202      	movs	r2, #2
 800827c:	4619      	mov	r1, r3
 800827e:	6878      	ldr	r0, [r7, #4]
 8008280:	f000 f900 	bl	8008484 <USBD_CtlSendData>
      break;
 8008284:	e004      	b.n	8008290 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8008286:	6839      	ldr	r1, [r7, #0]
 8008288:	6878      	ldr	r0, [r7, #4]
 800828a:	f000 f88a 	bl	80083a2 <USBD_CtlError>
      break;
 800828e:	bf00      	nop
  }
}
 8008290:	bf00      	nop
 8008292:	3708      	adds	r7, #8
 8008294:	46bd      	mov	sp, r7
 8008296:	bd80      	pop	{r7, pc}

08008298 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008298:	b580      	push	{r7, lr}
 800829a:	b082      	sub	sp, #8
 800829c:	af00      	add	r7, sp, #0
 800829e:	6078      	str	r0, [r7, #4]
 80082a0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80082a2:	683b      	ldr	r3, [r7, #0]
 80082a4:	885b      	ldrh	r3, [r3, #2]
 80082a6:	2b01      	cmp	r3, #1
 80082a8:	d107      	bne.n	80082ba <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	2201      	movs	r2, #1
 80082ae:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80082b2:	6878      	ldr	r0, [r7, #4]
 80082b4:	f000 f940 	bl	8008538 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80082b8:	e013      	b.n	80082e2 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80082ba:	683b      	ldr	r3, [r7, #0]
 80082bc:	885b      	ldrh	r3, [r3, #2]
 80082be:	2b02      	cmp	r3, #2
 80082c0:	d10b      	bne.n	80082da <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 80082c2:	683b      	ldr	r3, [r7, #0]
 80082c4:	889b      	ldrh	r3, [r3, #4]
 80082c6:	0a1b      	lsrs	r3, r3, #8
 80082c8:	b29b      	uxth	r3, r3
 80082ca:	b2da      	uxtb	r2, r3
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80082d2:	6878      	ldr	r0, [r7, #4]
 80082d4:	f000 f930 	bl	8008538 <USBD_CtlSendStatus>
}
 80082d8:	e003      	b.n	80082e2 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80082da:	6839      	ldr	r1, [r7, #0]
 80082dc:	6878      	ldr	r0, [r7, #4]
 80082de:	f000 f860 	bl	80083a2 <USBD_CtlError>
}
 80082e2:	bf00      	nop
 80082e4:	3708      	adds	r7, #8
 80082e6:	46bd      	mov	sp, r7
 80082e8:	bd80      	pop	{r7, pc}

080082ea <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80082ea:	b580      	push	{r7, lr}
 80082ec:	b082      	sub	sp, #8
 80082ee:	af00      	add	r7, sp, #0
 80082f0:	6078      	str	r0, [r7, #4]
 80082f2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80082fa:	b2db      	uxtb	r3, r3
 80082fc:	3b01      	subs	r3, #1
 80082fe:	2b02      	cmp	r3, #2
 8008300:	d80b      	bhi.n	800831a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008302:	683b      	ldr	r3, [r7, #0]
 8008304:	885b      	ldrh	r3, [r3, #2]
 8008306:	2b01      	cmp	r3, #1
 8008308:	d10c      	bne.n	8008324 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	2200      	movs	r2, #0
 800830e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008312:	6878      	ldr	r0, [r7, #4]
 8008314:	f000 f910 	bl	8008538 <USBD_CtlSendStatus>
      }
      break;
 8008318:	e004      	b.n	8008324 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800831a:	6839      	ldr	r1, [r7, #0]
 800831c:	6878      	ldr	r0, [r7, #4]
 800831e:	f000 f840 	bl	80083a2 <USBD_CtlError>
      break;
 8008322:	e000      	b.n	8008326 <USBD_ClrFeature+0x3c>
      break;
 8008324:	bf00      	nop
  }
}
 8008326:	bf00      	nop
 8008328:	3708      	adds	r7, #8
 800832a:	46bd      	mov	sp, r7
 800832c:	bd80      	pop	{r7, pc}

0800832e <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800832e:	b580      	push	{r7, lr}
 8008330:	b084      	sub	sp, #16
 8008332:	af00      	add	r7, sp, #0
 8008334:	6078      	str	r0, [r7, #4]
 8008336:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008338:	683b      	ldr	r3, [r7, #0]
 800833a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	781a      	ldrb	r2, [r3, #0]
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	3301      	adds	r3, #1
 8008348:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	781a      	ldrb	r2, [r3, #0]
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	3301      	adds	r3, #1
 8008356:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008358:	68f8      	ldr	r0, [r7, #12]
 800835a:	f7ff fa41 	bl	80077e0 <SWAPBYTE>
 800835e:	4603      	mov	r3, r0
 8008360:	461a      	mov	r2, r3
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	3301      	adds	r3, #1
 800836a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	3301      	adds	r3, #1
 8008370:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008372:	68f8      	ldr	r0, [r7, #12]
 8008374:	f7ff fa34 	bl	80077e0 <SWAPBYTE>
 8008378:	4603      	mov	r3, r0
 800837a:	461a      	mov	r2, r3
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	3301      	adds	r3, #1
 8008384:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	3301      	adds	r3, #1
 800838a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800838c:	68f8      	ldr	r0, [r7, #12]
 800838e:	f7ff fa27 	bl	80077e0 <SWAPBYTE>
 8008392:	4603      	mov	r3, r0
 8008394:	461a      	mov	r2, r3
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	80da      	strh	r2, [r3, #6]
}
 800839a:	bf00      	nop
 800839c:	3710      	adds	r7, #16
 800839e:	46bd      	mov	sp, r7
 80083a0:	bd80      	pop	{r7, pc}

080083a2 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80083a2:	b580      	push	{r7, lr}
 80083a4:	b082      	sub	sp, #8
 80083a6:	af00      	add	r7, sp, #0
 80083a8:	6078      	str	r0, [r7, #4]
 80083aa:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80083ac:	2180      	movs	r1, #128	; 0x80
 80083ae:	6878      	ldr	r0, [r7, #4]
 80083b0:	f000 fce0 	bl	8008d74 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80083b4:	2100      	movs	r1, #0
 80083b6:	6878      	ldr	r0, [r7, #4]
 80083b8:	f000 fcdc 	bl	8008d74 <USBD_LL_StallEP>
}
 80083bc:	bf00      	nop
 80083be:	3708      	adds	r7, #8
 80083c0:	46bd      	mov	sp, r7
 80083c2:	bd80      	pop	{r7, pc}

080083c4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80083c4:	b580      	push	{r7, lr}
 80083c6:	b086      	sub	sp, #24
 80083c8:	af00      	add	r7, sp, #0
 80083ca:	60f8      	str	r0, [r7, #12]
 80083cc:	60b9      	str	r1, [r7, #8]
 80083ce:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80083d0:	2300      	movs	r3, #0
 80083d2:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d036      	beq.n	8008448 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80083de:	6938      	ldr	r0, [r7, #16]
 80083e0:	f000 f836 	bl	8008450 <USBD_GetLen>
 80083e4:	4603      	mov	r3, r0
 80083e6:	3301      	adds	r3, #1
 80083e8:	b29b      	uxth	r3, r3
 80083ea:	005b      	lsls	r3, r3, #1
 80083ec:	b29a      	uxth	r2, r3
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80083f2:	7dfb      	ldrb	r3, [r7, #23]
 80083f4:	68ba      	ldr	r2, [r7, #8]
 80083f6:	4413      	add	r3, r2
 80083f8:	687a      	ldr	r2, [r7, #4]
 80083fa:	7812      	ldrb	r2, [r2, #0]
 80083fc:	701a      	strb	r2, [r3, #0]
  idx++;
 80083fe:	7dfb      	ldrb	r3, [r7, #23]
 8008400:	3301      	adds	r3, #1
 8008402:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008404:	7dfb      	ldrb	r3, [r7, #23]
 8008406:	68ba      	ldr	r2, [r7, #8]
 8008408:	4413      	add	r3, r2
 800840a:	2203      	movs	r2, #3
 800840c:	701a      	strb	r2, [r3, #0]
  idx++;
 800840e:	7dfb      	ldrb	r3, [r7, #23]
 8008410:	3301      	adds	r3, #1
 8008412:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008414:	e013      	b.n	800843e <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8008416:	7dfb      	ldrb	r3, [r7, #23]
 8008418:	68ba      	ldr	r2, [r7, #8]
 800841a:	4413      	add	r3, r2
 800841c:	693a      	ldr	r2, [r7, #16]
 800841e:	7812      	ldrb	r2, [r2, #0]
 8008420:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008422:	693b      	ldr	r3, [r7, #16]
 8008424:	3301      	adds	r3, #1
 8008426:	613b      	str	r3, [r7, #16]
    idx++;
 8008428:	7dfb      	ldrb	r3, [r7, #23]
 800842a:	3301      	adds	r3, #1
 800842c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800842e:	7dfb      	ldrb	r3, [r7, #23]
 8008430:	68ba      	ldr	r2, [r7, #8]
 8008432:	4413      	add	r3, r2
 8008434:	2200      	movs	r2, #0
 8008436:	701a      	strb	r2, [r3, #0]
    idx++;
 8008438:	7dfb      	ldrb	r3, [r7, #23]
 800843a:	3301      	adds	r3, #1
 800843c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800843e:	693b      	ldr	r3, [r7, #16]
 8008440:	781b      	ldrb	r3, [r3, #0]
 8008442:	2b00      	cmp	r3, #0
 8008444:	d1e7      	bne.n	8008416 <USBD_GetString+0x52>
 8008446:	e000      	b.n	800844a <USBD_GetString+0x86>
    return;
 8008448:	bf00      	nop
  }
}
 800844a:	3718      	adds	r7, #24
 800844c:	46bd      	mov	sp, r7
 800844e:	bd80      	pop	{r7, pc}

08008450 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008450:	b480      	push	{r7}
 8008452:	b085      	sub	sp, #20
 8008454:	af00      	add	r7, sp, #0
 8008456:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008458:	2300      	movs	r3, #0
 800845a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008460:	e005      	b.n	800846e <USBD_GetLen+0x1e>
  {
    len++;
 8008462:	7bfb      	ldrb	r3, [r7, #15]
 8008464:	3301      	adds	r3, #1
 8008466:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008468:	68bb      	ldr	r3, [r7, #8]
 800846a:	3301      	adds	r3, #1
 800846c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800846e:	68bb      	ldr	r3, [r7, #8]
 8008470:	781b      	ldrb	r3, [r3, #0]
 8008472:	2b00      	cmp	r3, #0
 8008474:	d1f5      	bne.n	8008462 <USBD_GetLen+0x12>
  }

  return len;
 8008476:	7bfb      	ldrb	r3, [r7, #15]
}
 8008478:	4618      	mov	r0, r3
 800847a:	3714      	adds	r7, #20
 800847c:	46bd      	mov	sp, r7
 800847e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008482:	4770      	bx	lr

08008484 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008484:	b580      	push	{r7, lr}
 8008486:	b084      	sub	sp, #16
 8008488:	af00      	add	r7, sp, #0
 800848a:	60f8      	str	r0, [r7, #12]
 800848c:	60b9      	str	r1, [r7, #8]
 800848e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	2202      	movs	r2, #2
 8008494:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	687a      	ldr	r2, [r7, #4]
 800849c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	687a      	ldr	r2, [r7, #4]
 80084a2:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	68ba      	ldr	r2, [r7, #8]
 80084a8:	2100      	movs	r1, #0
 80084aa:	68f8      	ldr	r0, [r7, #12]
 80084ac:	f000 fceb 	bl	8008e86 <USBD_LL_Transmit>

  return USBD_OK;
 80084b0:	2300      	movs	r3, #0
}
 80084b2:	4618      	mov	r0, r3
 80084b4:	3710      	adds	r7, #16
 80084b6:	46bd      	mov	sp, r7
 80084b8:	bd80      	pop	{r7, pc}

080084ba <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80084ba:	b580      	push	{r7, lr}
 80084bc:	b084      	sub	sp, #16
 80084be:	af00      	add	r7, sp, #0
 80084c0:	60f8      	str	r0, [r7, #12]
 80084c2:	60b9      	str	r1, [r7, #8]
 80084c4:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	68ba      	ldr	r2, [r7, #8]
 80084ca:	2100      	movs	r1, #0
 80084cc:	68f8      	ldr	r0, [r7, #12]
 80084ce:	f000 fcda 	bl	8008e86 <USBD_LL_Transmit>

  return USBD_OK;
 80084d2:	2300      	movs	r3, #0
}
 80084d4:	4618      	mov	r0, r3
 80084d6:	3710      	adds	r7, #16
 80084d8:	46bd      	mov	sp, r7
 80084da:	bd80      	pop	{r7, pc}

080084dc <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80084dc:	b580      	push	{r7, lr}
 80084de:	b084      	sub	sp, #16
 80084e0:	af00      	add	r7, sp, #0
 80084e2:	60f8      	str	r0, [r7, #12]
 80084e4:	60b9      	str	r1, [r7, #8]
 80084e6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	2203      	movs	r2, #3
 80084ec:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	687a      	ldr	r2, [r7, #4]
 80084f4:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	687a      	ldr	r2, [r7, #4]
 80084fc:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	68ba      	ldr	r2, [r7, #8]
 8008504:	2100      	movs	r1, #0
 8008506:	68f8      	ldr	r0, [r7, #12]
 8008508:	f000 fcde 	bl	8008ec8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800850c:	2300      	movs	r3, #0
}
 800850e:	4618      	mov	r0, r3
 8008510:	3710      	adds	r7, #16
 8008512:	46bd      	mov	sp, r7
 8008514:	bd80      	pop	{r7, pc}

08008516 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008516:	b580      	push	{r7, lr}
 8008518:	b084      	sub	sp, #16
 800851a:	af00      	add	r7, sp, #0
 800851c:	60f8      	str	r0, [r7, #12]
 800851e:	60b9      	str	r1, [r7, #8]
 8008520:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	68ba      	ldr	r2, [r7, #8]
 8008526:	2100      	movs	r1, #0
 8008528:	68f8      	ldr	r0, [r7, #12]
 800852a:	f000 fccd 	bl	8008ec8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800852e:	2300      	movs	r3, #0
}
 8008530:	4618      	mov	r0, r3
 8008532:	3710      	adds	r7, #16
 8008534:	46bd      	mov	sp, r7
 8008536:	bd80      	pop	{r7, pc}

08008538 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008538:	b580      	push	{r7, lr}
 800853a:	b082      	sub	sp, #8
 800853c:	af00      	add	r7, sp, #0
 800853e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	2204      	movs	r2, #4
 8008544:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008548:	2300      	movs	r3, #0
 800854a:	2200      	movs	r2, #0
 800854c:	2100      	movs	r1, #0
 800854e:	6878      	ldr	r0, [r7, #4]
 8008550:	f000 fc99 	bl	8008e86 <USBD_LL_Transmit>

  return USBD_OK;
 8008554:	2300      	movs	r3, #0
}
 8008556:	4618      	mov	r0, r3
 8008558:	3708      	adds	r7, #8
 800855a:	46bd      	mov	sp, r7
 800855c:	bd80      	pop	{r7, pc}

0800855e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800855e:	b580      	push	{r7, lr}
 8008560:	b082      	sub	sp, #8
 8008562:	af00      	add	r7, sp, #0
 8008564:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	2205      	movs	r2, #5
 800856a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800856e:	2300      	movs	r3, #0
 8008570:	2200      	movs	r2, #0
 8008572:	2100      	movs	r1, #0
 8008574:	6878      	ldr	r0, [r7, #4]
 8008576:	f000 fca7 	bl	8008ec8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800857a:	2300      	movs	r3, #0
}
 800857c:	4618      	mov	r0, r3
 800857e:	3708      	adds	r7, #8
 8008580:	46bd      	mov	sp, r7
 8008582:	bd80      	pop	{r7, pc}

08008584 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008584:	b580      	push	{r7, lr}
 8008586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008588:	2200      	movs	r2, #0
 800858a:	4912      	ldr	r1, [pc, #72]	; (80085d4 <MX_USB_DEVICE_Init+0x50>)
 800858c:	4812      	ldr	r0, [pc, #72]	; (80085d8 <MX_USB_DEVICE_Init+0x54>)
 800858e:	f7fe fd07 	bl	8006fa0 <USBD_Init>
 8008592:	4603      	mov	r3, r0
 8008594:	2b00      	cmp	r3, #0
 8008596:	d001      	beq.n	800859c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008598:	f7f8 fb3a 	bl	8000c10 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800859c:	490f      	ldr	r1, [pc, #60]	; (80085dc <MX_USB_DEVICE_Init+0x58>)
 800859e:	480e      	ldr	r0, [pc, #56]	; (80085d8 <MX_USB_DEVICE_Init+0x54>)
 80085a0:	f7fe fd2e 	bl	8007000 <USBD_RegisterClass>
 80085a4:	4603      	mov	r3, r0
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d001      	beq.n	80085ae <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80085aa:	f7f8 fb31 	bl	8000c10 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80085ae:	490c      	ldr	r1, [pc, #48]	; (80085e0 <MX_USB_DEVICE_Init+0x5c>)
 80085b0:	4809      	ldr	r0, [pc, #36]	; (80085d8 <MX_USB_DEVICE_Init+0x54>)
 80085b2:	f7fe fc1f 	bl	8006df4 <USBD_CDC_RegisterInterface>
 80085b6:	4603      	mov	r3, r0
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d001      	beq.n	80085c0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80085bc:	f7f8 fb28 	bl	8000c10 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80085c0:	4805      	ldr	r0, [pc, #20]	; (80085d8 <MX_USB_DEVICE_Init+0x54>)
 80085c2:	f7fe fd53 	bl	800706c <USBD_Start>
 80085c6:	4603      	mov	r3, r0
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d001      	beq.n	80085d0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80085cc:	f7f8 fb20 	bl	8000c10 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80085d0:	bf00      	nop
 80085d2:	bd80      	pop	{r7, pc}
 80085d4:	200006ac 	.word	0x200006ac
 80085d8:	200008d0 	.word	0x200008d0
 80085dc:	20000618 	.word	0x20000618
 80085e0:	20000698 	.word	0x20000698

080085e4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80085e4:	b580      	push	{r7, lr}
 80085e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80085e8:	2200      	movs	r2, #0
 80085ea:	4905      	ldr	r1, [pc, #20]	; (8008600 <CDC_Init_FS+0x1c>)
 80085ec:	4805      	ldr	r0, [pc, #20]	; (8008604 <CDC_Init_FS+0x20>)
 80085ee:	f7fe fc1b 	bl	8006e28 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80085f2:	4905      	ldr	r1, [pc, #20]	; (8008608 <CDC_Init_FS+0x24>)
 80085f4:	4803      	ldr	r0, [pc, #12]	; (8008604 <CDC_Init_FS+0x20>)
 80085f6:	f7fe fc39 	bl	8006e6c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80085fa:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80085fc:	4618      	mov	r0, r3
 80085fe:	bd80      	pop	{r7, pc}
 8008600:	200013ac 	.word	0x200013ac
 8008604:	200008d0 	.word	0x200008d0
 8008608:	20000bac 	.word	0x20000bac

0800860c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800860c:	b480      	push	{r7}
 800860e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008610:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008612:	4618      	mov	r0, r3
 8008614:	46bd      	mov	sp, r7
 8008616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800861a:	4770      	bx	lr

0800861c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800861c:	b480      	push	{r7}
 800861e:	b083      	sub	sp, #12
 8008620:	af00      	add	r7, sp, #0
 8008622:	4603      	mov	r3, r0
 8008624:	6039      	str	r1, [r7, #0]
 8008626:	71fb      	strb	r3, [r7, #7]
 8008628:	4613      	mov	r3, r2
 800862a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800862c:	79fb      	ldrb	r3, [r7, #7]
 800862e:	2b23      	cmp	r3, #35	; 0x23
 8008630:	d84a      	bhi.n	80086c8 <CDC_Control_FS+0xac>
 8008632:	a201      	add	r2, pc, #4	; (adr r2, 8008638 <CDC_Control_FS+0x1c>)
 8008634:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008638:	080086c9 	.word	0x080086c9
 800863c:	080086c9 	.word	0x080086c9
 8008640:	080086c9 	.word	0x080086c9
 8008644:	080086c9 	.word	0x080086c9
 8008648:	080086c9 	.word	0x080086c9
 800864c:	080086c9 	.word	0x080086c9
 8008650:	080086c9 	.word	0x080086c9
 8008654:	080086c9 	.word	0x080086c9
 8008658:	080086c9 	.word	0x080086c9
 800865c:	080086c9 	.word	0x080086c9
 8008660:	080086c9 	.word	0x080086c9
 8008664:	080086c9 	.word	0x080086c9
 8008668:	080086c9 	.word	0x080086c9
 800866c:	080086c9 	.word	0x080086c9
 8008670:	080086c9 	.word	0x080086c9
 8008674:	080086c9 	.word	0x080086c9
 8008678:	080086c9 	.word	0x080086c9
 800867c:	080086c9 	.word	0x080086c9
 8008680:	080086c9 	.word	0x080086c9
 8008684:	080086c9 	.word	0x080086c9
 8008688:	080086c9 	.word	0x080086c9
 800868c:	080086c9 	.word	0x080086c9
 8008690:	080086c9 	.word	0x080086c9
 8008694:	080086c9 	.word	0x080086c9
 8008698:	080086c9 	.word	0x080086c9
 800869c:	080086c9 	.word	0x080086c9
 80086a0:	080086c9 	.word	0x080086c9
 80086a4:	080086c9 	.word	0x080086c9
 80086a8:	080086c9 	.word	0x080086c9
 80086ac:	080086c9 	.word	0x080086c9
 80086b0:	080086c9 	.word	0x080086c9
 80086b4:	080086c9 	.word	0x080086c9
 80086b8:	080086c9 	.word	0x080086c9
 80086bc:	080086c9 	.word	0x080086c9
 80086c0:	080086c9 	.word	0x080086c9
 80086c4:	080086c9 	.word	0x080086c9
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80086c8:	bf00      	nop
  }

  return (USBD_OK);
 80086ca:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80086cc:	4618      	mov	r0, r3
 80086ce:	370c      	adds	r7, #12
 80086d0:	46bd      	mov	sp, r7
 80086d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086d6:	4770      	bx	lr

080086d8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80086d8:	b580      	push	{r7, lr}
 80086da:	b082      	sub	sp, #8
 80086dc:	af00      	add	r7, sp, #0
 80086de:	6078      	str	r0, [r7, #4]
 80086e0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80086e2:	6879      	ldr	r1, [r7, #4]
 80086e4:	4805      	ldr	r0, [pc, #20]	; (80086fc <CDC_Receive_FS+0x24>)
 80086e6:	f7fe fbc1 	bl	8006e6c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80086ea:	4804      	ldr	r0, [pc, #16]	; (80086fc <CDC_Receive_FS+0x24>)
 80086ec:	f7fe fc22 	bl	8006f34 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80086f0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80086f2:	4618      	mov	r0, r3
 80086f4:	3708      	adds	r7, #8
 80086f6:	46bd      	mov	sp, r7
 80086f8:	bd80      	pop	{r7, pc}
 80086fa:	bf00      	nop
 80086fc:	200008d0 	.word	0x200008d0

08008700 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8008700:	b580      	push	{r7, lr}
 8008702:	b084      	sub	sp, #16
 8008704:	af00      	add	r7, sp, #0
 8008706:	6078      	str	r0, [r7, #4]
 8008708:	460b      	mov	r3, r1
 800870a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800870c:	2300      	movs	r3, #0
 800870e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8008710:	4b0d      	ldr	r3, [pc, #52]	; (8008748 <CDC_Transmit_FS+0x48>)
 8008712:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008716:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8008718:	68bb      	ldr	r3, [r7, #8]
 800871a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800871e:	2b00      	cmp	r3, #0
 8008720:	d001      	beq.n	8008726 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8008722:	2301      	movs	r3, #1
 8008724:	e00b      	b.n	800873e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8008726:	887b      	ldrh	r3, [r7, #2]
 8008728:	461a      	mov	r2, r3
 800872a:	6879      	ldr	r1, [r7, #4]
 800872c:	4806      	ldr	r0, [pc, #24]	; (8008748 <CDC_Transmit_FS+0x48>)
 800872e:	f7fe fb7b 	bl	8006e28 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8008732:	4805      	ldr	r0, [pc, #20]	; (8008748 <CDC_Transmit_FS+0x48>)
 8008734:	f7fe fbb8 	bl	8006ea8 <USBD_CDC_TransmitPacket>
 8008738:	4603      	mov	r3, r0
 800873a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800873c:	7bfb      	ldrb	r3, [r7, #15]
}
 800873e:	4618      	mov	r0, r3
 8008740:	3710      	adds	r7, #16
 8008742:	46bd      	mov	sp, r7
 8008744:	bd80      	pop	{r7, pc}
 8008746:	bf00      	nop
 8008748:	200008d0 	.word	0x200008d0

0800874c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800874c:	b480      	push	{r7}
 800874e:	b087      	sub	sp, #28
 8008750:	af00      	add	r7, sp, #0
 8008752:	60f8      	str	r0, [r7, #12]
 8008754:	60b9      	str	r1, [r7, #8]
 8008756:	4613      	mov	r3, r2
 8008758:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800875a:	2300      	movs	r3, #0
 800875c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800875e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008762:	4618      	mov	r0, r3
 8008764:	371c      	adds	r7, #28
 8008766:	46bd      	mov	sp, r7
 8008768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800876c:	4770      	bx	lr
	...

08008770 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008770:	b480      	push	{r7}
 8008772:	b083      	sub	sp, #12
 8008774:	af00      	add	r7, sp, #0
 8008776:	4603      	mov	r3, r0
 8008778:	6039      	str	r1, [r7, #0]
 800877a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800877c:	683b      	ldr	r3, [r7, #0]
 800877e:	2212      	movs	r2, #18
 8008780:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008782:	4b03      	ldr	r3, [pc, #12]	; (8008790 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008784:	4618      	mov	r0, r3
 8008786:	370c      	adds	r7, #12
 8008788:	46bd      	mov	sp, r7
 800878a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800878e:	4770      	bx	lr
 8008790:	200006c8 	.word	0x200006c8

08008794 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008794:	b480      	push	{r7}
 8008796:	b083      	sub	sp, #12
 8008798:	af00      	add	r7, sp, #0
 800879a:	4603      	mov	r3, r0
 800879c:	6039      	str	r1, [r7, #0]
 800879e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80087a0:	683b      	ldr	r3, [r7, #0]
 80087a2:	2204      	movs	r2, #4
 80087a4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80087a6:	4b03      	ldr	r3, [pc, #12]	; (80087b4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80087a8:	4618      	mov	r0, r3
 80087aa:	370c      	adds	r7, #12
 80087ac:	46bd      	mov	sp, r7
 80087ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b2:	4770      	bx	lr
 80087b4:	200006dc 	.word	0x200006dc

080087b8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80087b8:	b580      	push	{r7, lr}
 80087ba:	b082      	sub	sp, #8
 80087bc:	af00      	add	r7, sp, #0
 80087be:	4603      	mov	r3, r0
 80087c0:	6039      	str	r1, [r7, #0]
 80087c2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80087c4:	79fb      	ldrb	r3, [r7, #7]
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d105      	bne.n	80087d6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80087ca:	683a      	ldr	r2, [r7, #0]
 80087cc:	4907      	ldr	r1, [pc, #28]	; (80087ec <USBD_FS_ProductStrDescriptor+0x34>)
 80087ce:	4808      	ldr	r0, [pc, #32]	; (80087f0 <USBD_FS_ProductStrDescriptor+0x38>)
 80087d0:	f7ff fdf8 	bl	80083c4 <USBD_GetString>
 80087d4:	e004      	b.n	80087e0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80087d6:	683a      	ldr	r2, [r7, #0]
 80087d8:	4904      	ldr	r1, [pc, #16]	; (80087ec <USBD_FS_ProductStrDescriptor+0x34>)
 80087da:	4805      	ldr	r0, [pc, #20]	; (80087f0 <USBD_FS_ProductStrDescriptor+0x38>)
 80087dc:	f7ff fdf2 	bl	80083c4 <USBD_GetString>
  }
  return USBD_StrDesc;
 80087e0:	4b02      	ldr	r3, [pc, #8]	; (80087ec <USBD_FS_ProductStrDescriptor+0x34>)
}
 80087e2:	4618      	mov	r0, r3
 80087e4:	3708      	adds	r7, #8
 80087e6:	46bd      	mov	sp, r7
 80087e8:	bd80      	pop	{r7, pc}
 80087ea:	bf00      	nop
 80087ec:	20001bac 	.word	0x20001bac
 80087f0:	08009920 	.word	0x08009920

080087f4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80087f4:	b580      	push	{r7, lr}
 80087f6:	b082      	sub	sp, #8
 80087f8:	af00      	add	r7, sp, #0
 80087fa:	4603      	mov	r3, r0
 80087fc:	6039      	str	r1, [r7, #0]
 80087fe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008800:	683a      	ldr	r2, [r7, #0]
 8008802:	4904      	ldr	r1, [pc, #16]	; (8008814 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008804:	4804      	ldr	r0, [pc, #16]	; (8008818 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008806:	f7ff fddd 	bl	80083c4 <USBD_GetString>
  return USBD_StrDesc;
 800880a:	4b02      	ldr	r3, [pc, #8]	; (8008814 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800880c:	4618      	mov	r0, r3
 800880e:	3708      	adds	r7, #8
 8008810:	46bd      	mov	sp, r7
 8008812:	bd80      	pop	{r7, pc}
 8008814:	20001bac 	.word	0x20001bac
 8008818:	08009938 	.word	0x08009938

0800881c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800881c:	b580      	push	{r7, lr}
 800881e:	b082      	sub	sp, #8
 8008820:	af00      	add	r7, sp, #0
 8008822:	4603      	mov	r3, r0
 8008824:	6039      	str	r1, [r7, #0]
 8008826:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008828:	683b      	ldr	r3, [r7, #0]
 800882a:	221a      	movs	r2, #26
 800882c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800882e:	f000 f843 	bl	80088b8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008832:	4b02      	ldr	r3, [pc, #8]	; (800883c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008834:	4618      	mov	r0, r3
 8008836:	3708      	adds	r7, #8
 8008838:	46bd      	mov	sp, r7
 800883a:	bd80      	pop	{r7, pc}
 800883c:	200006e0 	.word	0x200006e0

08008840 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008840:	b580      	push	{r7, lr}
 8008842:	b082      	sub	sp, #8
 8008844:	af00      	add	r7, sp, #0
 8008846:	4603      	mov	r3, r0
 8008848:	6039      	str	r1, [r7, #0]
 800884a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800884c:	79fb      	ldrb	r3, [r7, #7]
 800884e:	2b00      	cmp	r3, #0
 8008850:	d105      	bne.n	800885e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008852:	683a      	ldr	r2, [r7, #0]
 8008854:	4907      	ldr	r1, [pc, #28]	; (8008874 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008856:	4808      	ldr	r0, [pc, #32]	; (8008878 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008858:	f7ff fdb4 	bl	80083c4 <USBD_GetString>
 800885c:	e004      	b.n	8008868 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800885e:	683a      	ldr	r2, [r7, #0]
 8008860:	4904      	ldr	r1, [pc, #16]	; (8008874 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008862:	4805      	ldr	r0, [pc, #20]	; (8008878 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008864:	f7ff fdae 	bl	80083c4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008868:	4b02      	ldr	r3, [pc, #8]	; (8008874 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800886a:	4618      	mov	r0, r3
 800886c:	3708      	adds	r7, #8
 800886e:	46bd      	mov	sp, r7
 8008870:	bd80      	pop	{r7, pc}
 8008872:	bf00      	nop
 8008874:	20001bac 	.word	0x20001bac
 8008878:	0800994c 	.word	0x0800994c

0800887c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800887c:	b580      	push	{r7, lr}
 800887e:	b082      	sub	sp, #8
 8008880:	af00      	add	r7, sp, #0
 8008882:	4603      	mov	r3, r0
 8008884:	6039      	str	r1, [r7, #0]
 8008886:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008888:	79fb      	ldrb	r3, [r7, #7]
 800888a:	2b00      	cmp	r3, #0
 800888c:	d105      	bne.n	800889a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800888e:	683a      	ldr	r2, [r7, #0]
 8008890:	4907      	ldr	r1, [pc, #28]	; (80088b0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008892:	4808      	ldr	r0, [pc, #32]	; (80088b4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008894:	f7ff fd96 	bl	80083c4 <USBD_GetString>
 8008898:	e004      	b.n	80088a4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800889a:	683a      	ldr	r2, [r7, #0]
 800889c:	4904      	ldr	r1, [pc, #16]	; (80088b0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800889e:	4805      	ldr	r0, [pc, #20]	; (80088b4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80088a0:	f7ff fd90 	bl	80083c4 <USBD_GetString>
  }
  return USBD_StrDesc;
 80088a4:	4b02      	ldr	r3, [pc, #8]	; (80088b0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80088a6:	4618      	mov	r0, r3
 80088a8:	3708      	adds	r7, #8
 80088aa:	46bd      	mov	sp, r7
 80088ac:	bd80      	pop	{r7, pc}
 80088ae:	bf00      	nop
 80088b0:	20001bac 	.word	0x20001bac
 80088b4:	08009958 	.word	0x08009958

080088b8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80088b8:	b580      	push	{r7, lr}
 80088ba:	b084      	sub	sp, #16
 80088bc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80088be:	4b0f      	ldr	r3, [pc, #60]	; (80088fc <Get_SerialNum+0x44>)
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80088c4:	4b0e      	ldr	r3, [pc, #56]	; (8008900 <Get_SerialNum+0x48>)
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80088ca:	4b0e      	ldr	r3, [pc, #56]	; (8008904 <Get_SerialNum+0x4c>)
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80088d0:	68fa      	ldr	r2, [r7, #12]
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	4413      	add	r3, r2
 80088d6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d009      	beq.n	80088f2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80088de:	2208      	movs	r2, #8
 80088e0:	4909      	ldr	r1, [pc, #36]	; (8008908 <Get_SerialNum+0x50>)
 80088e2:	68f8      	ldr	r0, [r7, #12]
 80088e4:	f000 f814 	bl	8008910 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80088e8:	2204      	movs	r2, #4
 80088ea:	4908      	ldr	r1, [pc, #32]	; (800890c <Get_SerialNum+0x54>)
 80088ec:	68b8      	ldr	r0, [r7, #8]
 80088ee:	f000 f80f 	bl	8008910 <IntToUnicode>
  }
}
 80088f2:	bf00      	nop
 80088f4:	3710      	adds	r7, #16
 80088f6:	46bd      	mov	sp, r7
 80088f8:	bd80      	pop	{r7, pc}
 80088fa:	bf00      	nop
 80088fc:	1fff7a10 	.word	0x1fff7a10
 8008900:	1fff7a14 	.word	0x1fff7a14
 8008904:	1fff7a18 	.word	0x1fff7a18
 8008908:	200006e2 	.word	0x200006e2
 800890c:	200006f2 	.word	0x200006f2

08008910 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008910:	b480      	push	{r7}
 8008912:	b087      	sub	sp, #28
 8008914:	af00      	add	r7, sp, #0
 8008916:	60f8      	str	r0, [r7, #12]
 8008918:	60b9      	str	r1, [r7, #8]
 800891a:	4613      	mov	r3, r2
 800891c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800891e:	2300      	movs	r3, #0
 8008920:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008922:	2300      	movs	r3, #0
 8008924:	75fb      	strb	r3, [r7, #23]
 8008926:	e027      	b.n	8008978 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	0f1b      	lsrs	r3, r3, #28
 800892c:	2b09      	cmp	r3, #9
 800892e:	d80b      	bhi.n	8008948 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	0f1b      	lsrs	r3, r3, #28
 8008934:	b2da      	uxtb	r2, r3
 8008936:	7dfb      	ldrb	r3, [r7, #23]
 8008938:	005b      	lsls	r3, r3, #1
 800893a:	4619      	mov	r1, r3
 800893c:	68bb      	ldr	r3, [r7, #8]
 800893e:	440b      	add	r3, r1
 8008940:	3230      	adds	r2, #48	; 0x30
 8008942:	b2d2      	uxtb	r2, r2
 8008944:	701a      	strb	r2, [r3, #0]
 8008946:	e00a      	b.n	800895e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	0f1b      	lsrs	r3, r3, #28
 800894c:	b2da      	uxtb	r2, r3
 800894e:	7dfb      	ldrb	r3, [r7, #23]
 8008950:	005b      	lsls	r3, r3, #1
 8008952:	4619      	mov	r1, r3
 8008954:	68bb      	ldr	r3, [r7, #8]
 8008956:	440b      	add	r3, r1
 8008958:	3237      	adds	r2, #55	; 0x37
 800895a:	b2d2      	uxtb	r2, r2
 800895c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	011b      	lsls	r3, r3, #4
 8008962:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008964:	7dfb      	ldrb	r3, [r7, #23]
 8008966:	005b      	lsls	r3, r3, #1
 8008968:	3301      	adds	r3, #1
 800896a:	68ba      	ldr	r2, [r7, #8]
 800896c:	4413      	add	r3, r2
 800896e:	2200      	movs	r2, #0
 8008970:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008972:	7dfb      	ldrb	r3, [r7, #23]
 8008974:	3301      	adds	r3, #1
 8008976:	75fb      	strb	r3, [r7, #23]
 8008978:	7dfa      	ldrb	r2, [r7, #23]
 800897a:	79fb      	ldrb	r3, [r7, #7]
 800897c:	429a      	cmp	r2, r3
 800897e:	d3d3      	bcc.n	8008928 <IntToUnicode+0x18>
  }
}
 8008980:	bf00      	nop
 8008982:	bf00      	nop
 8008984:	371c      	adds	r7, #28
 8008986:	46bd      	mov	sp, r7
 8008988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800898c:	4770      	bx	lr
	...

08008990 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008990:	b580      	push	{r7, lr}
 8008992:	b08a      	sub	sp, #40	; 0x28
 8008994:	af00      	add	r7, sp, #0
 8008996:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008998:	f107 0314 	add.w	r3, r7, #20
 800899c:	2200      	movs	r2, #0
 800899e:	601a      	str	r2, [r3, #0]
 80089a0:	605a      	str	r2, [r3, #4]
 80089a2:	609a      	str	r2, [r3, #8]
 80089a4:	60da      	str	r2, [r3, #12]
 80089a6:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80089b0:	d13a      	bne.n	8008a28 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80089b2:	2300      	movs	r3, #0
 80089b4:	613b      	str	r3, [r7, #16]
 80089b6:	4b1e      	ldr	r3, [pc, #120]	; (8008a30 <HAL_PCD_MspInit+0xa0>)
 80089b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089ba:	4a1d      	ldr	r2, [pc, #116]	; (8008a30 <HAL_PCD_MspInit+0xa0>)
 80089bc:	f043 0301 	orr.w	r3, r3, #1
 80089c0:	6313      	str	r3, [r2, #48]	; 0x30
 80089c2:	4b1b      	ldr	r3, [pc, #108]	; (8008a30 <HAL_PCD_MspInit+0xa0>)
 80089c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089c6:	f003 0301 	and.w	r3, r3, #1
 80089ca:	613b      	str	r3, [r7, #16]
 80089cc:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80089ce:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80089d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80089d4:	2302      	movs	r3, #2
 80089d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80089d8:	2300      	movs	r3, #0
 80089da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80089dc:	2303      	movs	r3, #3
 80089de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80089e0:	230a      	movs	r3, #10
 80089e2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80089e4:	f107 0314 	add.w	r3, r7, #20
 80089e8:	4619      	mov	r1, r3
 80089ea:	4812      	ldr	r0, [pc, #72]	; (8008a34 <HAL_PCD_MspInit+0xa4>)
 80089ec:	f7f9 f8aa 	bl	8001b44 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80089f0:	4b0f      	ldr	r3, [pc, #60]	; (8008a30 <HAL_PCD_MspInit+0xa0>)
 80089f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089f4:	4a0e      	ldr	r2, [pc, #56]	; (8008a30 <HAL_PCD_MspInit+0xa0>)
 80089f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80089fa:	6353      	str	r3, [r2, #52]	; 0x34
 80089fc:	2300      	movs	r3, #0
 80089fe:	60fb      	str	r3, [r7, #12]
 8008a00:	4b0b      	ldr	r3, [pc, #44]	; (8008a30 <HAL_PCD_MspInit+0xa0>)
 8008a02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a04:	4a0a      	ldr	r2, [pc, #40]	; (8008a30 <HAL_PCD_MspInit+0xa0>)
 8008a06:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008a0a:	6453      	str	r3, [r2, #68]	; 0x44
 8008a0c:	4b08      	ldr	r3, [pc, #32]	; (8008a30 <HAL_PCD_MspInit+0xa0>)
 8008a0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a10:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008a14:	60fb      	str	r3, [r7, #12]
 8008a16:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008a18:	2200      	movs	r2, #0
 8008a1a:	2100      	movs	r1, #0
 8008a1c:	2043      	movs	r0, #67	; 0x43
 8008a1e:	f7f9 f85a 	bl	8001ad6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008a22:	2043      	movs	r0, #67	; 0x43
 8008a24:	f7f9 f873 	bl	8001b0e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008a28:	bf00      	nop
 8008a2a:	3728      	adds	r7, #40	; 0x28
 8008a2c:	46bd      	mov	sp, r7
 8008a2e:	bd80      	pop	{r7, pc}
 8008a30:	40023800 	.word	0x40023800
 8008a34:	40020000 	.word	0x40020000

08008a38 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a38:	b580      	push	{r7, lr}
 8008a3a:	b082      	sub	sp, #8
 8008a3c:	af00      	add	r7, sp, #0
 8008a3e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8008a4c:	4619      	mov	r1, r3
 8008a4e:	4610      	mov	r0, r2
 8008a50:	f7fe fb59 	bl	8007106 <USBD_LL_SetupStage>
}
 8008a54:	bf00      	nop
 8008a56:	3708      	adds	r7, #8
 8008a58:	46bd      	mov	sp, r7
 8008a5a:	bd80      	pop	{r7, pc}

08008a5c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a5c:	b580      	push	{r7, lr}
 8008a5e:	b082      	sub	sp, #8
 8008a60:	af00      	add	r7, sp, #0
 8008a62:	6078      	str	r0, [r7, #4]
 8008a64:	460b      	mov	r3, r1
 8008a66:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8008a6e:	78fa      	ldrb	r2, [r7, #3]
 8008a70:	6879      	ldr	r1, [r7, #4]
 8008a72:	4613      	mov	r3, r2
 8008a74:	00db      	lsls	r3, r3, #3
 8008a76:	4413      	add	r3, r2
 8008a78:	009b      	lsls	r3, r3, #2
 8008a7a:	440b      	add	r3, r1
 8008a7c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8008a80:	681a      	ldr	r2, [r3, #0]
 8008a82:	78fb      	ldrb	r3, [r7, #3]
 8008a84:	4619      	mov	r1, r3
 8008a86:	f7fe fb93 	bl	80071b0 <USBD_LL_DataOutStage>
}
 8008a8a:	bf00      	nop
 8008a8c:	3708      	adds	r7, #8
 8008a8e:	46bd      	mov	sp, r7
 8008a90:	bd80      	pop	{r7, pc}

08008a92 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a92:	b580      	push	{r7, lr}
 8008a94:	b082      	sub	sp, #8
 8008a96:	af00      	add	r7, sp, #0
 8008a98:	6078      	str	r0, [r7, #4]
 8008a9a:	460b      	mov	r3, r1
 8008a9c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8008aa4:	78fa      	ldrb	r2, [r7, #3]
 8008aa6:	6879      	ldr	r1, [r7, #4]
 8008aa8:	4613      	mov	r3, r2
 8008aaa:	00db      	lsls	r3, r3, #3
 8008aac:	4413      	add	r3, r2
 8008aae:	009b      	lsls	r3, r3, #2
 8008ab0:	440b      	add	r3, r1
 8008ab2:	334c      	adds	r3, #76	; 0x4c
 8008ab4:	681a      	ldr	r2, [r3, #0]
 8008ab6:	78fb      	ldrb	r3, [r7, #3]
 8008ab8:	4619      	mov	r1, r3
 8008aba:	f7fe fc2c 	bl	8007316 <USBD_LL_DataInStage>
}
 8008abe:	bf00      	nop
 8008ac0:	3708      	adds	r7, #8
 8008ac2:	46bd      	mov	sp, r7
 8008ac4:	bd80      	pop	{r7, pc}

08008ac6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008ac6:	b580      	push	{r7, lr}
 8008ac8:	b082      	sub	sp, #8
 8008aca:	af00      	add	r7, sp, #0
 8008acc:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008ad4:	4618      	mov	r0, r3
 8008ad6:	f7fe fd60 	bl	800759a <USBD_LL_SOF>
}
 8008ada:	bf00      	nop
 8008adc:	3708      	adds	r7, #8
 8008ade:	46bd      	mov	sp, r7
 8008ae0:	bd80      	pop	{r7, pc}

08008ae2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008ae2:	b580      	push	{r7, lr}
 8008ae4:	b084      	sub	sp, #16
 8008ae6:	af00      	add	r7, sp, #0
 8008ae8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008aea:	2301      	movs	r3, #1
 8008aec:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	68db      	ldr	r3, [r3, #12]
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d102      	bne.n	8008afc <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8008af6:	2300      	movs	r3, #0
 8008af8:	73fb      	strb	r3, [r7, #15]
 8008afa:	e008      	b.n	8008b0e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	68db      	ldr	r3, [r3, #12]
 8008b00:	2b02      	cmp	r3, #2
 8008b02:	d102      	bne.n	8008b0a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8008b04:	2301      	movs	r3, #1
 8008b06:	73fb      	strb	r3, [r7, #15]
 8008b08:	e001      	b.n	8008b0e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8008b0a:	f7f8 f881 	bl	8000c10 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008b14:	7bfa      	ldrb	r2, [r7, #15]
 8008b16:	4611      	mov	r1, r2
 8008b18:	4618      	mov	r0, r3
 8008b1a:	f7fe fd00 	bl	800751e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008b24:	4618      	mov	r0, r3
 8008b26:	f7fe fca8 	bl	800747a <USBD_LL_Reset>
}
 8008b2a:	bf00      	nop
 8008b2c:	3710      	adds	r7, #16
 8008b2e:	46bd      	mov	sp, r7
 8008b30:	bd80      	pop	{r7, pc}
	...

08008b34 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008b34:	b580      	push	{r7, lr}
 8008b36:	b082      	sub	sp, #8
 8008b38:	af00      	add	r7, sp, #0
 8008b3a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008b42:	4618      	mov	r0, r3
 8008b44:	f7fe fcfb 	bl	800753e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	687a      	ldr	r2, [r7, #4]
 8008b54:	6812      	ldr	r2, [r2, #0]
 8008b56:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008b5a:	f043 0301 	orr.w	r3, r3, #1
 8008b5e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	6a1b      	ldr	r3, [r3, #32]
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d005      	beq.n	8008b74 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008b68:	4b04      	ldr	r3, [pc, #16]	; (8008b7c <HAL_PCD_SuspendCallback+0x48>)
 8008b6a:	691b      	ldr	r3, [r3, #16]
 8008b6c:	4a03      	ldr	r2, [pc, #12]	; (8008b7c <HAL_PCD_SuspendCallback+0x48>)
 8008b6e:	f043 0306 	orr.w	r3, r3, #6
 8008b72:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008b74:	bf00      	nop
 8008b76:	3708      	adds	r7, #8
 8008b78:	46bd      	mov	sp, r7
 8008b7a:	bd80      	pop	{r7, pc}
 8008b7c:	e000ed00 	.word	0xe000ed00

08008b80 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008b80:	b580      	push	{r7, lr}
 8008b82:	b082      	sub	sp, #8
 8008b84:	af00      	add	r7, sp, #0
 8008b86:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008b8e:	4618      	mov	r0, r3
 8008b90:	f7fe fceb 	bl	800756a <USBD_LL_Resume>
}
 8008b94:	bf00      	nop
 8008b96:	3708      	adds	r7, #8
 8008b98:	46bd      	mov	sp, r7
 8008b9a:	bd80      	pop	{r7, pc}

08008b9c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008b9c:	b580      	push	{r7, lr}
 8008b9e:	b082      	sub	sp, #8
 8008ba0:	af00      	add	r7, sp, #0
 8008ba2:	6078      	str	r0, [r7, #4]
 8008ba4:	460b      	mov	r3, r1
 8008ba6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008bae:	78fa      	ldrb	r2, [r7, #3]
 8008bb0:	4611      	mov	r1, r2
 8008bb2:	4618      	mov	r0, r3
 8008bb4:	f7fe fd43 	bl	800763e <USBD_LL_IsoOUTIncomplete>
}
 8008bb8:	bf00      	nop
 8008bba:	3708      	adds	r7, #8
 8008bbc:	46bd      	mov	sp, r7
 8008bbe:	bd80      	pop	{r7, pc}

08008bc0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008bc0:	b580      	push	{r7, lr}
 8008bc2:	b082      	sub	sp, #8
 8008bc4:	af00      	add	r7, sp, #0
 8008bc6:	6078      	str	r0, [r7, #4]
 8008bc8:	460b      	mov	r3, r1
 8008bca:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008bd2:	78fa      	ldrb	r2, [r7, #3]
 8008bd4:	4611      	mov	r1, r2
 8008bd6:	4618      	mov	r0, r3
 8008bd8:	f7fe fcff 	bl	80075da <USBD_LL_IsoINIncomplete>
}
 8008bdc:	bf00      	nop
 8008bde:	3708      	adds	r7, #8
 8008be0:	46bd      	mov	sp, r7
 8008be2:	bd80      	pop	{r7, pc}

08008be4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008be4:	b580      	push	{r7, lr}
 8008be6:	b082      	sub	sp, #8
 8008be8:	af00      	add	r7, sp, #0
 8008bea:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008bf2:	4618      	mov	r0, r3
 8008bf4:	f7fe fd55 	bl	80076a2 <USBD_LL_DevConnected>
}
 8008bf8:	bf00      	nop
 8008bfa:	3708      	adds	r7, #8
 8008bfc:	46bd      	mov	sp, r7
 8008bfe:	bd80      	pop	{r7, pc}

08008c00 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008c00:	b580      	push	{r7, lr}
 8008c02:	b082      	sub	sp, #8
 8008c04:	af00      	add	r7, sp, #0
 8008c06:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008c0e:	4618      	mov	r0, r3
 8008c10:	f7fe fd52 	bl	80076b8 <USBD_LL_DevDisconnected>
}
 8008c14:	bf00      	nop
 8008c16:	3708      	adds	r7, #8
 8008c18:	46bd      	mov	sp, r7
 8008c1a:	bd80      	pop	{r7, pc}

08008c1c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008c1c:	b580      	push	{r7, lr}
 8008c1e:	b082      	sub	sp, #8
 8008c20:	af00      	add	r7, sp, #0
 8008c22:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	781b      	ldrb	r3, [r3, #0]
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d13c      	bne.n	8008ca6 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8008c2c:	4a20      	ldr	r2, [pc, #128]	; (8008cb0 <USBD_LL_Init+0x94>)
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	4a1e      	ldr	r2, [pc, #120]	; (8008cb0 <USBD_LL_Init+0x94>)
 8008c38:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008c3c:	4b1c      	ldr	r3, [pc, #112]	; (8008cb0 <USBD_LL_Init+0x94>)
 8008c3e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008c42:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8008c44:	4b1a      	ldr	r3, [pc, #104]	; (8008cb0 <USBD_LL_Init+0x94>)
 8008c46:	2204      	movs	r2, #4
 8008c48:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8008c4a:	4b19      	ldr	r3, [pc, #100]	; (8008cb0 <USBD_LL_Init+0x94>)
 8008c4c:	2202      	movs	r2, #2
 8008c4e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008c50:	4b17      	ldr	r3, [pc, #92]	; (8008cb0 <USBD_LL_Init+0x94>)
 8008c52:	2200      	movs	r2, #0
 8008c54:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008c56:	4b16      	ldr	r3, [pc, #88]	; (8008cb0 <USBD_LL_Init+0x94>)
 8008c58:	2202      	movs	r2, #2
 8008c5a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008c5c:	4b14      	ldr	r3, [pc, #80]	; (8008cb0 <USBD_LL_Init+0x94>)
 8008c5e:	2200      	movs	r2, #0
 8008c60:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8008c62:	4b13      	ldr	r3, [pc, #76]	; (8008cb0 <USBD_LL_Init+0x94>)
 8008c64:	2200      	movs	r2, #0
 8008c66:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8008c68:	4b11      	ldr	r3, [pc, #68]	; (8008cb0 <USBD_LL_Init+0x94>)
 8008c6a:	2200      	movs	r2, #0
 8008c6c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8008c6e:	4b10      	ldr	r3, [pc, #64]	; (8008cb0 <USBD_LL_Init+0x94>)
 8008c70:	2200      	movs	r2, #0
 8008c72:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8008c74:	4b0e      	ldr	r3, [pc, #56]	; (8008cb0 <USBD_LL_Init+0x94>)
 8008c76:	2200      	movs	r2, #0
 8008c78:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8008c7a:	480d      	ldr	r0, [pc, #52]	; (8008cb0 <USBD_LL_Init+0x94>)
 8008c7c:	f7f9 f917 	bl	8001eae <HAL_PCD_Init>
 8008c80:	4603      	mov	r3, r0
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d001      	beq.n	8008c8a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8008c86:	f7f7 ffc3 	bl	8000c10 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8008c8a:	2180      	movs	r1, #128	; 0x80
 8008c8c:	4808      	ldr	r0, [pc, #32]	; (8008cb0 <USBD_LL_Init+0x94>)
 8008c8e:	f7fa fb6e 	bl	800336e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8008c92:	2240      	movs	r2, #64	; 0x40
 8008c94:	2100      	movs	r1, #0
 8008c96:	4806      	ldr	r0, [pc, #24]	; (8008cb0 <USBD_LL_Init+0x94>)
 8008c98:	f7fa fb22 	bl	80032e0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8008c9c:	2280      	movs	r2, #128	; 0x80
 8008c9e:	2101      	movs	r1, #1
 8008ca0:	4803      	ldr	r0, [pc, #12]	; (8008cb0 <USBD_LL_Init+0x94>)
 8008ca2:	f7fa fb1d 	bl	80032e0 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8008ca6:	2300      	movs	r3, #0
}
 8008ca8:	4618      	mov	r0, r3
 8008caa:	3708      	adds	r7, #8
 8008cac:	46bd      	mov	sp, r7
 8008cae:	bd80      	pop	{r7, pc}
 8008cb0:	20001dac 	.word	0x20001dac

08008cb4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008cb4:	b580      	push	{r7, lr}
 8008cb6:	b084      	sub	sp, #16
 8008cb8:	af00      	add	r7, sp, #0
 8008cba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008cbc:	2300      	movs	r3, #0
 8008cbe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008cc0:	2300      	movs	r3, #0
 8008cc2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008cca:	4618      	mov	r0, r3
 8008ccc:	f7f9 fa0c 	bl	80020e8 <HAL_PCD_Start>
 8008cd0:	4603      	mov	r3, r0
 8008cd2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008cd4:	7bfb      	ldrb	r3, [r7, #15]
 8008cd6:	4618      	mov	r0, r3
 8008cd8:	f000 f942 	bl	8008f60 <USBD_Get_USB_Status>
 8008cdc:	4603      	mov	r3, r0
 8008cde:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008ce0:	7bbb      	ldrb	r3, [r7, #14]
}
 8008ce2:	4618      	mov	r0, r3
 8008ce4:	3710      	adds	r7, #16
 8008ce6:	46bd      	mov	sp, r7
 8008ce8:	bd80      	pop	{r7, pc}

08008cea <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008cea:	b580      	push	{r7, lr}
 8008cec:	b084      	sub	sp, #16
 8008cee:	af00      	add	r7, sp, #0
 8008cf0:	6078      	str	r0, [r7, #4]
 8008cf2:	4608      	mov	r0, r1
 8008cf4:	4611      	mov	r1, r2
 8008cf6:	461a      	mov	r2, r3
 8008cf8:	4603      	mov	r3, r0
 8008cfa:	70fb      	strb	r3, [r7, #3]
 8008cfc:	460b      	mov	r3, r1
 8008cfe:	70bb      	strb	r3, [r7, #2]
 8008d00:	4613      	mov	r3, r2
 8008d02:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008d04:	2300      	movs	r3, #0
 8008d06:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008d08:	2300      	movs	r3, #0
 8008d0a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008d12:	78bb      	ldrb	r3, [r7, #2]
 8008d14:	883a      	ldrh	r2, [r7, #0]
 8008d16:	78f9      	ldrb	r1, [r7, #3]
 8008d18:	f7f9 fedd 	bl	8002ad6 <HAL_PCD_EP_Open>
 8008d1c:	4603      	mov	r3, r0
 8008d1e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008d20:	7bfb      	ldrb	r3, [r7, #15]
 8008d22:	4618      	mov	r0, r3
 8008d24:	f000 f91c 	bl	8008f60 <USBD_Get_USB_Status>
 8008d28:	4603      	mov	r3, r0
 8008d2a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008d2c:	7bbb      	ldrb	r3, [r7, #14]
}
 8008d2e:	4618      	mov	r0, r3
 8008d30:	3710      	adds	r7, #16
 8008d32:	46bd      	mov	sp, r7
 8008d34:	bd80      	pop	{r7, pc}

08008d36 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008d36:	b580      	push	{r7, lr}
 8008d38:	b084      	sub	sp, #16
 8008d3a:	af00      	add	r7, sp, #0
 8008d3c:	6078      	str	r0, [r7, #4]
 8008d3e:	460b      	mov	r3, r1
 8008d40:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008d42:	2300      	movs	r3, #0
 8008d44:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008d46:	2300      	movs	r3, #0
 8008d48:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008d50:	78fa      	ldrb	r2, [r7, #3]
 8008d52:	4611      	mov	r1, r2
 8008d54:	4618      	mov	r0, r3
 8008d56:	f7f9 ff26 	bl	8002ba6 <HAL_PCD_EP_Close>
 8008d5a:	4603      	mov	r3, r0
 8008d5c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008d5e:	7bfb      	ldrb	r3, [r7, #15]
 8008d60:	4618      	mov	r0, r3
 8008d62:	f000 f8fd 	bl	8008f60 <USBD_Get_USB_Status>
 8008d66:	4603      	mov	r3, r0
 8008d68:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008d6a:	7bbb      	ldrb	r3, [r7, #14]
}
 8008d6c:	4618      	mov	r0, r3
 8008d6e:	3710      	adds	r7, #16
 8008d70:	46bd      	mov	sp, r7
 8008d72:	bd80      	pop	{r7, pc}

08008d74 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008d74:	b580      	push	{r7, lr}
 8008d76:	b084      	sub	sp, #16
 8008d78:	af00      	add	r7, sp, #0
 8008d7a:	6078      	str	r0, [r7, #4]
 8008d7c:	460b      	mov	r3, r1
 8008d7e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008d80:	2300      	movs	r3, #0
 8008d82:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008d84:	2300      	movs	r3, #0
 8008d86:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008d8e:	78fa      	ldrb	r2, [r7, #3]
 8008d90:	4611      	mov	r1, r2
 8008d92:	4618      	mov	r0, r3
 8008d94:	f7f9 fffe 	bl	8002d94 <HAL_PCD_EP_SetStall>
 8008d98:	4603      	mov	r3, r0
 8008d9a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008d9c:	7bfb      	ldrb	r3, [r7, #15]
 8008d9e:	4618      	mov	r0, r3
 8008da0:	f000 f8de 	bl	8008f60 <USBD_Get_USB_Status>
 8008da4:	4603      	mov	r3, r0
 8008da6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008da8:	7bbb      	ldrb	r3, [r7, #14]
}
 8008daa:	4618      	mov	r0, r3
 8008dac:	3710      	adds	r7, #16
 8008dae:	46bd      	mov	sp, r7
 8008db0:	bd80      	pop	{r7, pc}

08008db2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008db2:	b580      	push	{r7, lr}
 8008db4:	b084      	sub	sp, #16
 8008db6:	af00      	add	r7, sp, #0
 8008db8:	6078      	str	r0, [r7, #4]
 8008dba:	460b      	mov	r3, r1
 8008dbc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008dbe:	2300      	movs	r3, #0
 8008dc0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008dc2:	2300      	movs	r3, #0
 8008dc4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008dcc:	78fa      	ldrb	r2, [r7, #3]
 8008dce:	4611      	mov	r1, r2
 8008dd0:	4618      	mov	r0, r3
 8008dd2:	f7fa f843 	bl	8002e5c <HAL_PCD_EP_ClrStall>
 8008dd6:	4603      	mov	r3, r0
 8008dd8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008dda:	7bfb      	ldrb	r3, [r7, #15]
 8008ddc:	4618      	mov	r0, r3
 8008dde:	f000 f8bf 	bl	8008f60 <USBD_Get_USB_Status>
 8008de2:	4603      	mov	r3, r0
 8008de4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008de6:	7bbb      	ldrb	r3, [r7, #14]
}
 8008de8:	4618      	mov	r0, r3
 8008dea:	3710      	adds	r7, #16
 8008dec:	46bd      	mov	sp, r7
 8008dee:	bd80      	pop	{r7, pc}

08008df0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008df0:	b480      	push	{r7}
 8008df2:	b085      	sub	sp, #20
 8008df4:	af00      	add	r7, sp, #0
 8008df6:	6078      	str	r0, [r7, #4]
 8008df8:	460b      	mov	r3, r1
 8008dfa:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008e02:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008e04:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	da0b      	bge.n	8008e24 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008e0c:	78fb      	ldrb	r3, [r7, #3]
 8008e0e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008e12:	68f9      	ldr	r1, [r7, #12]
 8008e14:	4613      	mov	r3, r2
 8008e16:	00db      	lsls	r3, r3, #3
 8008e18:	4413      	add	r3, r2
 8008e1a:	009b      	lsls	r3, r3, #2
 8008e1c:	440b      	add	r3, r1
 8008e1e:	333e      	adds	r3, #62	; 0x3e
 8008e20:	781b      	ldrb	r3, [r3, #0]
 8008e22:	e00b      	b.n	8008e3c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008e24:	78fb      	ldrb	r3, [r7, #3]
 8008e26:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008e2a:	68f9      	ldr	r1, [r7, #12]
 8008e2c:	4613      	mov	r3, r2
 8008e2e:	00db      	lsls	r3, r3, #3
 8008e30:	4413      	add	r3, r2
 8008e32:	009b      	lsls	r3, r3, #2
 8008e34:	440b      	add	r3, r1
 8008e36:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8008e3a:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008e3c:	4618      	mov	r0, r3
 8008e3e:	3714      	adds	r7, #20
 8008e40:	46bd      	mov	sp, r7
 8008e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e46:	4770      	bx	lr

08008e48 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008e48:	b580      	push	{r7, lr}
 8008e4a:	b084      	sub	sp, #16
 8008e4c:	af00      	add	r7, sp, #0
 8008e4e:	6078      	str	r0, [r7, #4]
 8008e50:	460b      	mov	r3, r1
 8008e52:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008e54:	2300      	movs	r3, #0
 8008e56:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008e58:	2300      	movs	r3, #0
 8008e5a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008e62:	78fa      	ldrb	r2, [r7, #3]
 8008e64:	4611      	mov	r1, r2
 8008e66:	4618      	mov	r0, r3
 8008e68:	f7f9 fe10 	bl	8002a8c <HAL_PCD_SetAddress>
 8008e6c:	4603      	mov	r3, r0
 8008e6e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008e70:	7bfb      	ldrb	r3, [r7, #15]
 8008e72:	4618      	mov	r0, r3
 8008e74:	f000 f874 	bl	8008f60 <USBD_Get_USB_Status>
 8008e78:	4603      	mov	r3, r0
 8008e7a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008e7c:	7bbb      	ldrb	r3, [r7, #14]
}
 8008e7e:	4618      	mov	r0, r3
 8008e80:	3710      	adds	r7, #16
 8008e82:	46bd      	mov	sp, r7
 8008e84:	bd80      	pop	{r7, pc}

08008e86 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008e86:	b580      	push	{r7, lr}
 8008e88:	b086      	sub	sp, #24
 8008e8a:	af00      	add	r7, sp, #0
 8008e8c:	60f8      	str	r0, [r7, #12]
 8008e8e:	607a      	str	r2, [r7, #4]
 8008e90:	603b      	str	r3, [r7, #0]
 8008e92:	460b      	mov	r3, r1
 8008e94:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008e96:	2300      	movs	r3, #0
 8008e98:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008e9a:	2300      	movs	r3, #0
 8008e9c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008ea4:	7af9      	ldrb	r1, [r7, #11]
 8008ea6:	683b      	ldr	r3, [r7, #0]
 8008ea8:	687a      	ldr	r2, [r7, #4]
 8008eaa:	f7f9 ff29 	bl	8002d00 <HAL_PCD_EP_Transmit>
 8008eae:	4603      	mov	r3, r0
 8008eb0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008eb2:	7dfb      	ldrb	r3, [r7, #23]
 8008eb4:	4618      	mov	r0, r3
 8008eb6:	f000 f853 	bl	8008f60 <USBD_Get_USB_Status>
 8008eba:	4603      	mov	r3, r0
 8008ebc:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008ebe:	7dbb      	ldrb	r3, [r7, #22]
}
 8008ec0:	4618      	mov	r0, r3
 8008ec2:	3718      	adds	r7, #24
 8008ec4:	46bd      	mov	sp, r7
 8008ec6:	bd80      	pop	{r7, pc}

08008ec8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008ec8:	b580      	push	{r7, lr}
 8008eca:	b086      	sub	sp, #24
 8008ecc:	af00      	add	r7, sp, #0
 8008ece:	60f8      	str	r0, [r7, #12]
 8008ed0:	607a      	str	r2, [r7, #4]
 8008ed2:	603b      	str	r3, [r7, #0]
 8008ed4:	460b      	mov	r3, r1
 8008ed6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008ed8:	2300      	movs	r3, #0
 8008eda:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008edc:	2300      	movs	r3, #0
 8008ede:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008ee6:	7af9      	ldrb	r1, [r7, #11]
 8008ee8:	683b      	ldr	r3, [r7, #0]
 8008eea:	687a      	ldr	r2, [r7, #4]
 8008eec:	f7f9 fea5 	bl	8002c3a <HAL_PCD_EP_Receive>
 8008ef0:	4603      	mov	r3, r0
 8008ef2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008ef4:	7dfb      	ldrb	r3, [r7, #23]
 8008ef6:	4618      	mov	r0, r3
 8008ef8:	f000 f832 	bl	8008f60 <USBD_Get_USB_Status>
 8008efc:	4603      	mov	r3, r0
 8008efe:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008f00:	7dbb      	ldrb	r3, [r7, #22]
}
 8008f02:	4618      	mov	r0, r3
 8008f04:	3718      	adds	r7, #24
 8008f06:	46bd      	mov	sp, r7
 8008f08:	bd80      	pop	{r7, pc}

08008f0a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008f0a:	b580      	push	{r7, lr}
 8008f0c:	b082      	sub	sp, #8
 8008f0e:	af00      	add	r7, sp, #0
 8008f10:	6078      	str	r0, [r7, #4]
 8008f12:	460b      	mov	r3, r1
 8008f14:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008f1c:	78fa      	ldrb	r2, [r7, #3]
 8008f1e:	4611      	mov	r1, r2
 8008f20:	4618      	mov	r0, r3
 8008f22:	f7f9 fed5 	bl	8002cd0 <HAL_PCD_EP_GetRxCount>
 8008f26:	4603      	mov	r3, r0
}
 8008f28:	4618      	mov	r0, r3
 8008f2a:	3708      	adds	r7, #8
 8008f2c:	46bd      	mov	sp, r7
 8008f2e:	bd80      	pop	{r7, pc}

08008f30 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008f30:	b480      	push	{r7}
 8008f32:	b083      	sub	sp, #12
 8008f34:	af00      	add	r7, sp, #0
 8008f36:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008f38:	4b03      	ldr	r3, [pc, #12]	; (8008f48 <USBD_static_malloc+0x18>)
}
 8008f3a:	4618      	mov	r0, r3
 8008f3c:	370c      	adds	r7, #12
 8008f3e:	46bd      	mov	sp, r7
 8008f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f44:	4770      	bx	lr
 8008f46:	bf00      	nop
 8008f48:	200022b8 	.word	0x200022b8

08008f4c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008f4c:	b480      	push	{r7}
 8008f4e:	b083      	sub	sp, #12
 8008f50:	af00      	add	r7, sp, #0
 8008f52:	6078      	str	r0, [r7, #4]

}
 8008f54:	bf00      	nop
 8008f56:	370c      	adds	r7, #12
 8008f58:	46bd      	mov	sp, r7
 8008f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f5e:	4770      	bx	lr

08008f60 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008f60:	b480      	push	{r7}
 8008f62:	b085      	sub	sp, #20
 8008f64:	af00      	add	r7, sp, #0
 8008f66:	4603      	mov	r3, r0
 8008f68:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008f6a:	2300      	movs	r3, #0
 8008f6c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008f6e:	79fb      	ldrb	r3, [r7, #7]
 8008f70:	2b03      	cmp	r3, #3
 8008f72:	d817      	bhi.n	8008fa4 <USBD_Get_USB_Status+0x44>
 8008f74:	a201      	add	r2, pc, #4	; (adr r2, 8008f7c <USBD_Get_USB_Status+0x1c>)
 8008f76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f7a:	bf00      	nop
 8008f7c:	08008f8d 	.word	0x08008f8d
 8008f80:	08008f93 	.word	0x08008f93
 8008f84:	08008f99 	.word	0x08008f99
 8008f88:	08008f9f 	.word	0x08008f9f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008f8c:	2300      	movs	r3, #0
 8008f8e:	73fb      	strb	r3, [r7, #15]
    break;
 8008f90:	e00b      	b.n	8008faa <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008f92:	2303      	movs	r3, #3
 8008f94:	73fb      	strb	r3, [r7, #15]
    break;
 8008f96:	e008      	b.n	8008faa <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008f98:	2301      	movs	r3, #1
 8008f9a:	73fb      	strb	r3, [r7, #15]
    break;
 8008f9c:	e005      	b.n	8008faa <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008f9e:	2303      	movs	r3, #3
 8008fa0:	73fb      	strb	r3, [r7, #15]
    break;
 8008fa2:	e002      	b.n	8008faa <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008fa4:	2303      	movs	r3, #3
 8008fa6:	73fb      	strb	r3, [r7, #15]
    break;
 8008fa8:	bf00      	nop
  }
  return usb_status;
 8008faa:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fac:	4618      	mov	r0, r3
 8008fae:	3714      	adds	r7, #20
 8008fb0:	46bd      	mov	sp, r7
 8008fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fb6:	4770      	bx	lr

08008fb8 <__errno>:
 8008fb8:	4b01      	ldr	r3, [pc, #4]	; (8008fc0 <__errno+0x8>)
 8008fba:	6818      	ldr	r0, [r3, #0]
 8008fbc:	4770      	bx	lr
 8008fbe:	bf00      	nop
 8008fc0:	200006fc 	.word	0x200006fc

08008fc4 <__libc_init_array>:
 8008fc4:	b570      	push	{r4, r5, r6, lr}
 8008fc6:	4d0d      	ldr	r5, [pc, #52]	; (8008ffc <__libc_init_array+0x38>)
 8008fc8:	4c0d      	ldr	r4, [pc, #52]	; (8009000 <__libc_init_array+0x3c>)
 8008fca:	1b64      	subs	r4, r4, r5
 8008fcc:	10a4      	asrs	r4, r4, #2
 8008fce:	2600      	movs	r6, #0
 8008fd0:	42a6      	cmp	r6, r4
 8008fd2:	d109      	bne.n	8008fe8 <__libc_init_array+0x24>
 8008fd4:	4d0b      	ldr	r5, [pc, #44]	; (8009004 <__libc_init_array+0x40>)
 8008fd6:	4c0c      	ldr	r4, [pc, #48]	; (8009008 <__libc_init_array+0x44>)
 8008fd8:	f000 fc8e 	bl	80098f8 <_init>
 8008fdc:	1b64      	subs	r4, r4, r5
 8008fde:	10a4      	asrs	r4, r4, #2
 8008fe0:	2600      	movs	r6, #0
 8008fe2:	42a6      	cmp	r6, r4
 8008fe4:	d105      	bne.n	8008ff2 <__libc_init_array+0x2e>
 8008fe6:	bd70      	pop	{r4, r5, r6, pc}
 8008fe8:	f855 3b04 	ldr.w	r3, [r5], #4
 8008fec:	4798      	blx	r3
 8008fee:	3601      	adds	r6, #1
 8008ff0:	e7ee      	b.n	8008fd0 <__libc_init_array+0xc>
 8008ff2:	f855 3b04 	ldr.w	r3, [r5], #4
 8008ff6:	4798      	blx	r3
 8008ff8:	3601      	adds	r6, #1
 8008ffa:	e7f2      	b.n	8008fe2 <__libc_init_array+0x1e>
 8008ffc:	080099b4 	.word	0x080099b4
 8009000:	080099b4 	.word	0x080099b4
 8009004:	080099b4 	.word	0x080099b4
 8009008:	080099b8 	.word	0x080099b8

0800900c <memset>:
 800900c:	4402      	add	r2, r0
 800900e:	4603      	mov	r3, r0
 8009010:	4293      	cmp	r3, r2
 8009012:	d100      	bne.n	8009016 <memset+0xa>
 8009014:	4770      	bx	lr
 8009016:	f803 1b01 	strb.w	r1, [r3], #1
 800901a:	e7f9      	b.n	8009010 <memset+0x4>

0800901c <siprintf>:
 800901c:	b40e      	push	{r1, r2, r3}
 800901e:	b500      	push	{lr}
 8009020:	b09c      	sub	sp, #112	; 0x70
 8009022:	ab1d      	add	r3, sp, #116	; 0x74
 8009024:	9002      	str	r0, [sp, #8]
 8009026:	9006      	str	r0, [sp, #24]
 8009028:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800902c:	4809      	ldr	r0, [pc, #36]	; (8009054 <siprintf+0x38>)
 800902e:	9107      	str	r1, [sp, #28]
 8009030:	9104      	str	r1, [sp, #16]
 8009032:	4909      	ldr	r1, [pc, #36]	; (8009058 <siprintf+0x3c>)
 8009034:	f853 2b04 	ldr.w	r2, [r3], #4
 8009038:	9105      	str	r1, [sp, #20]
 800903a:	6800      	ldr	r0, [r0, #0]
 800903c:	9301      	str	r3, [sp, #4]
 800903e:	a902      	add	r1, sp, #8
 8009040:	f000 f868 	bl	8009114 <_svfiprintf_r>
 8009044:	9b02      	ldr	r3, [sp, #8]
 8009046:	2200      	movs	r2, #0
 8009048:	701a      	strb	r2, [r3, #0]
 800904a:	b01c      	add	sp, #112	; 0x70
 800904c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009050:	b003      	add	sp, #12
 8009052:	4770      	bx	lr
 8009054:	200006fc 	.word	0x200006fc
 8009058:	ffff0208 	.word	0xffff0208

0800905c <__ssputs_r>:
 800905c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009060:	688e      	ldr	r6, [r1, #8]
 8009062:	429e      	cmp	r6, r3
 8009064:	4682      	mov	sl, r0
 8009066:	460c      	mov	r4, r1
 8009068:	4690      	mov	r8, r2
 800906a:	461f      	mov	r7, r3
 800906c:	d838      	bhi.n	80090e0 <__ssputs_r+0x84>
 800906e:	898a      	ldrh	r2, [r1, #12]
 8009070:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009074:	d032      	beq.n	80090dc <__ssputs_r+0x80>
 8009076:	6825      	ldr	r5, [r4, #0]
 8009078:	6909      	ldr	r1, [r1, #16]
 800907a:	eba5 0901 	sub.w	r9, r5, r1
 800907e:	6965      	ldr	r5, [r4, #20]
 8009080:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009084:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009088:	3301      	adds	r3, #1
 800908a:	444b      	add	r3, r9
 800908c:	106d      	asrs	r5, r5, #1
 800908e:	429d      	cmp	r5, r3
 8009090:	bf38      	it	cc
 8009092:	461d      	movcc	r5, r3
 8009094:	0553      	lsls	r3, r2, #21
 8009096:	d531      	bpl.n	80090fc <__ssputs_r+0xa0>
 8009098:	4629      	mov	r1, r5
 800909a:	f000 fb63 	bl	8009764 <_malloc_r>
 800909e:	4606      	mov	r6, r0
 80090a0:	b950      	cbnz	r0, 80090b8 <__ssputs_r+0x5c>
 80090a2:	230c      	movs	r3, #12
 80090a4:	f8ca 3000 	str.w	r3, [sl]
 80090a8:	89a3      	ldrh	r3, [r4, #12]
 80090aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80090ae:	81a3      	strh	r3, [r4, #12]
 80090b0:	f04f 30ff 	mov.w	r0, #4294967295
 80090b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80090b8:	6921      	ldr	r1, [r4, #16]
 80090ba:	464a      	mov	r2, r9
 80090bc:	f000 fabe 	bl	800963c <memcpy>
 80090c0:	89a3      	ldrh	r3, [r4, #12]
 80090c2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80090c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80090ca:	81a3      	strh	r3, [r4, #12]
 80090cc:	6126      	str	r6, [r4, #16]
 80090ce:	6165      	str	r5, [r4, #20]
 80090d0:	444e      	add	r6, r9
 80090d2:	eba5 0509 	sub.w	r5, r5, r9
 80090d6:	6026      	str	r6, [r4, #0]
 80090d8:	60a5      	str	r5, [r4, #8]
 80090da:	463e      	mov	r6, r7
 80090dc:	42be      	cmp	r6, r7
 80090de:	d900      	bls.n	80090e2 <__ssputs_r+0x86>
 80090e0:	463e      	mov	r6, r7
 80090e2:	6820      	ldr	r0, [r4, #0]
 80090e4:	4632      	mov	r2, r6
 80090e6:	4641      	mov	r1, r8
 80090e8:	f000 fab6 	bl	8009658 <memmove>
 80090ec:	68a3      	ldr	r3, [r4, #8]
 80090ee:	1b9b      	subs	r3, r3, r6
 80090f0:	60a3      	str	r3, [r4, #8]
 80090f2:	6823      	ldr	r3, [r4, #0]
 80090f4:	4433      	add	r3, r6
 80090f6:	6023      	str	r3, [r4, #0]
 80090f8:	2000      	movs	r0, #0
 80090fa:	e7db      	b.n	80090b4 <__ssputs_r+0x58>
 80090fc:	462a      	mov	r2, r5
 80090fe:	f000 fba5 	bl	800984c <_realloc_r>
 8009102:	4606      	mov	r6, r0
 8009104:	2800      	cmp	r0, #0
 8009106:	d1e1      	bne.n	80090cc <__ssputs_r+0x70>
 8009108:	6921      	ldr	r1, [r4, #16]
 800910a:	4650      	mov	r0, sl
 800910c:	f000 fabe 	bl	800968c <_free_r>
 8009110:	e7c7      	b.n	80090a2 <__ssputs_r+0x46>
	...

08009114 <_svfiprintf_r>:
 8009114:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009118:	4698      	mov	r8, r3
 800911a:	898b      	ldrh	r3, [r1, #12]
 800911c:	061b      	lsls	r3, r3, #24
 800911e:	b09d      	sub	sp, #116	; 0x74
 8009120:	4607      	mov	r7, r0
 8009122:	460d      	mov	r5, r1
 8009124:	4614      	mov	r4, r2
 8009126:	d50e      	bpl.n	8009146 <_svfiprintf_r+0x32>
 8009128:	690b      	ldr	r3, [r1, #16]
 800912a:	b963      	cbnz	r3, 8009146 <_svfiprintf_r+0x32>
 800912c:	2140      	movs	r1, #64	; 0x40
 800912e:	f000 fb19 	bl	8009764 <_malloc_r>
 8009132:	6028      	str	r0, [r5, #0]
 8009134:	6128      	str	r0, [r5, #16]
 8009136:	b920      	cbnz	r0, 8009142 <_svfiprintf_r+0x2e>
 8009138:	230c      	movs	r3, #12
 800913a:	603b      	str	r3, [r7, #0]
 800913c:	f04f 30ff 	mov.w	r0, #4294967295
 8009140:	e0d1      	b.n	80092e6 <_svfiprintf_r+0x1d2>
 8009142:	2340      	movs	r3, #64	; 0x40
 8009144:	616b      	str	r3, [r5, #20]
 8009146:	2300      	movs	r3, #0
 8009148:	9309      	str	r3, [sp, #36]	; 0x24
 800914a:	2320      	movs	r3, #32
 800914c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009150:	f8cd 800c 	str.w	r8, [sp, #12]
 8009154:	2330      	movs	r3, #48	; 0x30
 8009156:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009300 <_svfiprintf_r+0x1ec>
 800915a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800915e:	f04f 0901 	mov.w	r9, #1
 8009162:	4623      	mov	r3, r4
 8009164:	469a      	mov	sl, r3
 8009166:	f813 2b01 	ldrb.w	r2, [r3], #1
 800916a:	b10a      	cbz	r2, 8009170 <_svfiprintf_r+0x5c>
 800916c:	2a25      	cmp	r2, #37	; 0x25
 800916e:	d1f9      	bne.n	8009164 <_svfiprintf_r+0x50>
 8009170:	ebba 0b04 	subs.w	fp, sl, r4
 8009174:	d00b      	beq.n	800918e <_svfiprintf_r+0x7a>
 8009176:	465b      	mov	r3, fp
 8009178:	4622      	mov	r2, r4
 800917a:	4629      	mov	r1, r5
 800917c:	4638      	mov	r0, r7
 800917e:	f7ff ff6d 	bl	800905c <__ssputs_r>
 8009182:	3001      	adds	r0, #1
 8009184:	f000 80aa 	beq.w	80092dc <_svfiprintf_r+0x1c8>
 8009188:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800918a:	445a      	add	r2, fp
 800918c:	9209      	str	r2, [sp, #36]	; 0x24
 800918e:	f89a 3000 	ldrb.w	r3, [sl]
 8009192:	2b00      	cmp	r3, #0
 8009194:	f000 80a2 	beq.w	80092dc <_svfiprintf_r+0x1c8>
 8009198:	2300      	movs	r3, #0
 800919a:	f04f 32ff 	mov.w	r2, #4294967295
 800919e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80091a2:	f10a 0a01 	add.w	sl, sl, #1
 80091a6:	9304      	str	r3, [sp, #16]
 80091a8:	9307      	str	r3, [sp, #28]
 80091aa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80091ae:	931a      	str	r3, [sp, #104]	; 0x68
 80091b0:	4654      	mov	r4, sl
 80091b2:	2205      	movs	r2, #5
 80091b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80091b8:	4851      	ldr	r0, [pc, #324]	; (8009300 <_svfiprintf_r+0x1ec>)
 80091ba:	f7f7 f811 	bl	80001e0 <memchr>
 80091be:	9a04      	ldr	r2, [sp, #16]
 80091c0:	b9d8      	cbnz	r0, 80091fa <_svfiprintf_r+0xe6>
 80091c2:	06d0      	lsls	r0, r2, #27
 80091c4:	bf44      	itt	mi
 80091c6:	2320      	movmi	r3, #32
 80091c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80091cc:	0711      	lsls	r1, r2, #28
 80091ce:	bf44      	itt	mi
 80091d0:	232b      	movmi	r3, #43	; 0x2b
 80091d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80091d6:	f89a 3000 	ldrb.w	r3, [sl]
 80091da:	2b2a      	cmp	r3, #42	; 0x2a
 80091dc:	d015      	beq.n	800920a <_svfiprintf_r+0xf6>
 80091de:	9a07      	ldr	r2, [sp, #28]
 80091e0:	4654      	mov	r4, sl
 80091e2:	2000      	movs	r0, #0
 80091e4:	f04f 0c0a 	mov.w	ip, #10
 80091e8:	4621      	mov	r1, r4
 80091ea:	f811 3b01 	ldrb.w	r3, [r1], #1
 80091ee:	3b30      	subs	r3, #48	; 0x30
 80091f0:	2b09      	cmp	r3, #9
 80091f2:	d94e      	bls.n	8009292 <_svfiprintf_r+0x17e>
 80091f4:	b1b0      	cbz	r0, 8009224 <_svfiprintf_r+0x110>
 80091f6:	9207      	str	r2, [sp, #28]
 80091f8:	e014      	b.n	8009224 <_svfiprintf_r+0x110>
 80091fa:	eba0 0308 	sub.w	r3, r0, r8
 80091fe:	fa09 f303 	lsl.w	r3, r9, r3
 8009202:	4313      	orrs	r3, r2
 8009204:	9304      	str	r3, [sp, #16]
 8009206:	46a2      	mov	sl, r4
 8009208:	e7d2      	b.n	80091b0 <_svfiprintf_r+0x9c>
 800920a:	9b03      	ldr	r3, [sp, #12]
 800920c:	1d19      	adds	r1, r3, #4
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	9103      	str	r1, [sp, #12]
 8009212:	2b00      	cmp	r3, #0
 8009214:	bfbb      	ittet	lt
 8009216:	425b      	neglt	r3, r3
 8009218:	f042 0202 	orrlt.w	r2, r2, #2
 800921c:	9307      	strge	r3, [sp, #28]
 800921e:	9307      	strlt	r3, [sp, #28]
 8009220:	bfb8      	it	lt
 8009222:	9204      	strlt	r2, [sp, #16]
 8009224:	7823      	ldrb	r3, [r4, #0]
 8009226:	2b2e      	cmp	r3, #46	; 0x2e
 8009228:	d10c      	bne.n	8009244 <_svfiprintf_r+0x130>
 800922a:	7863      	ldrb	r3, [r4, #1]
 800922c:	2b2a      	cmp	r3, #42	; 0x2a
 800922e:	d135      	bne.n	800929c <_svfiprintf_r+0x188>
 8009230:	9b03      	ldr	r3, [sp, #12]
 8009232:	1d1a      	adds	r2, r3, #4
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	9203      	str	r2, [sp, #12]
 8009238:	2b00      	cmp	r3, #0
 800923a:	bfb8      	it	lt
 800923c:	f04f 33ff 	movlt.w	r3, #4294967295
 8009240:	3402      	adds	r4, #2
 8009242:	9305      	str	r3, [sp, #20]
 8009244:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009310 <_svfiprintf_r+0x1fc>
 8009248:	7821      	ldrb	r1, [r4, #0]
 800924a:	2203      	movs	r2, #3
 800924c:	4650      	mov	r0, sl
 800924e:	f7f6 ffc7 	bl	80001e0 <memchr>
 8009252:	b140      	cbz	r0, 8009266 <_svfiprintf_r+0x152>
 8009254:	2340      	movs	r3, #64	; 0x40
 8009256:	eba0 000a 	sub.w	r0, r0, sl
 800925a:	fa03 f000 	lsl.w	r0, r3, r0
 800925e:	9b04      	ldr	r3, [sp, #16]
 8009260:	4303      	orrs	r3, r0
 8009262:	3401      	adds	r4, #1
 8009264:	9304      	str	r3, [sp, #16]
 8009266:	f814 1b01 	ldrb.w	r1, [r4], #1
 800926a:	4826      	ldr	r0, [pc, #152]	; (8009304 <_svfiprintf_r+0x1f0>)
 800926c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009270:	2206      	movs	r2, #6
 8009272:	f7f6 ffb5 	bl	80001e0 <memchr>
 8009276:	2800      	cmp	r0, #0
 8009278:	d038      	beq.n	80092ec <_svfiprintf_r+0x1d8>
 800927a:	4b23      	ldr	r3, [pc, #140]	; (8009308 <_svfiprintf_r+0x1f4>)
 800927c:	bb1b      	cbnz	r3, 80092c6 <_svfiprintf_r+0x1b2>
 800927e:	9b03      	ldr	r3, [sp, #12]
 8009280:	3307      	adds	r3, #7
 8009282:	f023 0307 	bic.w	r3, r3, #7
 8009286:	3308      	adds	r3, #8
 8009288:	9303      	str	r3, [sp, #12]
 800928a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800928c:	4433      	add	r3, r6
 800928e:	9309      	str	r3, [sp, #36]	; 0x24
 8009290:	e767      	b.n	8009162 <_svfiprintf_r+0x4e>
 8009292:	fb0c 3202 	mla	r2, ip, r2, r3
 8009296:	460c      	mov	r4, r1
 8009298:	2001      	movs	r0, #1
 800929a:	e7a5      	b.n	80091e8 <_svfiprintf_r+0xd4>
 800929c:	2300      	movs	r3, #0
 800929e:	3401      	adds	r4, #1
 80092a0:	9305      	str	r3, [sp, #20]
 80092a2:	4619      	mov	r1, r3
 80092a4:	f04f 0c0a 	mov.w	ip, #10
 80092a8:	4620      	mov	r0, r4
 80092aa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80092ae:	3a30      	subs	r2, #48	; 0x30
 80092b0:	2a09      	cmp	r2, #9
 80092b2:	d903      	bls.n	80092bc <_svfiprintf_r+0x1a8>
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d0c5      	beq.n	8009244 <_svfiprintf_r+0x130>
 80092b8:	9105      	str	r1, [sp, #20]
 80092ba:	e7c3      	b.n	8009244 <_svfiprintf_r+0x130>
 80092bc:	fb0c 2101 	mla	r1, ip, r1, r2
 80092c0:	4604      	mov	r4, r0
 80092c2:	2301      	movs	r3, #1
 80092c4:	e7f0      	b.n	80092a8 <_svfiprintf_r+0x194>
 80092c6:	ab03      	add	r3, sp, #12
 80092c8:	9300      	str	r3, [sp, #0]
 80092ca:	462a      	mov	r2, r5
 80092cc:	4b0f      	ldr	r3, [pc, #60]	; (800930c <_svfiprintf_r+0x1f8>)
 80092ce:	a904      	add	r1, sp, #16
 80092d0:	4638      	mov	r0, r7
 80092d2:	f3af 8000 	nop.w
 80092d6:	1c42      	adds	r2, r0, #1
 80092d8:	4606      	mov	r6, r0
 80092da:	d1d6      	bne.n	800928a <_svfiprintf_r+0x176>
 80092dc:	89ab      	ldrh	r3, [r5, #12]
 80092de:	065b      	lsls	r3, r3, #25
 80092e0:	f53f af2c 	bmi.w	800913c <_svfiprintf_r+0x28>
 80092e4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80092e6:	b01d      	add	sp, #116	; 0x74
 80092e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092ec:	ab03      	add	r3, sp, #12
 80092ee:	9300      	str	r3, [sp, #0]
 80092f0:	462a      	mov	r2, r5
 80092f2:	4b06      	ldr	r3, [pc, #24]	; (800930c <_svfiprintf_r+0x1f8>)
 80092f4:	a904      	add	r1, sp, #16
 80092f6:	4638      	mov	r0, r7
 80092f8:	f000 f87a 	bl	80093f0 <_printf_i>
 80092fc:	e7eb      	b.n	80092d6 <_svfiprintf_r+0x1c2>
 80092fe:	bf00      	nop
 8009300:	08009978 	.word	0x08009978
 8009304:	08009982 	.word	0x08009982
 8009308:	00000000 	.word	0x00000000
 800930c:	0800905d 	.word	0x0800905d
 8009310:	0800997e 	.word	0x0800997e

08009314 <_printf_common>:
 8009314:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009318:	4616      	mov	r6, r2
 800931a:	4699      	mov	r9, r3
 800931c:	688a      	ldr	r2, [r1, #8]
 800931e:	690b      	ldr	r3, [r1, #16]
 8009320:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009324:	4293      	cmp	r3, r2
 8009326:	bfb8      	it	lt
 8009328:	4613      	movlt	r3, r2
 800932a:	6033      	str	r3, [r6, #0]
 800932c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009330:	4607      	mov	r7, r0
 8009332:	460c      	mov	r4, r1
 8009334:	b10a      	cbz	r2, 800933a <_printf_common+0x26>
 8009336:	3301      	adds	r3, #1
 8009338:	6033      	str	r3, [r6, #0]
 800933a:	6823      	ldr	r3, [r4, #0]
 800933c:	0699      	lsls	r1, r3, #26
 800933e:	bf42      	ittt	mi
 8009340:	6833      	ldrmi	r3, [r6, #0]
 8009342:	3302      	addmi	r3, #2
 8009344:	6033      	strmi	r3, [r6, #0]
 8009346:	6825      	ldr	r5, [r4, #0]
 8009348:	f015 0506 	ands.w	r5, r5, #6
 800934c:	d106      	bne.n	800935c <_printf_common+0x48>
 800934e:	f104 0a19 	add.w	sl, r4, #25
 8009352:	68e3      	ldr	r3, [r4, #12]
 8009354:	6832      	ldr	r2, [r6, #0]
 8009356:	1a9b      	subs	r3, r3, r2
 8009358:	42ab      	cmp	r3, r5
 800935a:	dc26      	bgt.n	80093aa <_printf_common+0x96>
 800935c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009360:	1e13      	subs	r3, r2, #0
 8009362:	6822      	ldr	r2, [r4, #0]
 8009364:	bf18      	it	ne
 8009366:	2301      	movne	r3, #1
 8009368:	0692      	lsls	r2, r2, #26
 800936a:	d42b      	bmi.n	80093c4 <_printf_common+0xb0>
 800936c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009370:	4649      	mov	r1, r9
 8009372:	4638      	mov	r0, r7
 8009374:	47c0      	blx	r8
 8009376:	3001      	adds	r0, #1
 8009378:	d01e      	beq.n	80093b8 <_printf_common+0xa4>
 800937a:	6823      	ldr	r3, [r4, #0]
 800937c:	68e5      	ldr	r5, [r4, #12]
 800937e:	6832      	ldr	r2, [r6, #0]
 8009380:	f003 0306 	and.w	r3, r3, #6
 8009384:	2b04      	cmp	r3, #4
 8009386:	bf08      	it	eq
 8009388:	1aad      	subeq	r5, r5, r2
 800938a:	68a3      	ldr	r3, [r4, #8]
 800938c:	6922      	ldr	r2, [r4, #16]
 800938e:	bf0c      	ite	eq
 8009390:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009394:	2500      	movne	r5, #0
 8009396:	4293      	cmp	r3, r2
 8009398:	bfc4      	itt	gt
 800939a:	1a9b      	subgt	r3, r3, r2
 800939c:	18ed      	addgt	r5, r5, r3
 800939e:	2600      	movs	r6, #0
 80093a0:	341a      	adds	r4, #26
 80093a2:	42b5      	cmp	r5, r6
 80093a4:	d11a      	bne.n	80093dc <_printf_common+0xc8>
 80093a6:	2000      	movs	r0, #0
 80093a8:	e008      	b.n	80093bc <_printf_common+0xa8>
 80093aa:	2301      	movs	r3, #1
 80093ac:	4652      	mov	r2, sl
 80093ae:	4649      	mov	r1, r9
 80093b0:	4638      	mov	r0, r7
 80093b2:	47c0      	blx	r8
 80093b4:	3001      	adds	r0, #1
 80093b6:	d103      	bne.n	80093c0 <_printf_common+0xac>
 80093b8:	f04f 30ff 	mov.w	r0, #4294967295
 80093bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80093c0:	3501      	adds	r5, #1
 80093c2:	e7c6      	b.n	8009352 <_printf_common+0x3e>
 80093c4:	18e1      	adds	r1, r4, r3
 80093c6:	1c5a      	adds	r2, r3, #1
 80093c8:	2030      	movs	r0, #48	; 0x30
 80093ca:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80093ce:	4422      	add	r2, r4
 80093d0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80093d4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80093d8:	3302      	adds	r3, #2
 80093da:	e7c7      	b.n	800936c <_printf_common+0x58>
 80093dc:	2301      	movs	r3, #1
 80093de:	4622      	mov	r2, r4
 80093e0:	4649      	mov	r1, r9
 80093e2:	4638      	mov	r0, r7
 80093e4:	47c0      	blx	r8
 80093e6:	3001      	adds	r0, #1
 80093e8:	d0e6      	beq.n	80093b8 <_printf_common+0xa4>
 80093ea:	3601      	adds	r6, #1
 80093ec:	e7d9      	b.n	80093a2 <_printf_common+0x8e>
	...

080093f0 <_printf_i>:
 80093f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80093f4:	7e0f      	ldrb	r7, [r1, #24]
 80093f6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80093f8:	2f78      	cmp	r7, #120	; 0x78
 80093fa:	4691      	mov	r9, r2
 80093fc:	4680      	mov	r8, r0
 80093fe:	460c      	mov	r4, r1
 8009400:	469a      	mov	sl, r3
 8009402:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009406:	d807      	bhi.n	8009418 <_printf_i+0x28>
 8009408:	2f62      	cmp	r7, #98	; 0x62
 800940a:	d80a      	bhi.n	8009422 <_printf_i+0x32>
 800940c:	2f00      	cmp	r7, #0
 800940e:	f000 80d8 	beq.w	80095c2 <_printf_i+0x1d2>
 8009412:	2f58      	cmp	r7, #88	; 0x58
 8009414:	f000 80a3 	beq.w	800955e <_printf_i+0x16e>
 8009418:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800941c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009420:	e03a      	b.n	8009498 <_printf_i+0xa8>
 8009422:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009426:	2b15      	cmp	r3, #21
 8009428:	d8f6      	bhi.n	8009418 <_printf_i+0x28>
 800942a:	a101      	add	r1, pc, #4	; (adr r1, 8009430 <_printf_i+0x40>)
 800942c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009430:	08009489 	.word	0x08009489
 8009434:	0800949d 	.word	0x0800949d
 8009438:	08009419 	.word	0x08009419
 800943c:	08009419 	.word	0x08009419
 8009440:	08009419 	.word	0x08009419
 8009444:	08009419 	.word	0x08009419
 8009448:	0800949d 	.word	0x0800949d
 800944c:	08009419 	.word	0x08009419
 8009450:	08009419 	.word	0x08009419
 8009454:	08009419 	.word	0x08009419
 8009458:	08009419 	.word	0x08009419
 800945c:	080095a9 	.word	0x080095a9
 8009460:	080094cd 	.word	0x080094cd
 8009464:	0800958b 	.word	0x0800958b
 8009468:	08009419 	.word	0x08009419
 800946c:	08009419 	.word	0x08009419
 8009470:	080095cb 	.word	0x080095cb
 8009474:	08009419 	.word	0x08009419
 8009478:	080094cd 	.word	0x080094cd
 800947c:	08009419 	.word	0x08009419
 8009480:	08009419 	.word	0x08009419
 8009484:	08009593 	.word	0x08009593
 8009488:	682b      	ldr	r3, [r5, #0]
 800948a:	1d1a      	adds	r2, r3, #4
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	602a      	str	r2, [r5, #0]
 8009490:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009494:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009498:	2301      	movs	r3, #1
 800949a:	e0a3      	b.n	80095e4 <_printf_i+0x1f4>
 800949c:	6820      	ldr	r0, [r4, #0]
 800949e:	6829      	ldr	r1, [r5, #0]
 80094a0:	0606      	lsls	r6, r0, #24
 80094a2:	f101 0304 	add.w	r3, r1, #4
 80094a6:	d50a      	bpl.n	80094be <_printf_i+0xce>
 80094a8:	680e      	ldr	r6, [r1, #0]
 80094aa:	602b      	str	r3, [r5, #0]
 80094ac:	2e00      	cmp	r6, #0
 80094ae:	da03      	bge.n	80094b8 <_printf_i+0xc8>
 80094b0:	232d      	movs	r3, #45	; 0x2d
 80094b2:	4276      	negs	r6, r6
 80094b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80094b8:	485e      	ldr	r0, [pc, #376]	; (8009634 <_printf_i+0x244>)
 80094ba:	230a      	movs	r3, #10
 80094bc:	e019      	b.n	80094f2 <_printf_i+0x102>
 80094be:	680e      	ldr	r6, [r1, #0]
 80094c0:	602b      	str	r3, [r5, #0]
 80094c2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80094c6:	bf18      	it	ne
 80094c8:	b236      	sxthne	r6, r6
 80094ca:	e7ef      	b.n	80094ac <_printf_i+0xbc>
 80094cc:	682b      	ldr	r3, [r5, #0]
 80094ce:	6820      	ldr	r0, [r4, #0]
 80094d0:	1d19      	adds	r1, r3, #4
 80094d2:	6029      	str	r1, [r5, #0]
 80094d4:	0601      	lsls	r1, r0, #24
 80094d6:	d501      	bpl.n	80094dc <_printf_i+0xec>
 80094d8:	681e      	ldr	r6, [r3, #0]
 80094da:	e002      	b.n	80094e2 <_printf_i+0xf2>
 80094dc:	0646      	lsls	r6, r0, #25
 80094de:	d5fb      	bpl.n	80094d8 <_printf_i+0xe8>
 80094e0:	881e      	ldrh	r6, [r3, #0]
 80094e2:	4854      	ldr	r0, [pc, #336]	; (8009634 <_printf_i+0x244>)
 80094e4:	2f6f      	cmp	r7, #111	; 0x6f
 80094e6:	bf0c      	ite	eq
 80094e8:	2308      	moveq	r3, #8
 80094ea:	230a      	movne	r3, #10
 80094ec:	2100      	movs	r1, #0
 80094ee:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80094f2:	6865      	ldr	r5, [r4, #4]
 80094f4:	60a5      	str	r5, [r4, #8]
 80094f6:	2d00      	cmp	r5, #0
 80094f8:	bfa2      	ittt	ge
 80094fa:	6821      	ldrge	r1, [r4, #0]
 80094fc:	f021 0104 	bicge.w	r1, r1, #4
 8009500:	6021      	strge	r1, [r4, #0]
 8009502:	b90e      	cbnz	r6, 8009508 <_printf_i+0x118>
 8009504:	2d00      	cmp	r5, #0
 8009506:	d04d      	beq.n	80095a4 <_printf_i+0x1b4>
 8009508:	4615      	mov	r5, r2
 800950a:	fbb6 f1f3 	udiv	r1, r6, r3
 800950e:	fb03 6711 	mls	r7, r3, r1, r6
 8009512:	5dc7      	ldrb	r7, [r0, r7]
 8009514:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009518:	4637      	mov	r7, r6
 800951a:	42bb      	cmp	r3, r7
 800951c:	460e      	mov	r6, r1
 800951e:	d9f4      	bls.n	800950a <_printf_i+0x11a>
 8009520:	2b08      	cmp	r3, #8
 8009522:	d10b      	bne.n	800953c <_printf_i+0x14c>
 8009524:	6823      	ldr	r3, [r4, #0]
 8009526:	07de      	lsls	r6, r3, #31
 8009528:	d508      	bpl.n	800953c <_printf_i+0x14c>
 800952a:	6923      	ldr	r3, [r4, #16]
 800952c:	6861      	ldr	r1, [r4, #4]
 800952e:	4299      	cmp	r1, r3
 8009530:	bfde      	ittt	le
 8009532:	2330      	movle	r3, #48	; 0x30
 8009534:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009538:	f105 35ff 	addle.w	r5, r5, #4294967295
 800953c:	1b52      	subs	r2, r2, r5
 800953e:	6122      	str	r2, [r4, #16]
 8009540:	f8cd a000 	str.w	sl, [sp]
 8009544:	464b      	mov	r3, r9
 8009546:	aa03      	add	r2, sp, #12
 8009548:	4621      	mov	r1, r4
 800954a:	4640      	mov	r0, r8
 800954c:	f7ff fee2 	bl	8009314 <_printf_common>
 8009550:	3001      	adds	r0, #1
 8009552:	d14c      	bne.n	80095ee <_printf_i+0x1fe>
 8009554:	f04f 30ff 	mov.w	r0, #4294967295
 8009558:	b004      	add	sp, #16
 800955a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800955e:	4835      	ldr	r0, [pc, #212]	; (8009634 <_printf_i+0x244>)
 8009560:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009564:	6829      	ldr	r1, [r5, #0]
 8009566:	6823      	ldr	r3, [r4, #0]
 8009568:	f851 6b04 	ldr.w	r6, [r1], #4
 800956c:	6029      	str	r1, [r5, #0]
 800956e:	061d      	lsls	r5, r3, #24
 8009570:	d514      	bpl.n	800959c <_printf_i+0x1ac>
 8009572:	07df      	lsls	r7, r3, #31
 8009574:	bf44      	itt	mi
 8009576:	f043 0320 	orrmi.w	r3, r3, #32
 800957a:	6023      	strmi	r3, [r4, #0]
 800957c:	b91e      	cbnz	r6, 8009586 <_printf_i+0x196>
 800957e:	6823      	ldr	r3, [r4, #0]
 8009580:	f023 0320 	bic.w	r3, r3, #32
 8009584:	6023      	str	r3, [r4, #0]
 8009586:	2310      	movs	r3, #16
 8009588:	e7b0      	b.n	80094ec <_printf_i+0xfc>
 800958a:	6823      	ldr	r3, [r4, #0]
 800958c:	f043 0320 	orr.w	r3, r3, #32
 8009590:	6023      	str	r3, [r4, #0]
 8009592:	2378      	movs	r3, #120	; 0x78
 8009594:	4828      	ldr	r0, [pc, #160]	; (8009638 <_printf_i+0x248>)
 8009596:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800959a:	e7e3      	b.n	8009564 <_printf_i+0x174>
 800959c:	0659      	lsls	r1, r3, #25
 800959e:	bf48      	it	mi
 80095a0:	b2b6      	uxthmi	r6, r6
 80095a2:	e7e6      	b.n	8009572 <_printf_i+0x182>
 80095a4:	4615      	mov	r5, r2
 80095a6:	e7bb      	b.n	8009520 <_printf_i+0x130>
 80095a8:	682b      	ldr	r3, [r5, #0]
 80095aa:	6826      	ldr	r6, [r4, #0]
 80095ac:	6961      	ldr	r1, [r4, #20]
 80095ae:	1d18      	adds	r0, r3, #4
 80095b0:	6028      	str	r0, [r5, #0]
 80095b2:	0635      	lsls	r5, r6, #24
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	d501      	bpl.n	80095bc <_printf_i+0x1cc>
 80095b8:	6019      	str	r1, [r3, #0]
 80095ba:	e002      	b.n	80095c2 <_printf_i+0x1d2>
 80095bc:	0670      	lsls	r0, r6, #25
 80095be:	d5fb      	bpl.n	80095b8 <_printf_i+0x1c8>
 80095c0:	8019      	strh	r1, [r3, #0]
 80095c2:	2300      	movs	r3, #0
 80095c4:	6123      	str	r3, [r4, #16]
 80095c6:	4615      	mov	r5, r2
 80095c8:	e7ba      	b.n	8009540 <_printf_i+0x150>
 80095ca:	682b      	ldr	r3, [r5, #0]
 80095cc:	1d1a      	adds	r2, r3, #4
 80095ce:	602a      	str	r2, [r5, #0]
 80095d0:	681d      	ldr	r5, [r3, #0]
 80095d2:	6862      	ldr	r2, [r4, #4]
 80095d4:	2100      	movs	r1, #0
 80095d6:	4628      	mov	r0, r5
 80095d8:	f7f6 fe02 	bl	80001e0 <memchr>
 80095dc:	b108      	cbz	r0, 80095e2 <_printf_i+0x1f2>
 80095de:	1b40      	subs	r0, r0, r5
 80095e0:	6060      	str	r0, [r4, #4]
 80095e2:	6863      	ldr	r3, [r4, #4]
 80095e4:	6123      	str	r3, [r4, #16]
 80095e6:	2300      	movs	r3, #0
 80095e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80095ec:	e7a8      	b.n	8009540 <_printf_i+0x150>
 80095ee:	6923      	ldr	r3, [r4, #16]
 80095f0:	462a      	mov	r2, r5
 80095f2:	4649      	mov	r1, r9
 80095f4:	4640      	mov	r0, r8
 80095f6:	47d0      	blx	sl
 80095f8:	3001      	adds	r0, #1
 80095fa:	d0ab      	beq.n	8009554 <_printf_i+0x164>
 80095fc:	6823      	ldr	r3, [r4, #0]
 80095fe:	079b      	lsls	r3, r3, #30
 8009600:	d413      	bmi.n	800962a <_printf_i+0x23a>
 8009602:	68e0      	ldr	r0, [r4, #12]
 8009604:	9b03      	ldr	r3, [sp, #12]
 8009606:	4298      	cmp	r0, r3
 8009608:	bfb8      	it	lt
 800960a:	4618      	movlt	r0, r3
 800960c:	e7a4      	b.n	8009558 <_printf_i+0x168>
 800960e:	2301      	movs	r3, #1
 8009610:	4632      	mov	r2, r6
 8009612:	4649      	mov	r1, r9
 8009614:	4640      	mov	r0, r8
 8009616:	47d0      	blx	sl
 8009618:	3001      	adds	r0, #1
 800961a:	d09b      	beq.n	8009554 <_printf_i+0x164>
 800961c:	3501      	adds	r5, #1
 800961e:	68e3      	ldr	r3, [r4, #12]
 8009620:	9903      	ldr	r1, [sp, #12]
 8009622:	1a5b      	subs	r3, r3, r1
 8009624:	42ab      	cmp	r3, r5
 8009626:	dcf2      	bgt.n	800960e <_printf_i+0x21e>
 8009628:	e7eb      	b.n	8009602 <_printf_i+0x212>
 800962a:	2500      	movs	r5, #0
 800962c:	f104 0619 	add.w	r6, r4, #25
 8009630:	e7f5      	b.n	800961e <_printf_i+0x22e>
 8009632:	bf00      	nop
 8009634:	08009989 	.word	0x08009989
 8009638:	0800999a 	.word	0x0800999a

0800963c <memcpy>:
 800963c:	440a      	add	r2, r1
 800963e:	4291      	cmp	r1, r2
 8009640:	f100 33ff 	add.w	r3, r0, #4294967295
 8009644:	d100      	bne.n	8009648 <memcpy+0xc>
 8009646:	4770      	bx	lr
 8009648:	b510      	push	{r4, lr}
 800964a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800964e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009652:	4291      	cmp	r1, r2
 8009654:	d1f9      	bne.n	800964a <memcpy+0xe>
 8009656:	bd10      	pop	{r4, pc}

08009658 <memmove>:
 8009658:	4288      	cmp	r0, r1
 800965a:	b510      	push	{r4, lr}
 800965c:	eb01 0402 	add.w	r4, r1, r2
 8009660:	d902      	bls.n	8009668 <memmove+0x10>
 8009662:	4284      	cmp	r4, r0
 8009664:	4623      	mov	r3, r4
 8009666:	d807      	bhi.n	8009678 <memmove+0x20>
 8009668:	1e43      	subs	r3, r0, #1
 800966a:	42a1      	cmp	r1, r4
 800966c:	d008      	beq.n	8009680 <memmove+0x28>
 800966e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009672:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009676:	e7f8      	b.n	800966a <memmove+0x12>
 8009678:	4402      	add	r2, r0
 800967a:	4601      	mov	r1, r0
 800967c:	428a      	cmp	r2, r1
 800967e:	d100      	bne.n	8009682 <memmove+0x2a>
 8009680:	bd10      	pop	{r4, pc}
 8009682:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009686:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800968a:	e7f7      	b.n	800967c <memmove+0x24>

0800968c <_free_r>:
 800968c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800968e:	2900      	cmp	r1, #0
 8009690:	d044      	beq.n	800971c <_free_r+0x90>
 8009692:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009696:	9001      	str	r0, [sp, #4]
 8009698:	2b00      	cmp	r3, #0
 800969a:	f1a1 0404 	sub.w	r4, r1, #4
 800969e:	bfb8      	it	lt
 80096a0:	18e4      	addlt	r4, r4, r3
 80096a2:	f000 f913 	bl	80098cc <__malloc_lock>
 80096a6:	4a1e      	ldr	r2, [pc, #120]	; (8009720 <_free_r+0x94>)
 80096a8:	9801      	ldr	r0, [sp, #4]
 80096aa:	6813      	ldr	r3, [r2, #0]
 80096ac:	b933      	cbnz	r3, 80096bc <_free_r+0x30>
 80096ae:	6063      	str	r3, [r4, #4]
 80096b0:	6014      	str	r4, [r2, #0]
 80096b2:	b003      	add	sp, #12
 80096b4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80096b8:	f000 b90e 	b.w	80098d8 <__malloc_unlock>
 80096bc:	42a3      	cmp	r3, r4
 80096be:	d908      	bls.n	80096d2 <_free_r+0x46>
 80096c0:	6825      	ldr	r5, [r4, #0]
 80096c2:	1961      	adds	r1, r4, r5
 80096c4:	428b      	cmp	r3, r1
 80096c6:	bf01      	itttt	eq
 80096c8:	6819      	ldreq	r1, [r3, #0]
 80096ca:	685b      	ldreq	r3, [r3, #4]
 80096cc:	1949      	addeq	r1, r1, r5
 80096ce:	6021      	streq	r1, [r4, #0]
 80096d0:	e7ed      	b.n	80096ae <_free_r+0x22>
 80096d2:	461a      	mov	r2, r3
 80096d4:	685b      	ldr	r3, [r3, #4]
 80096d6:	b10b      	cbz	r3, 80096dc <_free_r+0x50>
 80096d8:	42a3      	cmp	r3, r4
 80096da:	d9fa      	bls.n	80096d2 <_free_r+0x46>
 80096dc:	6811      	ldr	r1, [r2, #0]
 80096de:	1855      	adds	r5, r2, r1
 80096e0:	42a5      	cmp	r5, r4
 80096e2:	d10b      	bne.n	80096fc <_free_r+0x70>
 80096e4:	6824      	ldr	r4, [r4, #0]
 80096e6:	4421      	add	r1, r4
 80096e8:	1854      	adds	r4, r2, r1
 80096ea:	42a3      	cmp	r3, r4
 80096ec:	6011      	str	r1, [r2, #0]
 80096ee:	d1e0      	bne.n	80096b2 <_free_r+0x26>
 80096f0:	681c      	ldr	r4, [r3, #0]
 80096f2:	685b      	ldr	r3, [r3, #4]
 80096f4:	6053      	str	r3, [r2, #4]
 80096f6:	4421      	add	r1, r4
 80096f8:	6011      	str	r1, [r2, #0]
 80096fa:	e7da      	b.n	80096b2 <_free_r+0x26>
 80096fc:	d902      	bls.n	8009704 <_free_r+0x78>
 80096fe:	230c      	movs	r3, #12
 8009700:	6003      	str	r3, [r0, #0]
 8009702:	e7d6      	b.n	80096b2 <_free_r+0x26>
 8009704:	6825      	ldr	r5, [r4, #0]
 8009706:	1961      	adds	r1, r4, r5
 8009708:	428b      	cmp	r3, r1
 800970a:	bf04      	itt	eq
 800970c:	6819      	ldreq	r1, [r3, #0]
 800970e:	685b      	ldreq	r3, [r3, #4]
 8009710:	6063      	str	r3, [r4, #4]
 8009712:	bf04      	itt	eq
 8009714:	1949      	addeq	r1, r1, r5
 8009716:	6021      	streq	r1, [r4, #0]
 8009718:	6054      	str	r4, [r2, #4]
 800971a:	e7ca      	b.n	80096b2 <_free_r+0x26>
 800971c:	b003      	add	sp, #12
 800971e:	bd30      	pop	{r4, r5, pc}
 8009720:	200024d8 	.word	0x200024d8

08009724 <sbrk_aligned>:
 8009724:	b570      	push	{r4, r5, r6, lr}
 8009726:	4e0e      	ldr	r6, [pc, #56]	; (8009760 <sbrk_aligned+0x3c>)
 8009728:	460c      	mov	r4, r1
 800972a:	6831      	ldr	r1, [r6, #0]
 800972c:	4605      	mov	r5, r0
 800972e:	b911      	cbnz	r1, 8009736 <sbrk_aligned+0x12>
 8009730:	f000 f8bc 	bl	80098ac <_sbrk_r>
 8009734:	6030      	str	r0, [r6, #0]
 8009736:	4621      	mov	r1, r4
 8009738:	4628      	mov	r0, r5
 800973a:	f000 f8b7 	bl	80098ac <_sbrk_r>
 800973e:	1c43      	adds	r3, r0, #1
 8009740:	d00a      	beq.n	8009758 <sbrk_aligned+0x34>
 8009742:	1cc4      	adds	r4, r0, #3
 8009744:	f024 0403 	bic.w	r4, r4, #3
 8009748:	42a0      	cmp	r0, r4
 800974a:	d007      	beq.n	800975c <sbrk_aligned+0x38>
 800974c:	1a21      	subs	r1, r4, r0
 800974e:	4628      	mov	r0, r5
 8009750:	f000 f8ac 	bl	80098ac <_sbrk_r>
 8009754:	3001      	adds	r0, #1
 8009756:	d101      	bne.n	800975c <sbrk_aligned+0x38>
 8009758:	f04f 34ff 	mov.w	r4, #4294967295
 800975c:	4620      	mov	r0, r4
 800975e:	bd70      	pop	{r4, r5, r6, pc}
 8009760:	200024dc 	.word	0x200024dc

08009764 <_malloc_r>:
 8009764:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009768:	1ccd      	adds	r5, r1, #3
 800976a:	f025 0503 	bic.w	r5, r5, #3
 800976e:	3508      	adds	r5, #8
 8009770:	2d0c      	cmp	r5, #12
 8009772:	bf38      	it	cc
 8009774:	250c      	movcc	r5, #12
 8009776:	2d00      	cmp	r5, #0
 8009778:	4607      	mov	r7, r0
 800977a:	db01      	blt.n	8009780 <_malloc_r+0x1c>
 800977c:	42a9      	cmp	r1, r5
 800977e:	d905      	bls.n	800978c <_malloc_r+0x28>
 8009780:	230c      	movs	r3, #12
 8009782:	603b      	str	r3, [r7, #0]
 8009784:	2600      	movs	r6, #0
 8009786:	4630      	mov	r0, r6
 8009788:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800978c:	4e2e      	ldr	r6, [pc, #184]	; (8009848 <_malloc_r+0xe4>)
 800978e:	f000 f89d 	bl	80098cc <__malloc_lock>
 8009792:	6833      	ldr	r3, [r6, #0]
 8009794:	461c      	mov	r4, r3
 8009796:	bb34      	cbnz	r4, 80097e6 <_malloc_r+0x82>
 8009798:	4629      	mov	r1, r5
 800979a:	4638      	mov	r0, r7
 800979c:	f7ff ffc2 	bl	8009724 <sbrk_aligned>
 80097a0:	1c43      	adds	r3, r0, #1
 80097a2:	4604      	mov	r4, r0
 80097a4:	d14d      	bne.n	8009842 <_malloc_r+0xde>
 80097a6:	6834      	ldr	r4, [r6, #0]
 80097a8:	4626      	mov	r6, r4
 80097aa:	2e00      	cmp	r6, #0
 80097ac:	d140      	bne.n	8009830 <_malloc_r+0xcc>
 80097ae:	6823      	ldr	r3, [r4, #0]
 80097b0:	4631      	mov	r1, r6
 80097b2:	4638      	mov	r0, r7
 80097b4:	eb04 0803 	add.w	r8, r4, r3
 80097b8:	f000 f878 	bl	80098ac <_sbrk_r>
 80097bc:	4580      	cmp	r8, r0
 80097be:	d13a      	bne.n	8009836 <_malloc_r+0xd2>
 80097c0:	6821      	ldr	r1, [r4, #0]
 80097c2:	3503      	adds	r5, #3
 80097c4:	1a6d      	subs	r5, r5, r1
 80097c6:	f025 0503 	bic.w	r5, r5, #3
 80097ca:	3508      	adds	r5, #8
 80097cc:	2d0c      	cmp	r5, #12
 80097ce:	bf38      	it	cc
 80097d0:	250c      	movcc	r5, #12
 80097d2:	4629      	mov	r1, r5
 80097d4:	4638      	mov	r0, r7
 80097d6:	f7ff ffa5 	bl	8009724 <sbrk_aligned>
 80097da:	3001      	adds	r0, #1
 80097dc:	d02b      	beq.n	8009836 <_malloc_r+0xd2>
 80097de:	6823      	ldr	r3, [r4, #0]
 80097e0:	442b      	add	r3, r5
 80097e2:	6023      	str	r3, [r4, #0]
 80097e4:	e00e      	b.n	8009804 <_malloc_r+0xa0>
 80097e6:	6822      	ldr	r2, [r4, #0]
 80097e8:	1b52      	subs	r2, r2, r5
 80097ea:	d41e      	bmi.n	800982a <_malloc_r+0xc6>
 80097ec:	2a0b      	cmp	r2, #11
 80097ee:	d916      	bls.n	800981e <_malloc_r+0xba>
 80097f0:	1961      	adds	r1, r4, r5
 80097f2:	42a3      	cmp	r3, r4
 80097f4:	6025      	str	r5, [r4, #0]
 80097f6:	bf18      	it	ne
 80097f8:	6059      	strne	r1, [r3, #4]
 80097fa:	6863      	ldr	r3, [r4, #4]
 80097fc:	bf08      	it	eq
 80097fe:	6031      	streq	r1, [r6, #0]
 8009800:	5162      	str	r2, [r4, r5]
 8009802:	604b      	str	r3, [r1, #4]
 8009804:	4638      	mov	r0, r7
 8009806:	f104 060b 	add.w	r6, r4, #11
 800980a:	f000 f865 	bl	80098d8 <__malloc_unlock>
 800980e:	f026 0607 	bic.w	r6, r6, #7
 8009812:	1d23      	adds	r3, r4, #4
 8009814:	1af2      	subs	r2, r6, r3
 8009816:	d0b6      	beq.n	8009786 <_malloc_r+0x22>
 8009818:	1b9b      	subs	r3, r3, r6
 800981a:	50a3      	str	r3, [r4, r2]
 800981c:	e7b3      	b.n	8009786 <_malloc_r+0x22>
 800981e:	6862      	ldr	r2, [r4, #4]
 8009820:	42a3      	cmp	r3, r4
 8009822:	bf0c      	ite	eq
 8009824:	6032      	streq	r2, [r6, #0]
 8009826:	605a      	strne	r2, [r3, #4]
 8009828:	e7ec      	b.n	8009804 <_malloc_r+0xa0>
 800982a:	4623      	mov	r3, r4
 800982c:	6864      	ldr	r4, [r4, #4]
 800982e:	e7b2      	b.n	8009796 <_malloc_r+0x32>
 8009830:	4634      	mov	r4, r6
 8009832:	6876      	ldr	r6, [r6, #4]
 8009834:	e7b9      	b.n	80097aa <_malloc_r+0x46>
 8009836:	230c      	movs	r3, #12
 8009838:	603b      	str	r3, [r7, #0]
 800983a:	4638      	mov	r0, r7
 800983c:	f000 f84c 	bl	80098d8 <__malloc_unlock>
 8009840:	e7a1      	b.n	8009786 <_malloc_r+0x22>
 8009842:	6025      	str	r5, [r4, #0]
 8009844:	e7de      	b.n	8009804 <_malloc_r+0xa0>
 8009846:	bf00      	nop
 8009848:	200024d8 	.word	0x200024d8

0800984c <_realloc_r>:
 800984c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009850:	4680      	mov	r8, r0
 8009852:	4614      	mov	r4, r2
 8009854:	460e      	mov	r6, r1
 8009856:	b921      	cbnz	r1, 8009862 <_realloc_r+0x16>
 8009858:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800985c:	4611      	mov	r1, r2
 800985e:	f7ff bf81 	b.w	8009764 <_malloc_r>
 8009862:	b92a      	cbnz	r2, 8009870 <_realloc_r+0x24>
 8009864:	f7ff ff12 	bl	800968c <_free_r>
 8009868:	4625      	mov	r5, r4
 800986a:	4628      	mov	r0, r5
 800986c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009870:	f000 f838 	bl	80098e4 <_malloc_usable_size_r>
 8009874:	4284      	cmp	r4, r0
 8009876:	4607      	mov	r7, r0
 8009878:	d802      	bhi.n	8009880 <_realloc_r+0x34>
 800987a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800987e:	d812      	bhi.n	80098a6 <_realloc_r+0x5a>
 8009880:	4621      	mov	r1, r4
 8009882:	4640      	mov	r0, r8
 8009884:	f7ff ff6e 	bl	8009764 <_malloc_r>
 8009888:	4605      	mov	r5, r0
 800988a:	2800      	cmp	r0, #0
 800988c:	d0ed      	beq.n	800986a <_realloc_r+0x1e>
 800988e:	42bc      	cmp	r4, r7
 8009890:	4622      	mov	r2, r4
 8009892:	4631      	mov	r1, r6
 8009894:	bf28      	it	cs
 8009896:	463a      	movcs	r2, r7
 8009898:	f7ff fed0 	bl	800963c <memcpy>
 800989c:	4631      	mov	r1, r6
 800989e:	4640      	mov	r0, r8
 80098a0:	f7ff fef4 	bl	800968c <_free_r>
 80098a4:	e7e1      	b.n	800986a <_realloc_r+0x1e>
 80098a6:	4635      	mov	r5, r6
 80098a8:	e7df      	b.n	800986a <_realloc_r+0x1e>
	...

080098ac <_sbrk_r>:
 80098ac:	b538      	push	{r3, r4, r5, lr}
 80098ae:	4d06      	ldr	r5, [pc, #24]	; (80098c8 <_sbrk_r+0x1c>)
 80098b0:	2300      	movs	r3, #0
 80098b2:	4604      	mov	r4, r0
 80098b4:	4608      	mov	r0, r1
 80098b6:	602b      	str	r3, [r5, #0]
 80098b8:	f7f7 fb2a 	bl	8000f10 <_sbrk>
 80098bc:	1c43      	adds	r3, r0, #1
 80098be:	d102      	bne.n	80098c6 <_sbrk_r+0x1a>
 80098c0:	682b      	ldr	r3, [r5, #0]
 80098c2:	b103      	cbz	r3, 80098c6 <_sbrk_r+0x1a>
 80098c4:	6023      	str	r3, [r4, #0]
 80098c6:	bd38      	pop	{r3, r4, r5, pc}
 80098c8:	200024e0 	.word	0x200024e0

080098cc <__malloc_lock>:
 80098cc:	4801      	ldr	r0, [pc, #4]	; (80098d4 <__malloc_lock+0x8>)
 80098ce:	f000 b811 	b.w	80098f4 <__retarget_lock_acquire_recursive>
 80098d2:	bf00      	nop
 80098d4:	200024e4 	.word	0x200024e4

080098d8 <__malloc_unlock>:
 80098d8:	4801      	ldr	r0, [pc, #4]	; (80098e0 <__malloc_unlock+0x8>)
 80098da:	f000 b80c 	b.w	80098f6 <__retarget_lock_release_recursive>
 80098de:	bf00      	nop
 80098e0:	200024e4 	.word	0x200024e4

080098e4 <_malloc_usable_size_r>:
 80098e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80098e8:	1f18      	subs	r0, r3, #4
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	bfbc      	itt	lt
 80098ee:	580b      	ldrlt	r3, [r1, r0]
 80098f0:	18c0      	addlt	r0, r0, r3
 80098f2:	4770      	bx	lr

080098f4 <__retarget_lock_acquire_recursive>:
 80098f4:	4770      	bx	lr

080098f6 <__retarget_lock_release_recursive>:
 80098f6:	4770      	bx	lr

080098f8 <_init>:
 80098f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80098fa:	bf00      	nop
 80098fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80098fe:	bc08      	pop	{r3}
 8009900:	469e      	mov	lr, r3
 8009902:	4770      	bx	lr

08009904 <_fini>:
 8009904:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009906:	bf00      	nop
 8009908:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800990a:	bc08      	pop	{r3}
 800990c:	469e      	mov	lr, r3
 800990e:	4770      	bx	lr
